{"version":3,"file":"js/app.5eaf5b13.js","mappings":"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","sources":["webpack://now/./src/store.js","webpack://now/./src/components/common/Banner.vue","webpack://now/./src/composable/uitls/capitalizeFirstLetter.js","webpack://now/./src/composable/date/isNewPost.js","webpack://now/./src/composable/date/getTimeDifference.js","webpack://now/./src/composable/number/formatNumber.js","webpack://now/./src/components/table/PostList.vue","webpack://now/./src/composable/param/filterParams.js","webpack://now/./src/composable/response/ErrorType.js","webpack://now/./src/composable/request/http.js","webpack://now/./src/composable/request/getRequest.js","webpack://now/./src/composable/request/httpRequest.js","webpack://now/./src/composable/request/constants/Headers.js","webpack://now/./src/composable/request/constants/HttpMethod.js","webpack://now/./src/service/PostService.js","webpack://now/./src/components/common/Error.vue","webpack://now/./src/components/skeleton/PostListSkeleton.vue","webpack://now/./src/pages/home/Home.vue","webpack://now/./src/pages/home/Home.vue?df28","webpack://now/./src/components/card/PhotoCard.vue","webpack://now/./src/composable/date/getPastDate.js","webpack://now/./src/composable/date/getCurrentDate.js","webpack://now/./src/composable/param/constants/condition.js","webpack://now/./src/components/common/SearchForm.vue","webpack://now/./src/components/common/SearchForm.vue?aaf8","webpack://now/./src/components/common/PageInfo.vue","webpack://now/./src/components/common/Pagination.vue","webpack://now/./src/components/common/Pagination.vue?6870","webpack://now/./src/composable/postGroup/findSubCodeGroup.js","webpack://now/./src/composable/postGroup/PostGroup.js","webpack://now/./src/components/skeleton/PostNavbarSkeleton.vue","webpack://now/./src/components/skeleton/PostNavbarSkeleton.vue?de5d","webpack://now/./src/components/skeleton/SearchFormSkeleton.vue","webpack://now/./src/components/skeleton/SearchFormSkeleton.vue?4e73","webpack://now/./src/components/skeleton/PaginationSkeleton.vue","webpack://now/./src/components/skeleton/PaginationSkeleton.vue?2b67","webpack://now/./src/components/skeleton/BackgroundBannerSkeleton.vue","webpack://now/./src/components/skeleton/BackgroundBannerSkeleton.vue?a1dc","webpack://now/./src/components/common/BannerSub.vue","webpack://now/./src/composable/router/routeNameGroup.js","webpack://now/./src/composable/param/initialCondition.js","webpack://now/./src/composable/param/objectToQueryString.js","webpack://now/./src/composable/param/updateUrl.js","webpack://now/./src/composable/param/constants/conditionParams.js","webpack://now/./src/composable/param/InitialParams.js","webpack://now/./src/composable/submitForm/getPostsSubmit.js","webpack://now/./src/pages/Photo/Photos.vue","webpack://now/./src/pages/Photo/Photos.vue?7211","webpack://now/./src/service/AuthenticationService.js","webpack://now/./src/pages/home/SignIn.vue","webpack://now/./src/pages/home/SignIn.vue?0ee7","webpack://now/./src/pages/home/SignUp.vue","webpack://now/./src/pages/home/SignUp.vue?40a2","webpack://now/./src/pages/Notice/Notices.vue","webpack://now/./src/pages/Notice/Notices.vue?a4e3","webpack://now/./src/pages/Inquiry/Inquiries.vue","webpack://now/./src/pages/Inquiry/Inquiries.vue?4dfb","webpack://now/./src/pages/Community/Communities.vue","webpack://now/./src/pages/Community/Communities.vue?aee3","webpack://now/./src/components/Post.vue","webpack://now/./src/components/Post.vue?8882","webpack://now/./src/components/Comments.vue","webpack://now/./src/composable/attachment/getIconTagByExtension.js","webpack://now/./src/composable/attachment/formatBytes.js","webpack://now/./src/components/AttachmentList.vue","webpack://now/./src/components/skeleton/PostSkeleton.vue","webpack://now/./src/components/skeleton/PostSkeleton.vue?ead7","webpack://now/./src/components/common/PostFormHeader.vue","webpack://now/./src/composable/authentication/refreshTokenAndRetry.js","webpack://now/./src/composable/submitForm/deletePostSubmit.js","webpack://now/./src/pages/Community/CommunityPost.vue","webpack://now/./src/pages/Community/CommunityPost.vue?377c","webpack://now/./src/pages/Notice/NoticePost.vue","webpack://now/./src/pages/Notice/NoticePost.vue?fbab","webpack://now/./src/components/Carousel.vue","webpack://now/./src/components/Carousel.vue?a4bb","webpack://now/./src/pages/Photo/PhotoPost.vue","webpack://now/./src/pages/Photo/PhotoPost.vue?5579","webpack://now/./src/components/Answer.vue","webpack://now/./src/components/common/CommonMessage.vue","webpack://now/./src/pages/Inquiry/InquiryPost.vue","webpack://now/./src/pages/Inquiry/InquiryPost.vue?a761","webpack://now/./src/components/common/ValidationError.vue","webpack://now/./src/composable/attachment/constants/AttachmentType.js","webpack://now/./src/composable/attachment/validateAttachmentsExtension.js","webpack://now/./src/composable/attachment/validateAttachmentSize.js","webpack://now/./src/composable/attachment/validateAttachmentUploadCount.js","webpack://now/./src/composable/submitForm/savePostSubmitWithAttachments.js","webpack://now/./src/pages/Community/CommunityForm.vue","webpack://now/./src/pages/Community/CommunityForm.vue?6721","webpack://now/./src/composable/submitForm/savePostSubmit.js","webpack://now/./src/pages/Notice/NoticeForm.vue","webpack://now/./src/pages/Notice/NoticeForm.vue?8796","webpack://now/./src/pages/Photo/PhotoForm.vue","webpack://now/./src/pages/Photo/PhotoForm.vue?3610","webpack://now/./src/pages/Inquiry/InquiryForm.vue","webpack://now/./src/pages/Inquiry/InquiryForm.vue?381c","webpack://now/./src/composable/submitForm/editPostSubmitWithAttachments.js","webpack://now/./src/pages/Community/CommunityEdit.vue","webpack://now/./src/pages/Community/CommunityEdit.vue?9993","webpack://now/./src/pages/Notice/component/NoticeEditForm.vue","webpack://now/./src/pages/Notice/component/NoticeEditForm.vue?9b33","webpack://now/./src/pages/Notice/NoticeEdit.vue","webpack://now/./src/pages/Notice/NoticeEdit.vue?28f3","webpack://now/./src/composable/attachment/constants/EditAttachmentType.js","webpack://now/./src/composable/submitForm/editPostSubmitWithAttachmentsAndThumbnail.js","webpack://now/./src/pages/Photo/PhotoEdit.vue","webpack://now/./src/pages/Photo/PhotoEdit.vue?b1a1","webpack://now/./src/pages/Inquiry/component/InquiryEditForm.vue","webpack://now/./src/pages/Inquiry/component/InquiryEditForm.vue?9a15","webpack://now/./src/pages/Inquiry/InquiryEdit.vue","webpack://now/./src/pages/Inquiry/InquiryEdit.vue?8520","webpack://now/./src/components/NotFound.vue","webpack://now/./src/components/ServiceNotAvailable.vue","webpack://now/./src/components/Unauthorized.vue","webpack://now/./src/components/Forbidden.vue","webpack://now/./src/pages/home/Search.vue","webpack://now/./src/components/RequestError.vue","webpack://now/./src/router/router.js","webpack://now/./src/composable/router/routeWatch.js","webpack://now/./src/components/static/Header.vue","webpack://now/./src/components/static/Header.vue?2c42","webpack://now/./src/components/static/Footer.vue","webpack://now/./src/components/static/Footer.vue?ccf9","webpack://now/./src/service/CategoryService.js","webpack://now/./src/App.vue","webpack://now/./src/App.vue?7ccd","webpack://now/./src/composable/parse/parseJsonItemFromSessionStorage.js","webpack://now/./src/main.js","webpack://now/./src/resources/banner/ sync ^\\.\\/.*$","webpack://now/./src/resources/common/ sync ^\\.\\/.*$","webpack://now/webpack/bootstrap","webpack://now/webpack/runtime/chunk loaded","webpack://now/webpack/runtime/compat get default export","webpack://now/webpack/runtime/define property getters","webpack://now/webpack/runtime/global","webpack://now/webpack/runtime/hasOwnProperty shorthand","webpack://now/webpack/runtime/make namespace object","webpack://now/webpack/runtime/publicPath","webpack://now/webpack/runtime/jsonp chunk loading","webpack://now/webpack/startup"],"sourcesContent":["import {reactive} from 'vue';\r\n\r\nexport const store = reactive({\r\n    categories: [],\r\n\r\n    member: {\r\n        id: null,\r\n        nickname: null,\r\n        isSignedIn: false,\r\n    },\r\n\r\n    /**\r\n     * 토큰을 저장 및 로그인 상태 저장\r\n     *\r\n     */\r\n    saveMember(id, nickname) {\r\n        this.member.id = id\r\n        this.member.nickname = nickname\r\n        this.member.isSignedIn = true\r\n    },\r\n\r\n    /**\r\n     * 회원 정보를 초기화\r\n     */\r\n    resetMember() {\r\n        this.member.id = null\r\n        this.member.nickname = null\r\n        this.member.isSignedIn = false\r\n    },\r\n\r\n    /**\r\n     * 회원이 로그인 상태라면 true 반환, 그렇지 않다면 false 반환\r\n     *\r\n     * @returns {boolean} 회원이 로그인 상태라면 true 반환, 그렇지 않다면 false 반환\r\n     */\r\n    isMemberSignedIn() {\r\n        return this.member.isSignedIn;\r\n    },\r\n\r\n    /**\r\n     * 주어진 닉네임과 현재 회원의 닉네임이 일치하면 true 반환, 그렇지 않으면 false 반환\r\n     *\r\n     * @param {string} nickname - 비교할 닉네임\r\n     * @returns {boolean} 주어진 닉네임과 현재 회원의 닉네임이 일치하면 true 반환, 그렇지 않으면 false 반환\r\n     */\r\n    isSameMember(nickname) {\r\n        return this.member.nickname === nickname;\r\n    },\r\n});\r\n","import script from \"./Banner.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Banner.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","/**\r\n * 대쉬(\"-\")를 공백(\" \")으로 바꾸고 각 단어의 첫 글자를 대문자로 변환 컴포저블\r\n *\r\n * @param {string} text - 변환할 문자열\r\n * @returns {string} 대쉬가 공백으로 바뀌고 각 단어의 첫 글자가 대문자로 변환된 결과 문자열\r\n */\r\nexport function useCapitalizeFirstLetter(text) {\r\n    return text.replace(/_/g, ' ').toLowerCase().replace(/(?:^|\\s)\\S/g, (match) => match.toUpperCase());\r\n}","/**\r\n * 주어진 날짜와 현재 날짜를 비교하여 새로운 포스트(7일 이내)라면 true, 그렇지 않으면 false를 반환\r\n *\r\n * @param {string} date - 비교할 날짜 문자열\r\n * @returns {boolean} 7일 이내의 포스트이면 true, 그렇지 않으면 false를 반환\r\n */\r\nexport function useIsNewPost(date) {\r\n    const now = new Date();\r\n    const postDate = new Date(date);\r\n    const timeDiff = now.getTime() - postDate.getTime();\r\n    const daysDiff = timeDiff / (1000 * 3600 * 24);\r\n\r\n    return daysDiff <= 7;\r\n}","/**\r\n * 주어진 날짜와 현재 날짜와의 차이를 텍스트로 반환\r\n *\r\n * @param {string} dateString - 비교할 날짜 문자열\r\n * @returns {string} 시간 차이에 따른 텍스트\r\n */\r\nexport function useGetTimeDifference(dateString) {\r\n    const now = new Date();\r\n    const postDate = new Date(dateString);\r\n    const timeDiff = now.getTime() - postDate.getTime();\r\n    const minuteDiff = timeDiff / (1000 * 60);\r\n    const hourDiff = timeDiff / (1000 * 60 * 60);\r\n    const dayDiff = timeDiff / (1000 * 60 * 60 * 24);\r\n    const monthDiff = timeDiff / (1000 * 60 * 60 * 24 * 30);\r\n    const yearDiff = timeDiff / (1000 * 60 * 60 * 24 * 365);\r\n\r\n    if (minuteDiff < 1) {\r\n        return '방금 전';\r\n    } else if (minuteDiff < 60) {\r\n        return `${Math.floor(minuteDiff)}분 전`;\r\n    } else if (hourDiff < 24) {\r\n        return `${Math.floor(hourDiff)}시간 전`;\r\n    } else if (dayDiff < 30) {\r\n        return `${Math.floor(dayDiff)}일 전`;\r\n    } else if (monthDiff < 12) {\r\n        return `${Math.floor(monthDiff)}달 전`;\r\n    } else {\r\n        return `${Math.floor(yearDiff)}년 전`;\r\n    }\r\n}","/**\r\n * 숫자를 포맷팅하여 K, M, G 등의 단위로 변환\r\n * 예: 1234 -> 1.2K, 567890 -> 567.9K, 12345678 -> 12.3M\r\n *\r\n * @param {number} number - 포맷팅할 숫자\r\n * @returns {string} 포맷팅된 숫자와 단위로 이루어진 문자열\r\n */\r\nexport function useFormatNumber(number) {\r\n    const units = ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'];\r\n    let unitIndex = 0;\r\n    while (number >= 1000 && unitIndex < units.length - 1) {\r\n        number /= 1000;\r\n        unitIndex++;\r\n    }\r\n    return `${number % 1 === 0 ? number.toFixed(0) : number.toFixed(1)} ${units[unitIndex]}`;\r\n}","import script from \"./PostList.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./PostList.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./PostList.vue?vue&type=style&index=0&id=7d52f82d&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-7d52f82d\"]])\n\nexport default __exports__","/**\r\n * null 값을 제외한 필터링된 검색 조건 반환\r\n *\r\n * @param {Object} parameter - 파라미터 객체\r\n * @returns {Object} - 필터링된 파라미터 객체\r\n * @example\r\n *\r\n * // 예시 1: 파라미터 객체에서 null 값을 제외하여 필터링\r\n * const parameter = {\r\n *   startDate: '2023-01-01',\r\n *   endDate: null,\r\n *   categoryIdx: '1',\r\n *   keyword: null,\r\n *   pageNo: 1\r\n * };\r\n *\r\n * const filteredParams = filterParams(parameter);\r\n * filteredParams: { startDate: '2023-01-01', categoryIdx: '1', pageNo: 1 }\r\n */\r\nexport function useFilterParams(parameter) {\r\n    return Object.entries(parameter || {})\r\n        .filter(([key, value]) => value !== null)\r\n        .reduce((params, [key, value]) => {\r\n            params[key] = value;\r\n            return params;\r\n        }, {});\r\n}","const ErrorType = {\r\n    NOT_AUTHENTICATED: 1001,\r\n    ALREADY_AUTHENTICATED: 1002,\r\n    INVALID_TOKEN: 1003,\r\n    EXPIRED_ACCESS_TOKEN: 1004,\r\n    EXPIRED_REFRESH_TOKEN: 1005,\r\n    FORBIDDEN: 1006,\r\n    LOGGED_OUT_TOKEN: 1007,\r\n    NOT_FOUND_TOKEN: 1008,\r\n\r\n    NOT_FOUND_MEMBER: 2001,\r\n    DUPLICATE_MEMBER_INFO_ID: 2002,\r\n    DUPLICATE_MEMBER_INFO_NICKNAME: 2003,\r\n    DUPLICATE_MEMBER_INFO_ID_AND_NICKNAME: 2004,\r\n\r\n    NOT_FOUND_MANAGER: 3001,\r\n\r\n    NOT_FOUND_CATEGORY: 4001,\r\n    INVALID_CATEGORY: 4002,\r\n\r\n    NOT_FOUND_POST: 6001,\r\n    CAN_NOT_CREATE_POST: 6002,\r\n    CAN_NOT_UPDATE_POST: 6003,\r\n    CAN_NOT_UPDATE_OTHER_MEMBER_POST: 6004,\r\n    CAN_NOT_DELETE_OTHER_MEMBER_POST: 6005,\r\n    CAN_NOT_VIEW_SECRET_INQUIRY: 6006,\r\n    CAN_NOT_DELETE_POST_WITH_OTHER_MEMBER_COMMENTS: 6007,\r\n    CAN_NOT_VIEW_OTHER_MEMBER_INQUIRIES: 6008,\r\n    CAN_NOT_DELETE_POST_WITH_MANAGER_ANSWER: 6009,\r\n    INVALID_SECRET: 6010,\r\n\r\n    NOT_FOUND_COMMENT: 7001,\r\n    CAN_NOT_UPDATE_OTHER_MEMBER_COMMENT: 7002,\r\n    CAN_NOT_DELETE_OTHER_MEMBER_COMMENT: 7003,\r\n\r\n    INVALID_ATTACHMENT_EXTENSION: 8001,\r\n    INVALID_ATTACHMENT_SIZE: 8002,\r\n    INVALID_ATTACHMENT_ORIGINAL_NAME: 8003,\r\n    NOT_FOUND_ATTACHMENT: 8004,\r\n    CAN_NOT_UPDATE_THUMBNAIL: 8005,\r\n\r\n    REQUEST_EXCEPTION: 9001,\r\n    INVALID_PATH: 9002,\r\n    UNPROCESSABLE_ENTITY: 9003,\r\n    UNHANDLED_EXCEPTION: 9999,\r\n};\r\n\r\nexport default ErrorType;\r\n","import axios from \"axios\";\r\nimport ErrorType from \"@/composable/response/ErrorType\";\r\nimport router from \"@/router/router\";\r\nimport { store } from \"@/store\";\r\n\r\n/**\r\n * Axios 인스턴스를 생성\r\n * @type {import(\"axios\").AxiosInstance}\r\n */\r\nconst instance = axios.create({\r\n});\r\n\r\nexport default instance;\r\n\r\n/**\r\n * 응답을 처리하는 Axios 인터셉터 함수\r\n * @param {import(\"axios\").AxiosResponse} response - 성공적인 응답 객체\r\n * @returns {import(\"axios\").AxiosResponse} - 처리된 응답 객체\r\n * @throws {import(\"axios\").AxiosError} - 응답이 실패한 경우 예외를 던짐\r\n */\r\ninstance.interceptors.response.use(function (response) {\r\n    return response;\r\n}, async function (error) {\r\n    console.log(error);\r\n    const errorCode = error?.response?.data?.errorCode;\r\n\r\n    // 전역 에러 핸들링\r\n    if (errorCode === ErrorType.NOT_FOUND_POST) {\r\n        await router.push({ name: \"NotFound\" });\r\n    }\r\n    if (errorCode === ErrorType.NOT_AUTHENTICATED) {\r\n        store.resetMember();\r\n        await router.push({ name: \"SignIn\" });\r\n    }\r\n    if (errorCode === ErrorType.INVALID_TOKEN) {\r\n        store.resetMember();\r\n        await router.push({ name: \"SignIn\" });\r\n    }\r\n    if (errorCode === ErrorType.EXPIRED_REFRESH_TOKEN) {\r\n        store.resetMember();\r\n        await router.push({ name: \"SignIn\" });\r\n    }\r\n    if (errorCode === ErrorType.CAN_NOT_UPDATE_OTHER_MEMBER_POST) {\r\n        await router.push({ name: \"Forbidden\" });\r\n    }\r\n    if (errorCode === ErrorType.FORBIDDEN) {\r\n        await router.push({ name: \"Forbidden\" });\r\n    }\r\n    if (errorCode === ErrorType.REQUEST_EXCEPTION) {\r\n        await router.push({ name: \"RequestError\" });\r\n    }\r\n    if (errorCode === ErrorType.LOGGED_OUT_TOKEN) {\r\n        store.resetMember();\r\n    }\r\n    if (errorCode === ErrorType.NOT_FOUND_TOKEN) {\r\n        store.resetMember();\r\n    }\r\n    return Promise.reject(error);\r\n});\r\n","import {useFilterParams} from \"@/composable/param/filterParams\";\r\nimport http from \"./http\"\r\n\r\n/**\r\n * GET 요청을 수행하는 컴포저블\r\n *\r\n * @param {string} url - 요청을 보낼 URL\r\n * @param {Record<string, any>} [params=null] - 요청에 사용될 매개변수 객체 (기본값: null)\r\n * @returns {Promise<AxiosResponse<any>>} - 응답 객체\r\n */\r\nexport function useGetRequest(url, params = null) {\r\n    return http.get(url, {params: useFilterParams(params)})\r\n}\r\n","import http from \"./http\"\r\n\r\n/**\r\n * HTTP 요청을 수행하는 컴포저블\r\n *\r\n * @param {string} method - HTTP 메서드 (post, put 등)\r\n * @param {string} url - API 엔드포인트 URL\r\n * @param {Object} formData - API 요청에 사용되는 데이터 객체\r\n * @param {Object} requestHeader - 요청 헤더\r\n * @returns {object} - 응답 객체\r\n */\r\nexport function useHttpRequest(method, url, formData = null, requestHeader = null) {\r\n    return http.request({\r\n        method,\r\n        url,\r\n        data: formData,\r\n        headers: requestHeader,\r\n    })\r\n}\r\n\r\n\r\n","export const multipart = {\r\n    'Content-Type': `multipart/form-data`,\r\n};\r\n\r\nexport const json = {\r\n    'Content-Type': `application/json`,\r\n}\r\n\r\nexport const formUrlencoded = {\r\n    'Content-Type': `application/x-www-form-urlencoded`,\r\n}","export const HttpMethod = {\r\n    GET: 'get',\r\n    POST: 'post',\r\n    PUT: 'put',\r\n    DELETE: 'delete',\r\n};\r\n","import {useGetRequest} from \"@/composable/request/getRequest\";\r\nimport {useHttpRequest} from \"@/composable/request/httpRequest\";\r\nimport {formUrlencoded, json, multipart} from \"@/composable/request/constants/Headers\";\r\nimport {HttpMethod} from \"@/composable/request/constants/HttpMethod\";\r\n\r\nconst PostService = {\r\n\r\n    /**\r\n     * 모든 게시글 목록을 가져오는 함수\r\n     *\r\n     * @param {object} condition - 조건 정보가 담긴 객체\r\n     * @returns {Promise<AxiosResponse<any>>} - 게시판 목록\r\n     */\r\n    fetchPosts(condition) {\r\n        return useGetRequest('/api/posts', condition)\r\n    },\r\n\r\n    /**\r\n     * 공지 게시글 목록을 가져오는 함수\r\n     *\r\n     * @param {object} condition - 조건 정보가 담긴 객체\r\n     * @returns {Promise<AxiosResponse<any>>} - 게시판 목록\r\n     */\r\n    fetchNotices(condition) {\r\n        return useGetRequest('/api/notices', condition)\r\n    },\r\n\r\n    /**\r\n     * 커뮤니티 게시글 목록을 가져오는 함수\r\n     *\r\n     * @param {object} condition - 조건 정보가 담긴 객체\r\n     * @returns {Promise<AxiosResponse<any>>} - 게시판 목록\r\n     */\r\n    fetchCommunities(condition) {\r\n        return useGetRequest('/api/communities', condition)\r\n    },\r\n\r\n    /**\r\n     * 사진 게시글 목록을 가져오는 함수\r\n     *\r\n     * @param {object} condition - 조건 정보가 담긴 객체\r\n     * @returns {Promise<AxiosResponse<any>>} - 게시판 목록\r\n     */\r\n    fetchPhotos(condition) {\r\n        return useGetRequest('/api/photos', condition)\r\n    },\r\n\r\n    /**\r\n     * 문의 게시글 목록을 가져오는 함수\r\n     *\r\n     * @param {object} condition - 조건 정보가 담긴 객체\r\n     * @returns {Promise<AxiosResponse<any>>} - 게시판 목록\r\n     */\r\n    fetchInquiries(condition) {\r\n        return useGetRequest('/api/inquiries', condition)\r\n    },\r\n\r\n    \r\n\r\n\r\n\r\n    /**\r\n     * 공지 게시물 정보를 가져오는 함수\r\n     *\r\n     * @param postIdx 게시물 번호\r\n     * @returns {Promise<AxiosResponse<any>>}\r\n     */\r\n    fetchNotice(postIdx) {\r\n        return useGetRequest(`/api/notices/${postIdx}`)\r\n    },\r\n\r\n    /**\r\n     * 커뮤니티 게시물 정보를 가져오는 함수\r\n     *\r\n     * @param postIdx 게시물 번호\r\n     * @returns {Promise<AxiosResponse<any>>}\r\n     */\r\n    fetchCommunity(postIdx) {\r\n        return useGetRequest(`/api/communities/${postIdx}`)\r\n    },\r\n\r\n    /**\r\n     * 사진 게시물 정보를 가져오는 함수\r\n     *\r\n     * @param postIdx 게시물 번호\r\n     * @returns {Promise<AxiosResponse<any>>}\r\n     */\r\n    fetchPhoto(postIdx) {\r\n        return useGetRequest(`/api/photos/${postIdx}`)\r\n    },\r\n\r\n    /**\r\n     * 문의 게시물 정보를 가져오는 함수\r\n     *\r\n     * @param postIdx 게시물 번호\r\n     * @returns {Promise<AxiosResponse<any>>}\r\n     */\r\n    fetchInquiry(postIdx) {\r\n        return useGetRequest(`/api/inquiries/${postIdx}`)\r\n    },\r\n\r\n\r\n    /**\r\n     * 비밀글 설정된 문의 게시글 정보를 가져오는 함수\r\n     *\r\n     * @param postIdx 게시물 번호\r\n     * @param formData 폼 데이터\r\n     */\r\n    fetchSecretInquiry(postIdx, formData) {\r\n        return useHttpRequest(HttpMethod.POST, `/api/inquiries/secret/${postIdx}`, formData, formUrlencoded);\r\n    },\r\n    \r\n    \r\n    \r\n    \r\n\r\n    /**\r\n     * 수정 공지 게시물 정보를 가져오는 함수\r\n     *\r\n     * @param postIdx 게시물 번호\r\n     * @returns {Promise<AxiosResponse<any>>}\r\n     */\r\n    fetchEditNotice(postIdx) {\r\n        return useGetRequest(`/api/manager/notices/${postIdx}/edit`)\r\n    },\r\n\r\n    /**\r\n     * 수정 커뮤니티 게시물 정보를 가져오는 함수\r\n     *\r\n     * @param postIdx 게시물 번호\r\n     * @returns {Promise<AxiosResponse<any>>}\r\n     */\r\n    fetchEditCommunity(postIdx) {\r\n        return useGetRequest(`/api/communities/${postIdx}/edit`)\r\n    },\r\n\r\n    /**\r\n     * 수정 사진 게시물 정보를 가져오는 함수\r\n     *\r\n     * @param postIdx 게시물 번호\r\n     * @returns {Promise<AxiosResponse<any>>}\r\n     */\r\n    fetchEditPhoto(postIdx) {\r\n        return useGetRequest(`/api/photos/${postIdx}/edit`)\r\n    },\r\n\r\n    /**\r\n     * 수정 문의 게시물 정보를 가져오는 함수\r\n     *\r\n     * @param postIdx 게시물 번호\r\n     * @returns {Promise<AxiosResponse<any>>}\r\n     */\r\n    fetchEditInquiry(postIdx) {\r\n        return useGetRequest(`/api/inquiries/${postIdx}/edit`)\r\n    },\r\n    \r\n    \r\n\r\n\r\n\r\n    /**\r\n     * 공지 게시물을 저장하는 함수\r\n     *\r\n     * @param {object} formData - 저장할 게시물 데이터가 담긴 폼 데이터\r\n     * @returns {Promise<AxiosResponse<any>>} - 저장된 게시물 정보\r\n     */\r\n    saveNotice(formData) {\r\n        return useHttpRequest(HttpMethod.POST, '/api/manager/notices', formData, json);\r\n    },\r\n\r\n\r\n    /**\r\n     * 커뮤니티 게시물을 저장하는 함수\r\n     *\r\n     * @param {object} formData - 저장할 게시물 데이터가 담긴 폼 데이터\r\n     * @returns {Promise<AxiosResponse<any>>} - 저장된 게시물 정보\r\n     */\r\n    saveCommunity(formData) {\r\n        return useHttpRequest(HttpMethod.POST, '/api/communities', formData, multipart);\r\n    },\r\n\r\n    /**\r\n     * 사진 게시물을 저장하는 함수\r\n     *\r\n     * @param {object} formData - 저장할 게시물 데이터가 담긴 폼 데이터\r\n     * @returns {Promise<AxiosResponse<any>>} - 저장된 게시물 정보\r\n     */\r\n    savePhoto(formData) {\r\n        return useHttpRequest(HttpMethod.POST, '/api/photos', formData, multipart);\r\n    },\r\n\r\n    /**\r\n     * 문의 게시물을 저장하는 함수\r\n     *\r\n     * @param {object} formData - 저장할 게시물 데이터가 담긴 폼 데이터\r\n     * @returns {Promise<AxiosResponse<any>>} - 저장된 게시물 정보\r\n     */\r\n    saveInquiry(formData) {\r\n        return useHttpRequest(HttpMethod.POST, '/api/inquiries', formData, json);\r\n    },\r\n    \r\n    \r\n\r\n    /**\r\n     * 커뮤니티 게시물을 수정하는 함수\r\n     *\r\n     * @param postIdx 게시글 번호\r\n     * @param {object} formData - 저장할 게시물 데이터가 담긴 폼 데이터\r\n     * @returns {Promise<AxiosResponse<any>>} - 저장된 게시물 정보\r\n     */\r\n    editCommunity(postIdx, formData) {\r\n        return useHttpRequest(HttpMethod.PUT, `/api/communities/${postIdx}`, formData, multipart);\r\n    },\r\n\r\n    /**\r\n     * 사진 게시물을 수정하는 함수\r\n     *\r\n     * @param postIdx 게시글 번호\r\n     * @param {object} formData - 저장할 게시물 데이터가 담긴 폼 데이터\r\n     * @returns {Promise<AxiosResponse<any>>} - 저장된 게시물 정보\r\n     */\r\n    editPhoto(postIdx, formData) {\r\n        return useHttpRequest(HttpMethod.PUT, `/api/photos/${postIdx}`, formData, multipart);\r\n    },\r\n    \r\n    \r\n\r\n\r\n    /**\r\n     * 문의 게시글을 삭제하는 함수\r\n     *\r\n     * @param {string} postIdx - 삭제할 게시물의 번호\r\n     * @returns {Promise<AxiosResponse<any>>} - 삭제 요청 결과\r\n     */\r\n    deleteNotice(postIdx) {\r\n        return useHttpRequest(HttpMethod.DELETE, `/api/manager/notices/${postIdx}`);\r\n    },\r\n\r\n    /**\r\n     * 커뮤니티 게시글을 삭제하는 함수\r\n     *\r\n     * @param {string} postIdx - 삭제할 게시물의 번호\r\n     * @returns {Promise<AxiosResponse<any>>} - 삭제 요청 결과\r\n     */\r\n    deleteCommunity(postIdx) {\r\n        return useHttpRequest(HttpMethod.DELETE, `/api/communities/${postIdx}`);\r\n    },\r\n\r\n    /**\r\n     * 사진 게시글을 삭제하는 함수\r\n     *\r\n     * @param {string} postIdx - 삭제할 게시물의 번호\r\n     * @returns {Promise<AxiosResponse<any>>} - 삭제 요청 결과\r\n     */\r\n    deletePhoto(postIdx) {\r\n        return useHttpRequest(HttpMethod.DELETE, `/api/photos/${postIdx}`);\r\n    },\r\n\r\n    /**\r\n     * 문의 게시글을 삭제하는 함수\r\n     *\r\n     * @param {string} postIdx - 삭제할 게시물의 번호\r\n     * @returns {Promise<AxiosResponse<any>>} - 삭제 요청 결과\r\n     */\r\n    deleteInquiry(postIdx) {\r\n        return useHttpRequest(HttpMethod.DELETE, `/api/inquiries/${postIdx}`);\r\n    },\r\n\r\n};\r\n\r\nexport default PostService;\r\n","import script from \"./Error.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Error.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import script from \"./PostListSkeleton.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./PostListSkeleton.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\r\nimport Banner from \"@/components/common/Banner.vue\";\r\nimport PostList from \"@/components/table/PostList.vue\";\r\nimport {ref} from \"vue\";\r\nimport PostService from \"@/service/PostService\";\r\nimport Error from \"@/components/common/Error.vue\";\r\nimport PostListSkeleton from \"@/components/skeleton/PostListSkeleton.vue\";\r\n\r\n\r\n/** 게시글 목록을 담는 반응성 객체 */\r\nconst fetchPostsData = ref({\r\n  notices: null,\r\n  communities: null,\r\n  photos: null,\r\n  inquiries: null\r\n})\r\n\r\n/** 게시글 목록을 가져올때 발생하는 에러를 담는 반응성 객체 */\r\nconst fetchPostsError = ref(null)\r\n\r\n/** 검색 조건을 담는 반응성 객체 */\r\nconst initialCondition = ref({\r\n  maxNumberOfPosts: 5\r\n})\r\n\r\n/**\r\n * 모든 게시글 목록을 가져오는 함수\r\n *\r\n * @param {Record<string, any>} condition - 검색 조건 객체\r\n * @returns {Promise<void>}\r\n */\r\nasync function getPosts(condition) {\r\n  return PostService.fetchPosts(condition).then(response => {\r\n    fetchPostsData.value = response.data\r\n  }).catch(error => {\r\n    console.log(error)\r\n  })\r\n}\r\n\r\n// 초기 검색 조건을 사용하여 게시글 목록을 가져오기 위해 함수 호출\r\ngetPosts(initialCondition.value)\r\n\r\n</script>\r\n<template>\r\n  <Banner\r\n      :router-name=\"`Home`\"\r\n      :banner-path=\"`home.png`\"\r\n  />\r\n\r\n  <!-- 조건부 렌더링 1: 서버 통신 fail -->\r\n  <template v-if=\"fetchPostsError !== null\">\r\n    <Error :error=\"fetchPostsError\"/>\r\n  </template>\r\n\r\n  <b-container class=\"mt-3\">\r\n    <b-row>\r\n      <b-col\r\n          lg=\"6\"\r\n          class=\"mb-3\"\r\n      >\r\n        <Banner\r\n            :router-name=\"`Notices`\"\r\n            :banner-path=\"`home-notice.png`\"\r\n        />\r\n        <template v-if=\"fetchPostsData.notices !== null\">\r\n          <PostList\r\n            :posts=\"fetchPostsData.notices\"\r\n            :postRouteName=\"`NoticePost`\"\r\n          />\r\n        </template>\r\n        <template v-else>\r\n          <PostListSkeleton />\r\n        </template>\r\n      </b-col>\r\n\r\n      <b-col\r\n          lg=\"6\"\r\n          class=\"mb-3\"\r\n      >\r\n        <Banner\r\n            :router-name=\"`Communities`\"\r\n            :banner-path=\"`home-community.png`\"\r\n        />\r\n        <template v-if=\"fetchPostsData.communities !== null\">\r\n          <PostList\r\n              :posts=\"fetchPostsData.communities\"\r\n              :postRouteName=\"`CommunityPost`\"\r\n          />\r\n        </template>\r\n        <template v-else>\r\n          <PostListSkeleton />\r\n        </template>\r\n      </b-col>\r\n\r\n      <b-col\r\n          lg=\"6\"\r\n          class=\"mb-3\"\r\n      >\r\n        <Banner\r\n            :router-name=\"`Photos`\"\r\n            :banner-path=\"`home-photo.png`\"/>\r\n        <template v-if=\"fetchPostsData.photos !== null\">\r\n          <PostList\r\n              :posts=\"fetchPostsData.photos\"\r\n              :postRouteName=\"`PhotoPost`\"\r\n          />\r\n        </template>\r\n        <template v-else>\r\n          <PostListSkeleton />\r\n        </template>\r\n      </b-col>\r\n\r\n      <b-col\r\n          lg=\"6\"\r\n          class=\"mb-3\"\r\n      >\r\n        <Banner\r\n            :router-name=\"`Inquiries`\"\r\n            :banner-path=\"`home-inquiry.png`\"/>\r\n        <template v-if=\"fetchPostsData.inquiries !== null\">\r\n          <PostList\r\n              :posts=\"fetchPostsData.inquiries\"\r\n              :postRouteName=\"`InquiryPost`\"\r\n          />\r\n        </template>\r\n        <template v-else>\r\n          <PostListSkeleton />\r\n        </template>\r\n      </b-col>\r\n    </b-row>\r\n  </b-container>\r\n</template>\r\n\r\n","import script from \"./Home.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Home.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import script from \"./PhotoCard.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./PhotoCard.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./PhotoCard.vue?vue&type=style&index=0&id=165a6d32&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-165a6d32\"]])\n\nexport default __exports__","/**\r\n * 지정된 날짜에서 일정 기간을 뺀 날짜를 계산하는 함수\r\n *\r\n * @param {number} period - 뺄 일 수\r\n * @param {Date} [startDate=new Date()] - 기준 날짜 (기본값: 현재 날짜)\r\n * @returns {string} \"YYYY-MM-DD\" 형식의 날짜 문자열\r\n */\r\nexport function useGetPastDate(period, startDate = new Date()) {\r\n    startDate.setDate(startDate.getDate() - period);\r\n    const year = startDate.getFullYear();\r\n    const month = String(startDate.getMonth() + 1).padStart(2, '0');\r\n    const day = String(startDate.getDate()).padStart(2, '0');\r\n    return `${year}-${month}-${day}`;\r\n}","/**\r\n * 현재 날짜를 가져오는 함수\r\n *\r\n * @returns {string} \"YYYY-MM-DD\" 형식의 날짜 문자열\r\n */\r\nexport function useGetCurrentDate() {\r\n    const currentDate = new Date();\r\n    const year = currentDate.getFullYear();\r\n    const month = String(currentDate.getMonth() + 1).padStart(2, '0');\r\n    const day = String(currentDate.getDate()).padStart(2, '0');\r\n    return `${year}-${month}-${day}`;\r\n}","/**\r\n * 게시글의 최대 개수를 나타내는 배열\r\n *\r\n * @type {Array<number>}\r\n */\r\nexport const MAX_NUMBER_OF_POSTS = [10, 20, 30, 40, 50];\r\n\r\n/**\r\n * 게시글 정렬 옵션을 나타내는 객체\r\n *\r\n * @type {Object}\r\n * @property {null} LATEST - 최신순 정렬을 나타내는 상수\r\n * @property {string} RECOMMENDED - 추천순 정렬을 나타내는 상수\r\n * @property {string} MOST_VIEWED - 조회순 정렬을 나타내는 상수\r\n * @property {string} COMMENTED - 댓글순 정렬을 나타내는 상수\r\n * @property {string} SCRAPED - 스크랩순 정렬을 나타내는 상수\r\n */\r\nexport const SORT = {\r\n    LATEST: \"LATEST\",\r\n    RECOMMENDED: \"RECOMMENDED\",\r\n    MOST_VIEWED: \"MOST_VIEWED\",\r\n    COMMENTED: \"COMMENTED\",\r\n    SCRAPED: \"SCRAPED\",\r\n};\r\n\r\n/**\r\n * 게시글 정렬 옵션을 담은 배열\r\n *\r\n * @type {Array<Object>}\r\n */\r\nexport const SORT_OPTIONS = [\r\n    { key: \"latest\", value: SORT.LATEST, label: \"최신순\" },\r\n    { key: \"recommended\", value: SORT.RECOMMENDED, label: \"추천순\" },\r\n    { key: \"most_viewed\", value: SORT.MOST_VIEWED, label: \"조회순\" },\r\n    { key: \"commented\", value: SORT.COMMENTED, label: \"댓글순\", disabled: true },\r\n    { key: \"scraped\", value: SORT.SCRAPED, label: \"스크랩순\", disabled: true },\r\n];\r\n","<script setup>\r\nimport {ref, watch} from \"vue\";\r\nimport {useGetPastDate} from \"@/composable/date/getPastDate\";\r\nimport {useGetCurrentDate} from \"@/composable/date/getCurrentDate\";\r\nimport {MAX_NUMBER_OF_POSTS, SORT, SORT_OPTIONS} from \"@/composable/param/constants/condition\";\r\n\r\nconst emit = defineEmits(['search'])\r\n\r\nconst props = defineProps({\r\n  condition: Object,\r\n  categories: Object,\r\n  postFormRouteName: String\r\n})\r\n\r\nconst condition = ref({\r\n  startDate: props.condition.startDate,\r\n  endDate: props.condition.endDate,\r\n  postGroup: props.condition.postGroup,\r\n  category: props.condition.category,\r\n  keyword: props.condition.keyword,\r\n  pageNo: props.condition.pageNo,\r\n  maxNumberOfPosts: props.condition.maxNumberOfPosts,\r\n  sort: props.condition.sort\r\n});\r\n\r\n/**\r\n * 검색 조건을 초기화\r\n *\r\n * @function\r\n * @returns {void}\r\n */\r\nconst cleanCondition = () => {\r\n  condition.value.startDate = useGetPastDate(365);\r\n  condition.value.endDate = useGetCurrentDate();\r\n  condition.value.postGroup = props.condition.postGroup;\r\n  condition.value.category = null;\r\n  condition.value.keyword = null;\r\n  condition.value.pageNo = 1;\r\n  condition.value.maxNumberOfPosts = 10;\r\n  condition.value.sort = SORT.LATEST;\r\n\r\n  emit('search', condition.value)\r\n};\r\n\r\n/**\r\n * 정렬 옵션을 변경하는 함수\r\n *\r\n * @function\r\n * @param {string} value - 변경할 정렬 옵션 값\r\n * @returns {void}\r\n */\r\nfunction changeSort(value) {\r\n  condition.value.sort = value;\r\n}\r\n\r\n/**\r\n * 한 페이지에 보여질 게시글 수를 변경하는 함수\r\n *\r\n * @function\r\n * @param {number} value - 변경할 한 페이지에 보여질 게시글 수 값\r\n * @returns {void}\r\n */\r\nfunction changeMaxNumberOfPosts(value) {\r\n  condition.value.maxNumberOfPosts = value;\r\n}\r\n\r\n/**\r\n * 카테고리를 변경하는 함수\r\n *\r\n * @function\r\n * @param {Object} category - 변경할 카테고리 객체\r\n * @param {string} category.subCode - 변경할 카테고리 서브 코드 값\r\n * @returns {void}\r\n */\r\nconst changeCategory = (category) => {\r\n  condition.value.category = category.subCode;\r\n};\r\n\r\nconst resetCategory = () => {\r\n  condition.value.category = null;\r\n};\r\n\r\n/**\r\n * 검색을 실행하는 함수\r\n *\r\n * @function\r\n * @returns {void}\r\n */\r\nfunction search() {\r\n  emit('search', condition.value)\r\n}\r\n\r\n/**\r\n * condition 객체의 startDate, endDate, category, maxNumberOfPosts, sort 필드를 감시\r\n *\r\n * @function\r\n * @param {Array} source - 감시 대상 필드들의 배열\r\n * @param {function} callback - 감시 대상 필드들이 변경될 때 호출될 콜백 함수\r\n * @param {Object} options - watch 옵션 객체\r\n * @param {boolean} options.deep - 중첩된 객체를 감시하는 옵션\r\n * @returns {void}\r\n */\r\nwatch(\r\n    () => [\r\n        condition.value.startDate, condition.value.endDate,\r\n        condition.value.category, condition.value.maxNumberOfPosts,\r\n        condition.value.sort\r\n    ],\r\n    (newStartDate) => {\r\n      condition.value.pageNo = 1;\r\n      search();\r\n    },\r\n    { deep: true } // deep 옵션을 사용하여 중첩된 객체를 감시합니다.\r\n);\r\n\r\n\r\n</script>\r\n<template>\r\n  <b-row class=\"mb-2\">\r\n    <b-col cols=\"3\" class=\"d-flex justify-content-start\">\r\n      <b-form-input class=\"currentDate text-center me-3\" v-model=\"condition.startDate\" type=\"date\"\r\n                    placeholder=\"시작 날짜\"></b-form-input>\r\n      <b-form-input class=\"endDate text-center\" v-model=\"condition.endDate\" type=\"date\"\r\n                    placeholder=\"끝 날짜\"></b-form-input>\r\n    </b-col>\r\n    <b-col cols=\"9\" class=\"d-flex justify-content-end\">\r\n      <b-form-input type=\"text\" placeholder=\"제목, 내용, 닉네임 ...\" class=\"me-2\" v-model=\"condition.keyword\"\r\n                    style=\"max-width: 300px;\"></b-form-input>\r\n      <b-button variant=\"primary\" size=\"sm\" class=\"text-nowrap me-1\" @click=\"search()\">검색\r\n      </b-button>\r\n      <b-button variant=\"danger\" size=\"sm\" class=\"text-nowrap\" @click=\"cleanCondition\">검색 초기화</b-button>\r\n    </b-col>\r\n  </b-row>\r\n\r\n  <nav class=\"navbar navbar-expand navbar-light bg-light rounded-2\">\r\n    <!-- Left Element -->\r\n    <b-navbar-nav class=\"me-auto\">\r\n      <b-nav-item>\r\n        <b-button variant=\"primary\" class=\"mr-3\" @click=\"$router.push({name:`${postFormRouteName}`})\">\r\n          <i class=\"bi bi-pencil-square\" style=\"font-size:24px;\"></i>\r\n        </b-button>\r\n      </b-nav-item>\r\n    </b-navbar-nav>\r\n    <!-- End Left Element -->\r\n\r\n    <!-- Center Element -->\r\n    <b-navbar-nav class=\"mx-auto text-nowrap\">\r\n\r\n      <b-nav-item :class=\"{ 'selected': condition.category === null }\">\r\n        <b-link class=\"router-link text-decoration-none\" @click=\"resetCategory()\"\r\n                :class=\"{'text-secondary': condition.category !== null }\">\r\n          전체\r\n        </b-link>\r\n      </b-nav-item>\r\n\r\n\r\n      <b-nav-item v-for=\"category in categories\" :key=\"category.subCode\"\r\n                  :class=\"{ 'selected': category.subCode === condition.category}\"\r\n                  >\r\n        <b-link class=\"router-link text-decoration-none\" @click=\"changeCategory(category)\" :value=\"category.subCode\"\r\n                :class=\"{'text-secondary': category.subCode !== condition.category }\"\r\n        >\r\n          {{ category.subCodeTitle }}\r\n        </b-link>\r\n      </b-nav-item>\r\n    </b-navbar-nav>\r\n\r\n    <!-- End Center Element -->\r\n    <!-- Right Element -->\r\n    <b-navbar-nav class=\"ms-auto\">\r\n      <b-nav-item>\r\n        <b-dropdown id=\"dropdown-1\">\r\n          <template #button-content>\r\n            <i class=\"bi bi-sort-numeric-down\" style=\"font-size:20px;\"></i>\r\n          </template>\r\n          <b-dropdown-item v-for=\"numPosts in MAX_NUMBER_OF_POSTS\" :key=\"numPosts\"\r\n                           @click=\"changeMaxNumberOfPosts(numPosts)\"\r\n                           :active=\"condition.maxNumberOfPosts === numPosts\">\r\n            {{ numPosts }}개\r\n          </b-dropdown-item>\r\n        </b-dropdown>\r\n      </b-nav-item>\r\n      <b-nav-item>\r\n        <b-dropdown id=\"dropdown-1\">\r\n          <template #button-content>\r\n            <i class=\"bi bi-sort-alpha-down\" style=\"font-size:20px;\"></i>\r\n          </template>\r\n          <b-dropdown-item v-for=\"sort in SORT_OPTIONS\" :key=\"sort.key\" @click=\"changeSort(sort.value)\"\r\n                           :active=\"condition.sort === sort.value\" :disabled=\"sort.disabled\">\r\n            {{ sort.label }}\r\n          </b-dropdown-item>\r\n        </b-dropdown>\r\n      </b-nav-item>\r\n    </b-navbar-nav>\r\n    <!-- End Right Element -->\r\n  </nav>\r\n\r\n  <slot></slot>\r\n</template>\r\n<script setup>\r\n</script>","import script from \"./SearchForm.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./SearchForm.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import script from \"./PageInfo.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./PageInfo.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\r\nimport {computed, defineProps} from 'vue';\r\nimport PageInfo from \"@/components/common/PageInfo.vue\";\r\n\r\nconst emit = defineEmits(['changePageNo'])\r\n\r\nconst props = defineProps({\r\n  page: Object,\r\n});\r\n\r\n/**\r\n * 필터링된 페이지 배열을 계산하는 컴퓨티드 속성\r\n * @type {ComputedRef<unknown[]>}\r\n */\r\nconst filteredPages = computed(() => {\r\n  let startPage = props.page.startPage\r\n  let endPage = props.page.endPage\r\n  return Array.from({ length: endPage - startPage + 1 }, (_, i) => startPage + i);\r\n});\r\n\r\n/**\r\n * 페이지 번호 변경을 처리하는 메서드\r\n * @param {number|string} changePageNo - 변경할 페이지 번호 또는 'prev', 'next'\r\n */\r\nconst changePage = (changePageNo) => {\r\n  if (changePageNo === 'prev') {\r\n    emit('changePageNo', props.page.pageNo - 1)\r\n  } else if (changePageNo === 'next') {\r\n    emit('changePageNo', props.page.pageNo + 1)\r\n  } else {\r\n    emit('changePageNo', changePageNo)\r\n  }\r\n};\r\n\r\n</script>\r\n\r\n<template>\r\n  <div class=\"pos-relative d-flex justify-content-center mt-5\">\r\n    <ul class=\"pagination b-pagination-pills\">\r\n      <li :class=\"['page-item', { 'disabled': page.pageNo === 1 || page.maxPage === 0 }]\">\r\n        <a class=\"page-link border-0 mx-1 pg-font-sm\" href=\"#\" @click.prevent=\"changePage(1)\">\r\n          <i class=\"bi bi-chevron-double-left\"></i>\r\n        </a>\r\n      </li>\r\n      <li :class=\"['page-item', { 'disabled': page.pageNo === 1 || page.maxPage === 0 }]\">\r\n        <a class=\"page-link border-0 mx-1 pg-font-sm\" href=\"#\" @click.prevent=\"changePage('prev')\">\r\n          <i class=\"bi bi-chevron-left\"></i>\r\n        </a>\r\n      </li>\r\n\r\n      <li v-for=\"pageNumber in filteredPages\" :class=\"['page-item', { 'active': pageNumber === page.pageNo }]\" :key=\"pageNumber\">\r\n        <a class=\"page-link border-0 mx-1 pg-font-sm\" href=\"#\" @click.prevent=\"changePage(pageNumber)\">{{ pageNumber }}</a>\r\n      </li>\r\n\r\n      <li :class=\"['page-item', { 'disabled': page.maxPage === 0 || page.pageNo === page.maxPage }]\">\r\n        <a class=\"page-link border-0 mx-1 pg-font-sm\" href=\"#\" @click.prevent=\"changePage('next')\">\r\n          <i class=\"bi bi-chevron-right\"></i>\r\n        </a>\r\n      </li>\r\n      <li :class=\"['page-item', { 'disabled': page.maxPage === 0 || page.pageNo === page.maxPage }]\">\r\n        <a class=\"page-link border-0 mx-1 pg-font-sm\" href=\"#\" @click.prevent=\"changePage(page.maxPage)\">\r\n          <i class=\"bi bi-chevron-double-right\"></i>\r\n        </a>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n  <PageInfo :page=\"page\"/>\r\n</template>\r\n\r\n","import script from \"./Pagination.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Pagination.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { computed } from 'vue';\r\n\r\n/**\r\n * store에서 특정 categoryCode에 해당하는 subCodeGroup을 찾아주는 컴포저블\r\n *\r\n * @param {Array} categories - 카테고리들이 담긴 배열\r\n * @param {string} categoryCode - 찾고자 하는 카테고리의 코드\r\n * @returns {import(\"vue\").ComputedRef} - 특정 카테고리의 subCodeGroup을 담는 computed 속성\r\n */\r\nexport function useFindSubCodeGroup(categories, categoryCode) {\r\n    const subCodeGroup = computed(() => {\r\n        const category = categories.find(item => item.code === categoryCode);\r\n        return category ? category.subCodeGroup : [];\r\n    });\r\n\r\n    return subCodeGroup;\r\n}\r\n\r\n","export const PostGroup = {\r\n    NOTICE : \"NOTICE\",\r\n    COMMUNITY : \"COMMUNITY\",\r\n    PHOTO : \"PHOTO\",\r\n    INQUIRY: \"INQUIRY\"\r\n};\r\n","<template>\r\n  <nav class=\"navbar mb-2 navbar-expand navbar-light bg-light rounded-2\">\r\n    <!-- Left Element -->\r\n    <b-navbar-nav class=\"me-auto\">\r\n      <b-nav-item>\r\n        <b-skeleton variant=\"primary\" width=\"2rem\" height=\"2rem\" class=\"mr-3\"></b-skeleton>\r\n      </b-nav-item>\r\n    </b-navbar-nav>\r\n    <!-- End Left Element -->\r\n\r\n    <!-- Center Element -->\r\n    <b-navbar-nav class=\"mx-auto\">\r\n        <b-skeleton variant=\"link\" class=\"nav-link fs-6\" height=\"1.5rem\" width=\"8rem\"></b-skeleton>\r\n        <b-skeleton variant=\"link\" class=\"nav-link fs-6\" height=\"1.5rem\" width=\"8rem\"></b-skeleton>\r\n        <b-skeleton variant=\"link\" class=\"nav-link fs-6\" height=\"1.5rem\" width=\"8rem\"></b-skeleton>\r\n    </b-navbar-nav>\r\n    <!-- End Center Element -->\r\n\r\n    <!-- Right Element -->\r\n    <b-navbar-nav class=\"ms-auto\">\r\n      <b-nav-item>\r\n        <b-skeleton variant=\"primary\" width=\"2rem\" height=\"2rem\"></b-skeleton>\r\n      </b-nav-item>\r\n      <b-nav-item>\r\n        <b-skeleton variant=\"primary\" width=\"2rem\" height=\"2rem\"></b-skeleton>\r\n      </b-nav-item>\r\n    </b-navbar-nav>\r\n    <!-- End Right Element -->\r\n  </nav>\r\n</template>\r\n<script setup>\r\n</script>","import { render } from \"./PostNavbarSkeleton.vue?vue&type=template&id=0092316c\"\nconst script = {}\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n  <b-row class=\"mb-2\">\r\n    <b-col cols=\"3\" class=\"d-flex justify-content-start\">\r\n      <b-skeleton class=\"currentDate text-center me-3\" variant=\"border\" width=\"8rem\" height=\"2rem\"></b-skeleton>\r\n      <b-skeleton class=\"endDate text-center\" variant=\"border\" width=\"8rem\" height=\"2rem\"></b-skeleton>\r\n    </b-col>\r\n    <b-col cols=\"9\" class=\"d-flex justify-content-end\">\r\n      <b-skeleton class=\"me-2\" variant=\"border\" width=\"300px\" height=\"2rem\"></b-skeleton>\r\n      <b-skeleton class=\"text-nowrap me-1\" variant=\"primary\" width=\"6rem\" height=\"2rem\"></b-skeleton>\r\n      <b-skeleton class=\"text-nowrap\" variant=\"danger\" width=\"8rem\" height=\"2rem\"></b-skeleton>\r\n    </b-col>\r\n  </b-row>\r\n</template>\r\n","import { render } from \"./SearchFormSkeleton.vue?vue&type=template&id=5702a681\"\nconst script = {}\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n  <b-container class=\"mt-3\">\r\n    <b-skeleton height=\"3rem\" width=\"100%\"></b-skeleton>\r\n  </b-container>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from 'vue';\r\n\r\nconst boxWidth = ref('2rem');\r\nconst boxHeight = ref('2.5rem');\r\n</script>\r\n","import script from \"./PaginationSkeleton.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./PaginationSkeleton.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\r\n    <b-container class=\"mt-3\">\r\n      <b-skeleton height=\"13rem\" width=\"100%\"></b-skeleton>\r\n    </b-container>\r\n</template>\r\n","import { render } from \"./BackgroundBannerSkeleton.vue?vue&type=template&id=58e1b56b\"\nconst script = {}\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import script from \"./BannerSub.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./BannerSub.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","/**\r\n * 라우트 이름 그룹을 정의\r\n *\r\n * @typedef {Object} RouteNameGroup\r\n * @property {string} label - 라우트 그룹의 라벨(표시할 이름).\r\n * @property {Array<string>} routes - 라우트 이름들의 배열.\r\n */\r\nexport const ROUTE_NAME_GROUP = {\r\n    NOTICE: {\r\n        code: \"NOTICE\",\r\n        label: \"공지사항\",\r\n        routes: ['Notices', 'NoticePost', 'NoticeForm', 'NoticeEdit']\r\n    },\r\n    COMMUNITY: {\r\n        code: \"COMMUNITY\",\r\n        label: \"커뮤니티\",\r\n        routes: ['Communities', 'CommunityPost', 'CommunityForm', 'CommunityEdit']\r\n    },\r\n    PHOTO: {\r\n        code: \"PHOTO\",\r\n        label: \"사진\",\r\n        routes: ['Photos', 'PhotoPost', 'PhotoForm', 'PhotoEdit']\r\n    },\r\n    INQUIRY: {\r\n        code: \"INQUIRY\",\r\n        label: \"문의\",\r\n        routes: ['Inquiries', 'InquiryPost', 'InquiryForm']\r\n    },\r\n};\r\n","import { ref } from \"vue\";\r\nimport {useGetPastDate} from \"@/composable/date/getPastDate\";\r\nimport {useGetCurrentDate} from \"@/composable/date/getCurrentDate\";\r\nimport {SORT} from \"@/composable/param/constants/condition\";\r\n\r\n/**\r\n * 초기 검색 조건을 담는 반응성 객체를 생성하는 함수\r\n *\r\n * @returns {Ref} 초기 검색 조건을 담는 반응성 객체\r\n */\r\n\r\nexport function useInitialCondition(postGroup) {\r\n    return ref({\r\n        startDate: useGetPastDate(365),\r\n        endDate: useGetCurrentDate(),\r\n        postGroup: postGroup,\r\n        category: null,\r\n        keyword: null,\r\n        pageNo: 1,\r\n        maxNumberOfPosts: 10,\r\n        sort: SORT.LATEST,\r\n    });\r\n}\r\n","/**\r\n * 객체를 쿼리스트링으로 변환하는 함수\r\n *\r\n * @param {Record<string, any>} obj - 변환할 객체\r\n * @returns {string} - 변환된 쿼리스트링\r\n */\r\nexport function useObjectToQueryString(obj) {\r\n    const queryParams = new URLSearchParams();\r\n    for (const key in obj) {\r\n        if (obj.hasOwnProperty(key) && obj[key] !== null && obj[key] !== undefined) {\r\n            queryParams.append(key, obj[key]);\r\n        }\r\n    }\r\n    return queryParams.toString();\r\n}","import {useObjectToQueryString} from \"@/composable/param/objectToQueryString\";\r\nimport {useFilterParams} from \"@/composable/param/filterParams\";\r\n\r\n/**\r\n * URL을 업데이트하는 함수\r\n *\r\n * @param url 업데이트할 URL\r\n * @param object 쿼리스트링 생성에 사용할 객체\r\n */\r\nexport function useUpdateUrl(url, object = null) {\r\n    window.history.replaceState(history.state, \"\", `${url}?${useObjectToQueryString(useFilterParams(object))}`)\r\n}","/**\r\n * 게시글 검색 조건에 사용되는 파라미터들의 매핑 객체\r\n *\r\n * @type {Object}\r\n * @property {string} startDate - 시작 날짜를 나타내는 파라미터 이름\r\n * @property {string} endDate - 끝 날짜를 나타내는 파라미터 이름\r\n * @property {string} postGroup - 게시글 그룹을 나타내는 파라미터 이름\r\n * @property {string} category - 카테고리를 나타내는 파라미터 이름\r\n * @property {string} keyword - 검색 키워드를 나타내는 파라미터 이름\r\n * @property {string} pageNo - 페이지 번호를 나타내는 파라미터 이름\r\n * @property {string} maxNumberOfPosts - 한 페이지에 표시할 게시글 최대 개수를 나타내는 파라미터 이름\r\n * @property {string} sort - 페이지 정렬 조건을 나타내는 파라미터 이름\r\n */\r\nexport const CONDITION_PARAMS = {\r\n    startDate: 'sd',\r\n    endDate: 'ed',\r\n    postGroup: 'pos',\r\n    category: 'cat',\r\n    keyword: 'q',\r\n    pageNo: 'p',\r\n    maxNumberOfPosts: 'max',\r\n    sort: 'srt'\r\n};\r\n\r\n/**\r\n * 주어진 객체의 키를 게시글 검색 조건에 사용되는 파라미터의 이름으로 변환하여 반환\r\n *\r\n * @param {Object} obj - 변환하고자 하는 객체\r\n * @returns {Object} 변환된 파라미터를 가진 객체\r\n */\r\nexport function useConvertKeysToConditionParams(obj) {\r\n    const convertedObj = {};\r\n    for (const key in obj) {\r\n        if (CONDITION_PARAMS[key]) {\r\n            convertedObj[CONDITION_PARAMS[key]] = obj[key];\r\n        }\r\n    }\r\n    return convertedObj;\r\n}\r\n\r\n/**\r\n * 주어진 객체의 키를 CONDITION_PARAMS 객체의 값들의 반대로 변환하여 반환\r\n *\r\n * @param {Object} obj - 변환하고자 하는 객체\r\n * @returns {Object} 변환된 객체\r\n */\r\nexport function useConvertParamsToKeys(obj) {\r\n    const convertedObj = {};\r\n    for (const key in obj) {\r\n        const conditionKey = Object.keys(CONDITION_PARAMS).find((paramKey) => CONDITION_PARAMS[paramKey] === key);\r\n        if (conditionKey) {\r\n            convertedObj[conditionKey] = obj[key];\r\n        }\r\n    }\r\n    return convertedObj;\r\n}","import {useFilterParams} from \"@/composable/param/filterParams\";\r\n\r\n/**\r\n * 초기 검색 조건을 가져오는 컴포저블\r\n *\r\n *  1. 현재 라우터의 파라미터\r\n *          /boards?keyword=title&pageNo=1\r\n *\r\n * @param {Object} router - Vue Router 객체\r\n * @returns {Object|null} - 초기 검색 조건 객체 또는 null\r\n */\r\nexport function useInitialParams(params) {\r\n    const currentRouteParams = useFilterParams(params); // 현재 라우터에서 파라미터 추출\r\n    if (currentRouteParams && Object.keys(currentRouteParams).length !== 0) {\r\n        return currentRouteParams;\r\n    }\r\n    return null; // 초기 검색 조건이 없을 경우 null 반환\r\n}","import {ref} from 'vue';\r\nimport {useInitialCondition} from \"@/composable/param/initialCondition\";\r\nimport {useUpdateUrl} from \"@/composable/param/updateUrl\";\r\nimport {useConvertKeysToConditionParams, useConvertParamsToKeys} from \"@/composable/param/constants/conditionParams\";\r\nimport {useInitialParams} from \"@/composable/param/InitialParams\";\r\n\r\n/**\r\n * 게시글 목록을 조회하고 페이지 정보를 관리하는 컴포지션 함수\r\n *\r\n * @param {object} query - 라우터 쿼리 파라미터\r\n * @param {string} code - 초기 검색 조건 코드\r\n * @param {function} getPostsFunction - 게시글 목록 조회 함수\r\n * @param {function} updateUrl - URL 업데이트 함수\r\n * }}\r\n */\r\nexport function useGetPostsSubmit(query, code, getPostsFunction, updateUrl) {\r\n    const fetchPostsData = ref(null);\r\n\r\n    const initialCondition = useInitialCondition(code);\r\n\r\n    /** 현재 라우터의 파라미터와 확인 후 initialCondition 속성 덮어쓰기 */\r\n    Object.assign(initialCondition.value, useInitialParams(useConvertParamsToKeys(query)));\r\n\r\n    /**\r\n     * 조건 변경 함수\r\n     *\r\n     * @param {number} updateCondition - 변경된 조건 객체\r\n     */\r\n    function updateCondition(updateCondition) {\r\n        initialCondition.value = updateCondition\r\n        return useSubmit()\r\n    }\r\n\r\n    /**\r\n     * 페이지 변경 함수\r\n     *\r\n     * @param {number} pageNo - 변경된 페이지 번호\r\n     */\r\n    function changePage(pageNo) {\r\n        initialCondition.value.pageNo = pageNo\r\n        return useSubmit()\r\n    }\r\n\r\n    /**\r\n     * 게시글 목록을 가져오기 위한 서버에 요청하는 함수\r\n     */\r\n    async function useSubmit() {\r\n        return getPostsFunction(initialCondition.value).then(response => {\r\n            fetchPostsData.value = response.data\r\n            useUpdateUrl(updateUrl, useConvertKeysToConditionParams(initialCondition.value));\r\n        }).catch(error => {\r\n            initialCondition.value = useInitialCondition(code);\r\n        })\r\n    }\r\n\r\n    return {\r\n        fetchPostsData,\r\n        initialCondition,\r\n        updateCondition,\r\n        changePage,\r\n        useSubmit\r\n    };\r\n}\r\n","<script setup>\r\nimport PhotoCard from \"@/components/card/PhotoCard.vue\";\r\nimport SearchForm from \"@/components/common/SearchForm.vue\";\r\nimport Pagination from \"@/components/common/Pagination.vue\";\r\nimport PostService from \"@/service/PostService\";\r\nimport {useFindSubCodeGroup} from \"@/composable/postGroup/findSubCodeGroup\";\r\nimport {store} from \"@/store\";\r\nimport {PostGroup} from \"@/composable/postGroup/PostGroup\";\r\nimport PostNavbarSkeleton from \"@/components/skeleton/PostNavbarSkeleton.vue\";\r\nimport SearchFormSkeleton from \"@/components/skeleton/SearchFormSkeleton.vue\";\r\nimport PostListSkeleton from \"@/components/skeleton/PostListSkeleton.vue\";\r\nimport PaginationSkeleton from \"@/components/skeleton/PaginationSkeleton.vue\";\r\nimport BackgroundBannerSkeleton from \"@/components/skeleton/BackgroundBannerSkeleton.vue\";\r\nimport BannerSub from \"@/components/common/BannerSub.vue\";\r\nimport {ROUTE_NAME_GROUP} from \"@/composable/router/routeNameGroup\";\r\nimport {useGetPostsSubmit} from \"@/composable/submitForm/getPostsSubmit\";\r\nimport router from \"@/router/router\";\r\nimport PageInfo from \"@/components/common/PageInfo.vue\";\r\n\r\n// useFindSubCodeGroup 커스텀 훅을 사용하여 포토 서브코드 그룹 가져오기\r\nconst photoSubCodeGroup = useFindSubCodeGroup(store.categories, PostGroup.PHOTO);\r\n\r\nconst {\r\n  fetchPostsData: fetchPhotosData,\r\n  initialCondition,\r\n  updateCondition,\r\n  changePage,\r\n  useSubmit\r\n} = useGetPostsSubmit(\r\n    router.currentRoute.value.query,\r\n    ROUTE_NAME_GROUP.PHOTO.code,\r\n    PostService.fetchPhotos,\r\n    \"/photos\",\r\n);\r\n\r\n// 초기 검색 조건을 사용하여 게시글 목록을 가져오기 위해 함수 호출\r\nuseSubmit(initialCondition.value)\r\n\r\n</script>\r\n\r\n<template>\r\n  <!-- 게시글 목록이 있을 경우 -->\r\n  <template v-if=\"fetchPhotosData !== null\">\r\n    <!-- 포토 배너와 검색 폼, 포스트 네비게이션 바 사용 -->\r\n    <BannerSub :banner-path=\"`home-photo.png`\"/>\r\n\r\n    <!-- 컨테이너 -->\r\n    <b-container class=\"mt-3\">\r\n      <b-row>\r\n        <!-- Main content -->\r\n        <b-col class=\"3\">\r\n          <!-- 검색 폼 컴포넌트 SearchForm 사용 -->\r\n          <searchForm :condition=\"initialCondition\"\r\n                      @search=\"(updateSearchCondition) => updateCondition(updateSearchCondition)\"\r\n                      :categories=\"photoSubCodeGroup\" :postFormRouteName=\"'PhotoForm'\" >\r\n            <PageInfo :page=\"fetchPhotosData.page\" />\r\n          </searchForm>\r\n\r\n          <b-row>\r\n            <!-- PhotoCard 컴포넌트 사용하여 포토 게시글 카드 표시 -->\r\n            <PhotoCard :posts=\"fetchPhotosData.photos\"\r\n                       :PostRouteName=\"`PhotoPost`\"/>\r\n\r\n            <!-- Pagination 컴포넌트 사용 -->\r\n            <Pagination :page=\"fetchPhotosData.page\"\r\n                        @changePageNo=\"(changePageNo) => changePage(changePageNo)\"/>\r\n          </b-row>\r\n        </b-col>\r\n      </b-row>\r\n    </b-container>\r\n\r\n  </template>\r\n\r\n  <!-- 게시글 목록이 없을 경우 -->\r\n  <template v-else>\r\n    <!-- 로딩 중을 나타내는 배너와 스켈레톤 컴포넌트 사용 -->\r\n    <BackgroundBannerSkeleton/>\r\n    <b-container class=\"mt-3\">\r\n      <b-row>\r\n        <b-col class=\"3\">\r\n          <!-- 검색 폼 스켈레톤 컴포넌트 SearchFormSkeleton 사용 -->\r\n          <SearchFormSkeleton/>\r\n          <!-- 게시글 네비게이션 바 스켈레톤 컴포넌트 PostNavbarSkeleton 사용 -->\r\n          <PostNavbarSkeleton/>\r\n          <!-- 게시글 목록 스켈레톤 컴포넌트 PostListSkeleton 사용 -->\r\n          <PostListSkeleton :posts-count=\"10\"/>\r\n          <!-- 페이지네이션 스켈레톤 컴포넌트 PaginationSkeleton 사용 -->\r\n          <PaginationSkeleton/>\r\n        </b-col>\r\n      </b-row>\r\n    </b-container>\r\n  </template>\r\n</template>","import script from \"./Photos.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Photos.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import {useHttpRequest} from \"@/composable/request/httpRequest\";\r\nimport {HttpMethod} from \"@/composable/request/constants/HttpMethod\";\r\nimport {json} from \"@/composable/request/constants/Headers\";\r\nimport {store} from \"@/store\";\r\nimport {useGetRequest} from \"@/composable/request/getRequest\";\r\n\r\n/**\r\n * 인증 서비스 객체\r\n */\r\nconst AuthenticationService = {\r\n    /**\r\n     * 로그인 요청을 서버에 전송하는 함수\r\n     *\r\n     * @param {FormData} formData - 사용자 아이디와 비밀번호 등의 로그인 정보가 담긴 FormData 객체\r\n     * @returns {Promise} 서버 응답에 대한 Promise 객체\r\n     */\r\n    async signIn(formData) {\r\n        const response = await useHttpRequest(HttpMethod.POST, '/api/sign-in', formData, json);\r\n        if (response.status === 200) {\r\n            store.saveMember(response.data.id, response.data.nickname);\r\n        }\r\n        return response;\r\n    },\r\n    /**\r\n     * 로그아웃 요청을 서버에 전송하는 함수\r\n     *\r\n     * @returns {Promise} 서버 응답에 대한 Promise 객체\r\n     */\r\n    async logout() {\r\n        const response = await useHttpRequest(HttpMethod.POST, '/api/log-out');\r\n        if (response.status === 200) {\r\n            store.resetMember();\r\n        }\r\n        return response;\r\n    },\r\n\r\n    /**\r\n     * 토큰 재발급을 서버에 요청을 전송하는 함수\r\n     * \r\n     * @returns {Promise<AxiosResponse<any>>} 서버 응답에 대한 Promise 객체\r\n     */\r\n    refresh() {\r\n        return useHttpRequest(HttpMethod.POST, '/api/refresh');\r\n    },\r\n\r\n    /**\r\n     * 회원 정보를 서버에 요청하는 함수\r\n     * \r\n     * @returns {Promise<AxiosResponse<any>>} 서버 응답에 대한 Promise 객체\r\n     */\r\n    getMember() {\r\n        return useHttpRequest(HttpMethod.POST, '/api/member/me');\r\n    },\r\n\r\n    /**\r\n     * 현재 사용자가 매니저인지 확인을 요청하는 함수\r\n     *\r\n     * @returns {Promise<axios.AxiosResponse<*>>} 서버 응답에 대한 Promise 객체\r\n     */\r\n    isManager() {\r\n        return useGetRequest(\"/api/manager/isManager\")\r\n    }\r\n};\r\nexport default AuthenticationService;\r\n","<script setup>\r\nimport {computed, ref} from \"vue\";\r\nimport Error from \"@/components/common/Error.vue\";\r\nimport AuthenticationService from \"@/service/AuthenticationService\";\r\nimport router from \"@/router/router\";\r\n\r\nconst id = ref(''); // ID 입력을 담는 반응성 객체\r\nconst password = ref(''); // 비밀번호 입력을 담는 반응성 객체\r\nconst idState = ref(null); // ID 유효성 상태를 담는 반응성 객체\r\nconst passwordState = ref(null); // 비밀번호 유효성 상태를 담는 반응성 객체\r\n\r\n// computed 속성을 이용하여 폼의 유효성을 계산하는 함수\r\nconst isFormValid = computed(() => {\r\n  return (\r\n      idState.value === true && passwordState.value === true\r\n  );\r\n});\r\n\r\n// 폼 유효성을 검증하고 로그인을 시도하는 함수\r\nconst validateAndSignIn = () => {\r\n  idState.value = id.value.length > 1;\r\n  passwordState.value = password.value.length > 1;\r\n\r\n  if (isFormValid.value) {\r\n    idState.value = null;\r\n    passwordState.value = null;\r\n    return submitForm();\r\n  }\r\n};\r\n\r\n// 서버 데이터 전송 및 로그인 처리하는 함수\r\nconst submitError = ref(null)\r\n\r\n/** 서버 데이터 전송 처리하는 함수 */\r\nasync function submitForm() {\r\n  const formData = new FormData();\r\n\r\n  formData.append(\"id\", id.value)\r\n  formData.append(\"password\", password.value)\r\n\r\n  // 로그인 요청 보내기\r\n  await AuthenticationService.signIn(formData).then(response => {\r\n    // 로그인 성공 시 홈 페이지로 이동\r\n    router.push({name: \"Home\"})\r\n  }).catch(error => {\r\n    // 로그인 실패 시 에러 메시지 처리\r\n    if(error.response.data.errorCode === 2001) {\r\n      submitError.value = error.response.data;\r\n    }\r\n  })\r\n}\r\n\r\n</script>\r\n\r\n<template>\r\n  <!-- 로그인 화면 템플릿 -->\r\n  <div class=\"bg-white py-1 mt-5\">\r\n    <b-img\r\n        center\r\n        style=\"height: 100px\"\r\n        class=\"img-fluid rounded d-block\"\r\n        :src=\"require(`@/resources/banner/now-icon-login-signup.png`)\"\r\n        alt=\"Main image\"\r\n    />\r\n  </div>\r\n\r\n  <div class=\"d-flex justify-content-center mt-2\">\r\n    <div class=\"w-25\" role=\"group\">\r\n      <div class=\"text-center mb-lg-4 text-nowrap text-truncate\">\r\n        <h3 class=\"emphasis\">NOW에 오신것을 환영합니다.</h3>\r\n        <div>NOW는 지식공유 플랫폼입니다.</div>\r\n      </div>\r\n\r\n      <hr class=\"mb-3\">\r\n\r\n      <!-- 조건부 렌더링: 로그인 실패로 인한 Error Message -->\r\n      <template v-if=\"submitError !== null && submitError.error !== null\">\r\n        <Error :error=\"submitError\" />\r\n      </template>\r\n\r\n      <!-- ID 입력란 -->\r\n      <b-row class=\"mb-3\">\r\n        <label class=\"p-0\" for=\"input-id\"><b>ID</b></label>\r\n        <b-form-input\r\n            id=\"input-id\"\r\n            v-model=\"id\"\r\n            :state=\"idState\"\r\n            aria-describedby=\"input-id-help input-id-feedback\"\r\n            trim\r\n        ></b-form-input>\r\n\r\n        <!-- ID 입력 유효성 메시지 -->\r\n        <b-form-invalid-feedback id=\"input-id-feedback\">\r\n          ID를 입력하세요.\r\n        </b-form-invalid-feedback>\r\n      </b-row>\r\n\r\n      <!-- 비밀번호 입력란 -->\r\n      <b-row class=\"mb-3\">\r\n        <label class=\"p-0\" for=\"input-password\"><b>비밀번호</b></label>\r\n        <b-form-input\r\n            id=\"input-password\"\r\n            type=\"password\"\r\n            v-model=\"password\"\r\n            :state=\"passwordState\"\r\n            aria-describedby=\"input-password-help input-password-feedback\"\r\n            trim\r\n        ></b-form-input>\r\n\r\n        <!-- 비밀번호 입력 유효성 메시지 -->\r\n        <b-form-invalid-feedback id=\"input-password-feedback\">\r\n          비밀번호를 입력하세요.\r\n        </b-form-invalid-feedback>\r\n      </b-row>\r\n\r\n      <!-- 로그인 버튼 -->\r\n      <b-row class=\"mb-1 mt-1\">\r\n        <b-button block @click=\"validateAndSignIn\" variant=\"primary\"\r\n        ><b>로그인</b></b-button\r\n        >\r\n      </b-row>\r\n\r\n      <hr class=\"mt-5\">\r\n\r\n      <!-- 회원가입과 계정 찾기 링크 -->\r\n      <b-row class=\"mb-2\">\r\n        <span class=\"text-center\"\r\n        >아직 회원이 아니신가요?\r\n          <router-link\r\n              class=\"router-link text-decoration-none text-primary\"\r\n              :to=\"{ name: `SignUp` }\"\r\n          >회원가입</router-link\r\n          ></span\r\n        >\r\n      </b-row>\r\n\r\n      <b-row>\r\n        <span class=\"text-center\"\r\n        >계정을 잃어버리셨나요?\r\n          <router-link\r\n              class=\"router-link text-decoration-none text-primary\"\r\n              :to=\"{ name: `Forgot` }\"\r\n          >계정찾기</router-link\r\n          ></span\r\n        >\r\n      </b-row>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.emphasis {\r\n  font-weight: bold;\r\n  text-shadow: 10px 10px 10px rgba(0, 0, 0, 0.3);\r\n  padding: 10px;\r\n}\r\n</style>","import script from \"./SignIn.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./SignIn.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./SignIn.vue?vue&type=style&index=0&id=cd7f5abe&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-cd7f5abe\"]])\n\nexport default __exports__","<script setup>\r\nimport {computed, ref} from \"vue\";\r\n\r\n// 반응성 객체들\r\nconst id = ref(''); // ID 입력을 담는 반응성 객체\r\nconst password = ref(''); // 비밀번호 입력을 담는 반응성 객체\r\nconst passwordConfirm = ref(''); // 비밀번호 확인 입력을 담는 반응성 객체\r\nconst name = ref(''); // 성명 입력을 담는 반응성 객체\r\nconst nickname = ref(''); // 닉네임 입력을 담는 반응성 객체\r\n\r\n// 각 입력 필드의 유효성 상태를 담는 반응성 객체들\r\nconst idState = ref(null);\r\nconst passwordState = ref(null);\r\nconst passwordConfirmState = ref(null);\r\nconst nameState = ref(null);\r\nconst nicknameState = ref(null);\r\n\r\n// computed 속성을 이용하여 폼의 유효성을 계산하는 함수\r\nconst isFormValid = computed(() => {\r\n  return (\r\n      idState.value === true &&\r\n      passwordState.value === true &&\r\n      passwordConfirmState.value === true &&\r\n      nameState.value === true &&\r\n      nicknameState.value === true\r\n  );\r\n});\r\n\r\n// 폼 유효성을 검증하고 회원가입을 시도하는 함수\r\nconst validateAndSingUp = () => {\r\n  idState.value = id.value.length > 2;\r\n  passwordState.value = password.value.length > 2;\r\n  passwordConfirmState.value = passwordState.value !== false && passwordConfirm.value === password.value;\r\n  nameState.value = name.value.length > 2;\r\n  nicknameState.value = nickname.value.length > 2;\r\n\r\n  if (isFormValid.value) {\r\n    console.log(\"전송 성공\")\r\n    return;\r\n  }\r\n};\r\n\r\n</script>\r\n\r\n<template>\r\n  <div class=\"bg-white py-1 mt-5\">\r\n    <b-img center style=\"height: 100px\" class=\"img-fluid rounded d-block\"\r\n           :src=\"require(`@/resources/banner/now-icon-login-signup.png`)\"\r\n           alt=\"Main image\"/>\r\n  </div>\r\n\r\n  <div class=\"d-flex justify-content-center mt-2\">\r\n    <div class=\"w-25\" role=\"group\">\r\n      <div class=\"text-center mb-lg-4 text-nowrap text-truncate\">\r\n        <h3 class=\"emphasis\">NOW에 오신것을 환영합니다.</h3>\r\n        <div>NOW는 지식공유 플랫폼입니다.</div>\r\n      </div>\r\n\r\n      <hr class=\"mb-3\">\r\n\r\n      <!-- ID 입력란 -->\r\n      <b-row class=\"mb-3\">\r\n        <label class=\"p-0\" for=\"input-id\"><b>ID</b></label>\r\n        <b-form-input\r\n            id=\"input-id\"\r\n            v-model=\"id\"\r\n            :state=\"idState\"\r\n            aria-describedby=\"input-id-help input-id-feedback\"\r\n            trim\r\n        ></b-form-input>\r\n\r\n        <!-- ID 입력 유효성 메시지 -->\r\n        <b-form-invalid-feedback id=\"input-id-feedback\">\r\n          아이디를 입력하세요.\r\n        </b-form-invalid-feedback>\r\n      </b-row>\r\n\r\n      <!-- 비밀번호 입력란 -->\r\n      <b-row class=\"mb-3\">\r\n        <label class=\"p-0\" for=\"input-password\"><b>비밀번호</b></label>\r\n        <b-form-input\r\n            id=\"input-password\"\r\n            type=\"password\"\r\n            v-model=\"password\"\r\n            :state=\"passwordState\"\r\n            aria-describedby=\"input-password-help input-password-feedback\"\r\n            trim\r\n        ></b-form-input>\r\n\r\n        <!-- 비밀번호 입력란과 유효성 메시지 템플릿 -->\r\n        <b-form-invalid-feedback id=\"input-password-feedback\">\r\n          비밀번호를 입력하세요.\r\n        </b-form-invalid-feedback>\r\n      </b-row>\r\n\r\n      <!-- 비밀번호 확인 입력란 -->\r\n      <b-row class=\"mb-3\">\r\n        <label class=\"p-0\" for=\"input-passwordConfirm\"><b>비밀번호 확인</b></label>\r\n        <b-form-input\r\n            id=\"input-passwordConfirm\"\r\n            type=\"password\"\r\n            v-model=\"passwordConfirm\"\r\n            :state=\"passwordConfirmState\"\r\n            aria-describedby=\"input-passwordConfirm-help input-passwordConfirm-feedback\"\r\n            trim\r\n        ></b-form-input>\r\n\r\n        <!-- 비밀번호 확인 입력란과 유효성 메시지 템플릿 -->\r\n        <b-form-invalid-feedback id=\"input-passwordConfirm-feedback\">\r\n          비밀번호가 다릅니다.\r\n        </b-form-invalid-feedback>\r\n      </b-row>\r\n\r\n      <!-- 성명 입력란 -->\r\n      <b-row class=\"mb-3\">\r\n        <label class=\"p-0\" for=\"input-name\"><b>성명</b></label>\r\n        <b-form-input\r\n            id=\"input-name\"\r\n            v-model=\"name\"\r\n            :state=\"nameState\"\r\n            aria-describedby=\"input-name-help input-name-feedback\"\r\n            trim\r\n        ></b-form-input>\r\n\r\n        <!-- 성명 입력란과 유효성 메시지 템플릿 -->\r\n        <b-form-invalid-feedback id=\"input-name-feedback\">\r\n          이름을 입력하세요.\r\n        </b-form-invalid-feedback>\r\n      </b-row>\r\n\r\n      <!-- 닉네임 입력란 -->\r\n      <b-row class=\"mb-3\">\r\n        <label class=\"p-0\" for=\"input-nickname\"><b>닉네임</b></label>\r\n        <b-form-input\r\n            id=\"input-nickname\"\r\n            v-model=\"nickname\"\r\n            :state=\"nicknameState\"\r\n            aria-describedby=\"input-nickname-help input-nickname-feedback\"\r\n            trim\r\n        ></b-form-input>\r\n\r\n        <!-- 닉네임 입력란과 유효성 메시지 템플릿 -->\r\n        <b-form-invalid-feedback id=\"input-nickname-feedback\">\r\n          닉네임을 입력하세요.\r\n        </b-form-invalid-feedback>\r\n      </b-row>\r\n\r\n      <!-- 회원가입 버튼 -->\r\n      <b-row class=\"mb-1 mt-5\">\r\n        <b-button block @click=\"validateAndSingUp\" variant=\"primary\"><b>회원가입</b></b-button>\r\n      </b-row>\r\n\r\n      <hr class=\"mt-5\">\r\n\r\n      <!-- 로그인 링크 -->\r\n      <b-row class=\"mb-2\">\r\n        <span class=\"text-end\"> 이미 회원이신가요?\r\n          <router-link class=\"router-link text-decoration-none text-primary\"\r\n                       :to=\"{ name: `SignIn` }\">로그인</router-link>\r\n        </span>\r\n      </b-row>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.emphasis {\r\n  font-weight: bold;\r\n  text-shadow: 10px 10px 10px rgba(0, 0, 0, 0.3);\r\n  padding: 10px;\r\n}\r\n</style>","import script from \"./SignUp.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./SignUp.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./SignUp.vue?vue&type=style&index=0&id=28c8b130&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-28c8b130\"]])\n\nexport default __exports__","<script setup>\r\nimport PostList from \"@/components/table/PostList.vue\";\r\nimport Pagination from \"@/components/common/Pagination.vue\";\r\nimport SearchForm from \"@/components/common/SearchForm.vue\";\r\nimport PostService from \"@/service/PostService\";\r\nimport {useFindSubCodeGroup} from \"@/composable/postGroup/findSubCodeGroup\";\r\nimport {store} from \"@/store\";\r\nimport {PostGroup} from \"@/composable/postGroup/PostGroup\";\r\nimport PostNavbarSkeleton from \"@/components/skeleton/PostNavbarSkeleton.vue\";\r\nimport SearchFormSkeleton from \"@/components/skeleton/SearchFormSkeleton.vue\";\r\nimport PostListSkeleton from \"@/components/skeleton/PostListSkeleton.vue\";\r\nimport PaginationSkeleton from \"@/components/skeleton/PaginationSkeleton.vue\";\r\nimport BackgroundBannerSkeleton from \"@/components/skeleton/BackgroundBannerSkeleton.vue\";\r\nimport BannerSub from \"@/components/common/BannerSub.vue\";\r\nimport {ROUTE_NAME_GROUP} from \"@/composable/router/routeNameGroup\";\r\nimport {useGetPostsSubmit} from \"@/composable/submitForm/getPostsSubmit\";\r\nimport router from \"@/router/router\";\r\nimport PageInfo from \"@/components/common/PageInfo.vue\";\r\n\r\n// 공지 게시글의 하위 코드 그룹 가져오기\r\nconst noticeSubCodeGroup = useFindSubCodeGroup(store.categories, PostGroup.NOTICE);\r\n\r\nconst {\r\n  fetchPostsData: fetchNoticesData,\r\n  initialCondition,\r\n  updateCondition,\r\n  changePage,\r\n  useSubmit\r\n} = useGetPostsSubmit(\r\n    router.currentRoute.value.query,\r\n    ROUTE_NAME_GROUP.NOTICE.code,\r\n    PostService.fetchNotices,\r\n    \"/notices\",\r\n);\r\n\r\n// 초기 검색 조건을 사용하여 게시글 목록을 가져오기 위해 함수 호출\r\nuseSubmit(initialCondition.value)\r\n\r\n</script>\r\n\r\n<template>\r\n  <!-- 게시글 목록 정보가 있을 경우 -->\r\n  <template v-if=\"fetchNoticesData !== null\">\r\n    <!-- 배경 배너 컴포넌트 BackgroundBanner 사용 -->\r\n    <BannerSub :banner-path=\"`home-notice.png`\"/>\r\n\r\n    <!-- 컨테이너 -->\r\n    <b-container class=\"mt-3\">\r\n      <b-row>\r\n        <!-- Main content -->\r\n        <b-col class=\"3\">\r\n          <!-- 검색 폼 컴포넌트 SearchForm 사용 -->\r\n          <searchForm :condition=\"initialCondition\"\r\n                      @search=\"(updateSearchCondition) => updateCondition(updateSearchCondition)\"\r\n                      :categories=\"noticeSubCodeGroup\" :postFormRouteName=\"'NoticeForm'\" >\r\n            <PageInfo :page=\"fetchNoticesData.page\" />\r\n          </searchForm>\r\n\r\n          <!-- 게시글 목록 컴포넌트 PostList 사용 -->\r\n          <PostList :posts=\"fetchNoticesData.notices\"\r\n                    :postRouteName=\"`NoticePost`\"/>\r\n\r\n          <!-- Pagination 컴포넌트 사용 -->\r\n          <Pagination :page=\"fetchNoticesData.page\"\r\n                      @changePageNo=\"(changePageNo) => changePage(changePageNo)\"/>\r\n        </b-col>\r\n      </b-row>\r\n    </b-container>\r\n  </template>\r\n\r\n  <!-- 게시글 목록이 없을 경우 -->\r\n  <template v-else>\r\n    <!-- 로딩 중을 나타내는 배너와 스켈레톤 컴포넌트 사용 -->\r\n    <BackgroundBannerSkeleton/>\r\n    <b-container class=\"mt-3\">\r\n      <b-row>\r\n        <b-col class=\"3\">\r\n          <!-- 검색 폼 스켈레톤 컴포넌트 SearchFormSkeleton 사용 -->\r\n          <SearchFormSkeleton/>\r\n          <!-- 게시글 네비게이션 바 스켈레톤 컴포넌트 PostNavbarSkeleton 사용 -->\r\n          <PostNavbarSkeleton/>\r\n          <!-- 게시글 목록 스켈레톤 컴포넌트 PostListSkeleton 사용 -->\r\n          <PostListSkeleton :posts-count=\"10\"/>\r\n          <!-- 페이지네이션 스켈레톤 컴포넌트 PaginationSkeleton 사용 -->\r\n          <PaginationSkeleton/>\r\n        </b-col>\r\n      </b-row>\r\n    </b-container>\r\n  </template>\r\n</template>","import script from \"./Notices.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Notices.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\r\nimport PostList from \"@/components/table/PostList.vue\";\r\nimport Pagination from \"@/components/common/Pagination.vue\";\r\nimport SearchForm from \"@/components/common/SearchForm.vue\";\r\nimport PostService from \"@/service/PostService\";\r\nimport {useFindSubCodeGroup} from \"@/composable/postGroup/findSubCodeGroup\";\r\nimport {store} from \"@/store\";\r\nimport {PostGroup} from \"@/composable/postGroup/PostGroup\";\r\nimport PostNavbarSkeleton from \"@/components/skeleton/PostNavbarSkeleton.vue\";\r\nimport SearchFormSkeleton from \"@/components/skeleton/SearchFormSkeleton.vue\";\r\nimport PostListSkeleton from \"@/components/skeleton/PostListSkeleton.vue\";\r\nimport PaginationSkeleton from \"@/components/skeleton/PaginationSkeleton.vue\";\r\nimport BackgroundBannerSkeleton from \"@/components/skeleton/BackgroundBannerSkeleton.vue\";\r\nimport BannerSub from \"@/components/common/BannerSub.vue\";\r\nimport {ROUTE_NAME_GROUP} from \"@/composable/router/routeNameGroup\";\r\nimport {useGetPostsSubmit} from \"@/composable/submitForm/getPostsSubmit\";\r\nimport router from \"@/router/router\";\r\nimport PageInfo from \"@/components/common/PageInfo.vue\";\r\n\r\n// 문의 게시글의 토픽 하위 코드 그룹 가져오기\r\nconst inquirySubCodeGroup = useFindSubCodeGroup(store.categories, PostGroup.INQUIRY);\r\n\r\nconst {\r\n  fetchPostsData: fetchInquiriesData,\r\n  initialCondition,\r\n  updateCondition,\r\n  changePage,\r\n  useSubmit\r\n} = useGetPostsSubmit(\r\n    router.currentRoute.value.query,\r\n    ROUTE_NAME_GROUP.INQUIRY.code,\r\n    PostService.fetchInquiries,\r\n    \"/inquiries\",\r\n);\r\n\r\n// 초기 검색 조건을 사용하여 게시글 목록을 가져오기 위해 함수 호출\r\nuseSubmit(initialCondition.value)\r\n\r\n</script>\r\n<template>\r\n  <!-- 문의 게시글이 로딩되었을 때 -->\r\n  <template v-if=\"fetchInquiriesData !== null\">\r\n    <!-- BannerSub 컴포넌트 사용 -->\r\n    <BannerSub :banner-path=\"`home-inquiry.png`\"/>\r\n\r\n    <b-container class=\"mt-3\">\r\n      <b-row>\r\n        <!-- Main content -->\r\n        <b-col class=\"3\">\r\n          <!-- 검색 폼을 위한 searchForm 컴포넌트 사용 -->\r\n          <searchForm :condition=\"initialCondition\"\r\n                      @search=\"(updateSearchCondition) => updateCondition(updateSearchCondition)\"\r\n                      :categories=\"inquirySubCodeGroup\" :postFormRouteName=\"'InquiryForm'\">\r\n            <PageInfo :page=\"fetchInquiriesData.page\" />\r\n          </searchForm>\r\n\r\n          <!-- 문의 게시글 목록을 표시하기 위한 PostList 컴포넌트 사용 -->\r\n          <PostList :posts=\"fetchInquiriesData.inquiries\"\r\n                    :postRouteName=\"`InquiryPost`\"/>\r\n\r\n          <!-- Pagination 컴포넌트 사용 -->\r\n          <Pagination :page=\"fetchInquiriesData.page\"\r\n                      @changePageNo=\"(changePageNo) => changePage(changePageNo)\"/>\r\n        </b-col>\r\n      </b-row>\r\n    </b-container>\r\n  </template>\r\n\r\n  <!-- 게시글 목록이 없을 경우 -->\r\n  <template v-else>\r\n    <!-- 로딩 중을 나타내는 배너와 스켈레톤 컴포넌트 사용 -->\r\n    <BackgroundBannerSkeleton/>\r\n    <b-container class=\"mt-3\">\r\n      <b-row>\r\n        <b-col class=\"3\">\r\n          <!-- 검색 폼 스켈레톤 컴포넌트 SearchFormSkeleton 사용 -->\r\n          <SearchFormSkeleton/>\r\n          <!-- 게시글 네비게이션 바 스켈레톤 컴포넌트 PostNavbarSkeleton 사용 -->\r\n          <PostNavbarSkeleton/>\r\n          <!-- 게시글 목록 스켈레톤 컴포넌트 PostListSkeleton 사용 -->\r\n          <PostListSkeleton :posts-count=\"10\"/>\r\n          <!-- 페이지네이션 스켈레톤 컴포넌트 PaginationSkeleton 사용 -->\r\n          <PaginationSkeleton/>\r\n        </b-col>\r\n      </b-row>\r\n    </b-container>\r\n  </template>\r\n</template>","import script from \"./Inquiries.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Inquiries.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\r\nimport PostList from \"@/components/table/PostList.vue\";\r\nimport Pagination from \"@/components/common/Pagination.vue\";\r\nimport SearchForm from \"@/components/common/SearchForm.vue\";\r\nimport PostService from \"@/service/PostService\";\r\nimport {useFindSubCodeGroup} from \"@/composable/postGroup/findSubCodeGroup\";\r\nimport {store} from \"@/store\";\r\nimport {PostGroup} from \"@/composable/postGroup/PostGroup\";\r\nimport BackgroundBannerSkeleton from \"@/components/skeleton/BackgroundBannerSkeleton.vue\";\r\nimport SearchFormSkeleton from \"@/components/skeleton/SearchFormSkeleton.vue\";\r\nimport PostNavbarSkeleton from \"@/components/skeleton/PostNavbarSkeleton.vue\";\r\nimport PostListSkeleton from \"@/components/skeleton/PostListSkeleton.vue\";\r\nimport PaginationSkeleton from \"@/components/skeleton/PaginationSkeleton.vue\";\r\nimport BannerSub from \"@/components/common/BannerSub.vue\";\r\nimport {ROUTE_NAME_GROUP} from \"@/composable/router/routeNameGroup\";\r\nimport {useGetPostsSubmit} from \"@/composable/submitForm/getPostsSubmit\";\r\nimport router from \"@/router/router\";\r\nimport PageInfo from \"@/components/common/PageInfo.vue\";\r\n\r\n// 커뮤니티 게시글의 하위 코드 그룹을 가져오기 위해 커스텀 훅 사용\r\nconst communitySubCodeGroup = useFindSubCodeGroup(store.categories, PostGroup.COMMUNITY);\r\n\r\nconst {\r\n  fetchPostsData: fetchCommunitiesData,\r\n  initialCondition,\r\n  updateCondition,\r\n  changePage,\r\n  useSubmit\r\n} = useGetPostsSubmit(\r\n    router.currentRoute.value.query,\r\n    ROUTE_NAME_GROUP.COMMUNITY.code,\r\n    PostService.fetchCommunities,\r\n    \"/communities\",\r\n);\r\n\r\n// 초기 검색 조건을 사용하여 게시글 목록을 가져오기 위해 함수 호출\r\nuseSubmit(initialCondition.value)\r\n\r\n</script>\r\n\r\n<template>\r\n  <template v-if=\"fetchCommunitiesData !== null\">\r\n    <!-- BannerSub 컴포넌트 사용 -->\r\n    <BannerSub :banner-path=\"`home-community.png`\"/>\r\n\r\n    <b-container class=\"mt-3\">\r\n      <b-row>\r\n        <b-col class=\"3\">\r\n          <!-- 검색 폼 -->\r\n          <searchForm :condition=\"initialCondition\"\r\n                      @search=\"(updateSearchCondition) => updateCondition(updateSearchCondition)\"\r\n                      :categories=\"communitySubCodeGroup\" :postFormRouteName=\"'CommunityForm'\">\r\n            <PageInfo :page=\"fetchCommunitiesData.page\" />\r\n          </searchForm>\r\n          <!-- PostList 컴포넌트 사용 -->\r\n          <PostList :posts=\"fetchCommunitiesData.communities\"\r\n                    :postRouteName=\"`CommunityPost`\"/>\r\n\r\n          <!-- Pagination 컴포넌트 사용 -->\r\n          <Pagination :page=\"fetchCommunitiesData.page\"\r\n                      @changePageNo=\"(changePageNo) => changePage(changePageNo)\"/>\r\n        </b-col>\r\n      </b-row>\r\n    </b-container>\r\n  </template>\r\n\r\n  <!-- 데이터 로딩 중이라면 스켈레톤 컴포넌트들을 출력 -->\r\n  <template v-else>\r\n    <BackgroundBannerSkeleton/>\r\n    <b-container class=\"mt-3\">\r\n      <b-row>\r\n        <b-col class=\"3\">\r\n          <search-form-skeleton/>\r\n          <PostNavbarSkeleton/>\r\n          <PostListSkeleton :posts-count=\"10\"/>\r\n          <PaginationSkeleton/>\r\n        </b-col>\r\n      </b-row>\r\n    </b-container>\r\n  </template>\r\n</template>\r\n","import script from \"./Communities.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Communities.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\r\nimport {defineProps, ref} from \"vue\";\r\nimport {useCapitalizeFirstLetter} from \"@/composable/uitls/capitalizeFirstLetter\";\r\nimport {useGetTimeDifference} from \"@/composable/date/getTimeDifference\";\r\nimport {useRoute} from \"vue-router\";\r\nimport {store} from \"@/store\";\r\nimport {useFormatNumber} from \"../composable/number/formatNumber\";\r\n\r\nconst emit = defineEmits(['delete'])\r\n\r\nconst props = defineProps({\r\n  post: Object,\r\n  postEditRouteName: String,\r\n});\r\n\r\nconst modalShow = ref(false);\r\n\r\nfunction handleOk(bvModalEvent) {\r\n  bvModalEvent.preventDefault();\r\n  emit('delete');\r\n  modalShow.value = false;\r\n  closeModal();\r\n}\r\n\r\nfunction closeModal() {\r\n  const modalElement = document.getElementById('deleteModal');\r\n  if (modalElement) {\r\n    modalElement.style.display = \"none\";\r\n  }\r\n}\r\n</script>\r\n<template>\r\n\r\n  <div class=\"board bg-white text-dark py-1 text-left\">\r\n    <b-container class=\"mt-3\">\r\n      <b-row align-h=\"between\" class=\"justify-content-start\">\r\n        <b-col cols=\"2\">\r\n          <div class=\"hstack gap-3 h-100\">\r\n            <div class=\"vr\"></div>\r\n            <b>{{ useCapitalizeFirstLetter(post.category) }}</b>\r\n          </div>\r\n        </b-col>\r\n\r\n        <b-col cols=\"2\" class=\"d-flex justify-content-end\">\r\n          <div>\r\n            <b-dropdown v-if=\"store.isSameMember(post.memberNickname)\" size=\"lg\" variant=\"link\" toggle-class=\"text-decoration-none\" no-caret>\r\n              <template #button-content>\r\n                <i class=\"bi bi-exclamation-circle\" style=\"font-size:20px;\"></i> &nbsp;\r\n              </template>\r\n              <b-dropdown-item>\r\n                <router-link class=\"text-decoration-none text-dark\"\r\n                             :to=\"{ name: `${postEditRouteName}`, params: { postIdx: useRoute().params.postIdx } }\">\r\n                  <i class=\"bi bi-eraser\"></i> 수정하기\r\n                </router-link>\r\n              </b-dropdown-item>\r\n              <b-dropdown-item @click=\"modalShow = true\"><i class=\"bi bi-trash\"></i> 삭제하기</b-dropdown-item>\r\n            </b-dropdown>\r\n          </div>\r\n        </b-col>\r\n      </b-row>\r\n\r\n    </b-container>\r\n  </div>\r\n\r\n  <b-container class=\"py-3\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-12 mb-4\">\r\n        <article>\r\n          <div class=\"post-content\">\r\n            <h2 class=\"title mb-4\">{{ post.title }}</h2>\r\n\r\n            <nav style=\"--bs-breadcrumb-divider: 'ㆍ';\" aria-label=\"breadcrumb\">\r\n              <ol class=\"breadcrumb\">\r\n                <li v-if=\"post.memberNickname\" class=\"breadcrumb-item text-secondary\">{{ post.memberNickname }}</li>\r\n                <li v-if=\"post.managerNickname\" class=\"breadcrumb-item text-secondary\">{{ post.managerNickname }}</li>\r\n                <li class=\"breadcrumb-item text-secondary\">{{ useGetTimeDifference(post.regDate) }}</li>\r\n                <li v-if=\"post.comments\" class=\"breadcrumb-item text-secondary\">댓글 {{ useFormatNumber(post.comments.length) }}개</li>\r\n              </ol>\r\n            </nav>\r\n\r\n            <p class=\"mt-5 mb-lg-5\">{{ post.content }}</p>\r\n\r\n            <slot></slot>\r\n\r\n            <div class=\"d-flex justify-content-end align-items-center\">\r\n              <i class=\"btn bi bi-chevron-up mx-2 icon-1x\"></i>\r\n              <p class=\"text-dark mb-0 h4\"><span>{{ useFormatNumber(post.likeCount - post.dislikeCount) }}</span></p>\r\n              <i class=\"btn ms-2 bi-chevron-down icon-1x\"></i>\r\n            </div>\r\n\r\n            <hr class=\"my-3\"/>\r\n          </div>\r\n        </article>\r\n      </div>\r\n    </div>\r\n  </b-container>\r\n\r\n  <!-- 모달 -->\r\n  <b-modal\r\n      id=\"deleteModal\"\r\n      ref=\"modal\"\r\n      v-model=\"modalShow\"\r\n      title=\"게시글 삭제\"\r\n      cancel-title=\"취소하기\"\r\n      ok-title=\"삭제하기\"\r\n      @ok=\"handleOk\"\r\n      centered\r\n  >\r\n    <b class=\"mb-0\">정말로 삭제하시겠습니까?</b>\r\n  </b-modal>\r\n\r\n</template>","import script from \"./Post.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Post.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import script from \"./Comments.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Comments.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","/**\r\n * 확장자에 따라 해당 파일의 아이콘 태그를 반환\r\n *\r\n * 지원하는 확장자가 없는 경우 기본 아이콘 태그를 반환\r\n *\r\n * @param {string} extension 파일 확장자\r\n * @returns {string} 파일의 아이콘 태그\r\n */\r\nexport function useGetIconTagByExtension(extension) {\r\n    const lowerCaseExtension = extension.toLowerCase();\r\n    switch (lowerCaseExtension) {\r\n        case \"jpg\":\r\n        case \"gif\":\r\n        case \"png\":\r\n            return '<i class=\"bi bi-file-image\"></i>';\r\n        case \"zip\":\r\n            return '<i class=\"bi bi-file-earmark-zip\"></i>';\r\n        default:\r\n            return '<i class=\"bi bi-file-earmark\"></i>';\r\n    }\r\n}\r\n","/**\r\n * 바이트를 포맷팅하는 함수\r\n * 기본 단위는 1byte이며, 자릿수가 일의 자리수를 넘지 않도록 바이트를 포맷팅\r\n * 소수점은 둘째 자리까지 반올림하여 표시\r\n *\r\n * @param {number} bytes 포맷팅할 바이트 수\r\n * @returns {string} 예쁘게 포맷팅된 바이트 문자열\r\n */\r\nexport function useFormatBytes(bytes) {\r\n    const units = ['B', 'KB', 'MB', 'GB', 'TB'];\r\n    const base = 1024; // 기본 단위는 1byte이므로 1024로 수정\r\n    let i = 0;\r\n    while (bytes >= base && i < units.length - 1) {\r\n        bytes /= base;\r\n        i++;\r\n    }\r\n    return `${Math.round(bytes * 10) / 10}${units[i]}`;\r\n}\r\n","import script from \"./AttachmentList.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./AttachmentList.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\r\n  <div>\r\n    <div class=\"board bg-white text-dark py-1 text-left\">\r\n      <!-- Left side -->\r\n      <b-container class=\"mt-3\">\r\n        <div class=\"d-flex flex-row mt-3 mb-5\">\r\n          <b-skeleton class=\"w-100 h-100\"></b-skeleton>\r\n        </div>\r\n\r\n        <b-row align-h=\"between\" class=\"justify-content-start\">\r\n          <b-col cols=\"2\">\r\n            <div class=\"hstack gap-3 h-100\">\r\n              <div class=\"vr\"></div>\r\n              <b-skeleton class=\"w-100 h-100\">\r\n                <b-skeleton height=\"1rem\" width=\"5rem\"></b-skeleton>\r\n              </b-skeleton>\r\n            </div>\r\n          </b-col>\r\n\r\n          <b-col cols=\"2\" class=\"d-flex justify-content-end\">\r\n            <div>\r\n              <b-skeleton class=\"w-100 h-100\">\r\n                <b-skeleton height=\"1rem\" width=\"5rem\"></b-skeleton>\r\n              </b-skeleton>\r\n            </div>\r\n          </b-col>\r\n        </b-row>\r\n      </b-container>\r\n    </div>\r\n\r\n    <b-container class=\"py-3\">\r\n      <div class=\"row\">\r\n        <div class=\"col-md-12 mb-4\">\r\n          <article>\r\n            <div class=\"post-content\">\r\n              <b-skeleton class=\"mb-4\" height=\"40px\"></b-skeleton>\r\n\r\n              <nav style=\"--bs-breadcrumb-divider: 'ㆍ';\" aria-label=\"breadcrumb\">\r\n                <ol class=\"breadcrumb\">\r\n                  <b-skeleton class=\"breadcrumb-item text-secondary\">\r\n                    <b-skeleton height=\"1rem\" width=\"5rem\"></b-skeleton>\r\n                  </b-skeleton>\r\n                  <b-skeleton class=\"breadcrumb-item text-secondary\">\r\n                    <b-skeleton height=\"1rem\" width=\"5rem\"></b-skeleton>\r\n                  </b-skeleton>\r\n                  <li class=\"breadcrumb-item text-secondary\">\r\n                    <b-skeleton height=\"1rem\" width=\"8rem\"></b-skeleton>\r\n                  </li>\r\n                  <b-skeleton class=\"breadcrumb-item text-secondary\">\r\n                    <b-skeleton height=\"1rem\" width=\"8rem\"></b-skeleton>\r\n                  </b-skeleton>\r\n                </ol>\r\n              </nav>\r\n\r\n              <b-skeleton height=\"200px\"></b-skeleton>\r\n\r\n              <div class=\"d-flex justify-content-end align-items-center\">\r\n                <b-skeleton height=\"2rem\" width=\"2rem\"></b-skeleton>\r\n                <p class=\"text-dark mb-0 h4\"><b-skeleton height=\"1rem\" width=\"2rem\"></b-skeleton></p>\r\n                <b-skeleton height=\"2rem\" width=\"2rem\"></b-skeleton>\r\n              </div>\r\n              <b-skeleton class=\"d-flex justify-content-end align-items-center\" height=\"30px\" width=\"150px\"></b-skeleton>\r\n\r\n              <slot></slot>\r\n\r\n              <hr class=\"my-3\"/>\r\n            </div>\r\n          </article>\r\n        </div>\r\n      </div>\r\n    </b-container>\r\n  </div>\r\n</template>\r\n","import { render } from \"./PostSkeleton.vue?vue&type=template&id=c56703c6\"\nconst script = {}\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import script from \"./PostFormHeader.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./PostFormHeader.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import AuthenticationService from \"@/service/AuthenticationService\";\r\nimport {store} from \"@/store\";\r\nimport router from \"@/router/router\";\r\n\r\n/**\r\n * 토큰 재발급 후 다시 요청하는 함수\r\n *\r\n * 이 함수는 토큰 갱신을 시도하고, 갱신이 성공하면 콜백 함수를 호출\r\n * 토큰 갱신에 실패하거나, 갱신 후에 콜백 함수 실행 중에 에러가 발생하면\r\n * 사용자를 로그인 페이지로 이동시키고 에러를 출력\r\n *\r\n * @param {Function} callback - 토큰 갱신 후에 실행할 콜백 함수\r\n * @returns {Promise<void>} - 토큰 갱신 및 콜백 실행 결과를 처리하는 Promise 객체\r\n * @throws {Error} - 토큰 갱신 실패 또는 콜백 실행 중에 에러가 발생한 경우 에러 객체를 던집니다.\r\n */\r\nexport async function useRefreshTokenAndRetry(callback) {\r\n    try {\r\n        await AuthenticationService.refresh();\r\n        await callback();\r\n    } catch (error) {\r\n        store.resetMember();\r\n        await router.push({name: \"SignIn\"});\r\n    }\r\n}\r\n","import {ref} from 'vue';\r\nimport router from \"@/router/router\";\r\nimport ErrorType from \"@/composable/response/ErrorType\";\r\nimport {useRefreshTokenAndRetry} from \"@/composable/authentication/refreshTokenAndRetry\";\r\n\r\n/**\r\n * 게시물 삭제 요청을 처리하는 컴포지션 함수\r\n *\r\n * @param {string} targetRouteName - 삭제 성공 후 이동할 라우터 이름\r\n * @param {Function} deletePostFunction - 게시물 삭제 함수\r\n * @returns {{\r\n *   submitError: Ref<null>,\r\n *   useSubmit: (postIdx: string) => Promise<void>\r\n * }}\r\n */\r\nexport function useDeletePostSubmit(targetRouteName, deletePostFunction) {\r\n    const deleteSubmitError = ref(null);\r\n\r\n    /**\r\n     * 게시물 삭제를 요청하는 함수\r\n     *\r\n     * @param {string} postIdx - 삭제할 게시물 번호\r\n     * @returns {Promise<void>}\r\n     */\r\n    async function useSubmit(postIdx) {\r\n        try {\r\n            await deletePostFunction(postIdx).then(() => {router.push({name: targetRouteName })});\r\n        } catch (error) {\r\n            console.log(error)\r\n            if (error.response?.data?.errorCode === ErrorType.EXPIRED_ACCESS_TOKEN) {\r\n                await useRefreshTokenAndRetry(() => useSubmit());\r\n            }\r\n            if (error.response?.data?.errorCode === ErrorType.CAN_NOT_DELETE_OTHER_MEMBER_POST) {\r\n                deleteSubmitError.value = error.response.data;\r\n            }\r\n            if (error.response?.data?.errorCode === ErrorType.CAN_NOT_DELETE_POST_WITH_OTHER_MEMBER_COMMENTS) {\r\n                deleteSubmitError.value = error.response.data;\r\n            }\r\n            return Promise.reject(error);\r\n        }\r\n    }\r\n\r\n    return {\r\n        deleteSubmitError,\r\n        useSubmit\r\n    };\r\n}\r\n","<script setup>\r\nimport Post from \"@/components/Post.vue\";\r\nimport BackgroundBanner from \"@/components/common/BackgroundBanner.vue\";\r\nimport {ref} from \"vue\";\r\nimport PostService from \"@/service/PostService\";\r\nimport Comments from \"@/components/Comments.vue\";\r\nimport AttachmentList from \"@/components/AttachmentList.vue\";\r\nimport PostSkeleton from \"@/components/skeleton/PostSkeleton.vue\";\r\nimport BackgroundBannerSkeleton from \"@/components/skeleton/BackgroundBannerSkeleton.vue\";\r\nimport PostFormHeader from \"@/components/common/PostFormHeader.vue\";\r\nimport Error from \"@/components/common/Error.vue\";\r\nimport {useDeletePostSubmit} from \"@/composable/submitForm/deletePostSubmit\";\r\nimport BannerSub from \"@/components/common/BannerSub.vue\";\r\n\r\n// 게시글을 담는 반응성 객체\r\nconst fetchCommunityData = ref(null);\r\n\r\n// 게시글 번호를 props로 전달받음\r\nconst props = defineProps({\r\n  postIdx: {\r\n    type: String,\r\n    default: ''\r\n  }\r\n});\r\n\r\n/**\r\n * 커뮤니티 게시글을 가져오는 함수\r\n *\r\n * @param postIdx 게시글 번호\r\n * @returns {Promise<void>}\r\n */\r\nasync function getCommunity(postIdx) {\r\n  return PostService.fetchCommunity(postIdx).then(response => {\r\n    fetchCommunityData.value = response?.data\r\n  }).catch(error => {\r\n    console.log(error)\r\n  })\r\n}\r\n\r\n// 게시글 가져오기 함수 호출\r\ngetCommunity(props.postIdx);\r\n\r\n// 커스텀 훅을 사용하여 게시글 삭제를 위한 변수와 함수들을 가져옴\r\nconst {deleteSubmitError, useSubmit}\r\n    = useDeletePostSubmit(\"Communities\", PostService.deleteCommunity);\r\n\r\n</script>\r\n\r\n<template>\r\n  <!-- 게시글이 로딩되었을 때 -->\r\n  <template v-if=\"fetchCommunityData\">\r\n    <!-- 게시글 배경 배너와 헤더 컴포넌트 사용 -->\r\n    <BannerSub :banner-path=\"`good-post.png`\"/>\r\n    <PostFormHeader :routeNameForPush=\"'Communities'\"/>\r\n\r\n    <b-container class=\"mt-3\">\r\n      <!-- 게시글 삭제 시 에러가 있을 때 에러 컴포넌트 출력 -->\r\n      <template v-if=\"deleteSubmitError !== null && deleteSubmitError.error !== null\">\r\n        <Error :error=\"deleteSubmitError\"/>\r\n      </template>\r\n\r\n      <!-- Post 컴포넌트 사용 -->\r\n      <Post :post=\"fetchCommunityData\" :postEditRouteName=\"`CommunityEdit`\" @delete=\"useSubmit(postIdx)\">\r\n        <!-- 게시글 첨부파일 목록이 있을 경우 AttachmentList 컴포넌트 출력 -->\r\n        <template v-if=\"fetchCommunityData.attachments\">\r\n          <AttachmentList :attachments=\"fetchCommunityData.attachments\"/>\r\n        </template>\r\n      </Post>\r\n\r\n      <!-- 게시글의 댓글 목록이 있을 경우 Comments 컴포넌트 출력 -->\r\n      <template v-if=\"fetchCommunityData.comments\">\r\n        <Comments :comments=\"fetchCommunityData.comments\"/>\r\n      </template>\r\n    </b-container>\r\n  </template>\r\n\r\n  <!-- 게시글 로딩 중일 때 -->\r\n  <template v-else>\r\n    <!-- BackgroundBannerSkeleton 컴포넌트 출력 -->\r\n    <BackgroundBannerSkeleton/>\r\n    <!-- PostSkeleton 컴포넌트 출력 -->\r\n    <PostSkeleton/>\r\n  </template>\r\n</template>","import script from \"./CommunityPost.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./CommunityPost.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\r\nimport Post from \"@/components/Post.vue\";\r\nimport BackgroundBanner from \"@/components/common/BackgroundBanner.vue\";\r\nimport {ref} from \"vue\";\r\nimport PostService from \"@/service/PostService\";\r\nimport Comments from \"@/components/Comments.vue\";\r\nimport PostSkeleton from \"@/components/skeleton/PostSkeleton.vue\";\r\nimport BackgroundBannerSkeleton from \"@/components/skeleton/BackgroundBannerSkeleton.vue\";\r\nimport PostFormHeader from \"@/components/common/PostFormHeader.vue\";\r\nimport {useDeletePostSubmit} from \"@/composable/submitForm/deletePostSubmit\";\r\nimport Error from \"@/components/common/Error.vue\";\r\nimport BannerSub from \"@/components/common/BannerSub.vue\";\r\n\r\n// 게시글을 담는 반응성 객체\r\nconst fetchNoticeData = ref(null);\r\n\r\n// props 설정, postIdx를 props로 전달받음\r\nconst props = defineProps({\r\n  postIdx: {\r\n    type: String,\r\n    default: ''\r\n  }\r\n});\r\n\r\n/**\r\n * 커뮤니티 게시글을 가져오는 함수\r\n *\r\n * @param postIdx 게시글 번호\r\n * @returns {Promise<void>}\r\n */\r\nasync function getNotice(postIdx) {\r\n  return PostService.fetchNotice(postIdx).then(response => {\r\n    fetchNoticeData.value = response?.data\r\n  }).catch(error => {\r\n    console.log(error)\r\n  })\r\n}\r\n\r\n// props로 전달된 postIdx를 이용하여 커뮤니티 게시글 가져오기 함수 호출\r\ngetNotice(props.postIdx);\r\n\r\n// useDeletePostSubmit 커스텀 훅을 사용하여 게시글 삭제에 필요한 데이터와 함수 가져오기\r\nconst {deleteSubmitError, useSubmit}\r\n    = useDeletePostSubmit(\"Notices\", PostService.deleteNotice);\r\n\r\n</script>\r\n\r\n<template>\r\n  <!-- 게시글 정보가 있을 경우 -->\r\n  <template v-if=\"fetchNoticeData\">\r\n\r\n    <!-- 게시글 배경 배너와 헤더 컴포넌트 사용 -->\r\n    <BannerSub :banner-path=\"`good-post.png`\"/>\r\n    <PostFormHeader :routeNameForPush=\"'Notices'\"/>\r\n\r\n    <b-container class=\"mt-3\">\r\n      <!-- 삭제 에러가 있을 경우, 에러 메시지 출력 -->\r\n      <template v-if=\"deleteSubmitError !== null && deleteSubmitError.error !== null\">\r\n        <Error :error=\"deleteSubmitError\"/>\r\n      </template>\r\n      <!-- 게시글 컴포넌트 Post 사용 -->\r\n      <Post :post=\"fetchNoticeData\"\r\n            :postEditRouteName=\"`NoticeEdit`\"\r\n            @delete=\"useSubmit(postIdx)\" />\r\n      <!-- 댓글 정보가 있을 경우 -->\r\n      <template v-if=\"fetchNoticeData.comments\">\r\n        <!-- 댓글 컴포넌트 Comments 사용 -->\r\n        <Comments :comments=\"fetchNoticeData.comments\"/>\r\n      </template>\r\n    </b-container>\r\n  </template>\r\n\r\n  <!-- 게시글 정보가 없을 경우 (로딩 중) -->\r\n  <template v-else>\r\n    <!-- 배경 배너 스켈레톤 컴포넌트 BackgroundBannerSkeleton 사용 -->\r\n    <BackgroundBannerSkeleton/>\r\n    <!-- 게시글 스켈레톤 컴포넌트 PostSkeleton 사용 -->\r\n    <PostSkeleton/>\r\n  </template>\r\n</template>","import script from \"./NoticePost.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./NoticePost.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\r\nimport { ref } from \"vue\";\r\n\r\nconst props = defineProps({\r\n  attachments: Array, // Use Array type instead of Object\r\n});\r\n\r\nconst activeIndex = ref(0);\r\n\r\nconst slides = props.attachments.map((attachment) => ({\r\n  src: `/file/${attachment.savedAttachmentName}`,\r\n  alt: attachment.originalAttachmentName,\r\n}));\r\n\r\nfunction prevSlide() {\r\n  activeIndex.value = (activeIndex.value - 1 + slides.length) % slides.length;\r\n}\r\n\r\nfunction nextSlide() {\r\n  activeIndex.value = (activeIndex.value + 1) % slides.length;\r\n}\r\n</script>\r\n\r\n\r\n<template>\r\n  <div>\r\n    <div id=\"carouselExampleControls\" class=\"carousel slide\" data-ride=\"carousel\">\r\n      <div class=\"carousel-inner\">\r\n        <div class=\"carousel-item\" v-for=\"(slide, index) in slides\" :key=\"index\" :class=\"{ 'active': index === activeIndex }\">\r\n          <img :src=\"slide.src\" class=\"d-block w-100 rounded\" :alt=\"slide.alt\">\r\n        </div>\r\n      </div>\r\n      <a class=\"carousel-control-prev\" href=\"#carouselExampleControls\" role=\"button\" data-slide=\"prev\" @click.prevent=\"prevSlide\">\r\n        <span class=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>\r\n        <span class=\"sr-only\">Previous</span>\r\n      </a>\r\n      <a class=\"carousel-control-next\" href=\"#carouselExampleControls\" role=\"button\" data-slide=\"next\" @click.prevent=\"nextSlide\">\r\n        <span class=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>\r\n        <span class=\"sr-only\">Next</span>\r\n      </a>\r\n    </div>\r\n  </div>\r\n</template>\r\n","import script from \"./Carousel.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Carousel.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\r\nimport Post from \"@/components/Post.vue\";\r\nimport BackgroundBanner from \"@/components/common/BackgroundBanner.vue\";\r\nimport {ref} from \"vue\";\r\nimport PostService from \"@/service/PostService\";\r\nimport Comments from \"@/components/Comments.vue\";\r\nimport Carousel from \"@/components/Carousel.vue\";\r\nimport PostSkeleton from \"@/components/skeleton/PostSkeleton.vue\";\r\nimport BackgroundBannerSkeleton from \"@/components/skeleton/BackgroundBannerSkeleton.vue\";\r\nimport AttachmentList from \"@/components/AttachmentList.vue\";\r\nimport PostFormHeader from \"@/components/common/PostFormHeader.vue\";\r\nimport {useDeletePostSubmit} from \"@/composable/submitForm/deletePostSubmit\";\r\nimport Error from \"@/components/common/Error.vue\";\r\nimport BannerSub from \"@/components/common/BannerSub.vue\";\r\n\r\n// 게시글을 담는 반응성 객체\r\nconst fetchPhotoData = ref(null);\r\n\r\n// props 설정, postIdx를 props로 전달받음.\r\nconst props = defineProps({\r\n  postIdx: {\r\n    type: String,\r\n    default: ''\r\n  }\r\n});\r\n\r\n/**\r\n * 커뮤니티 게시글을 가져오는 함수\r\n *\r\n * @param postIdx 게시글 번호\r\n * @returns {Promise<void>}\r\n */\r\nasync function getPhoto(postIdx) {\r\n  await PostService.fetchPhoto(postIdx).then(response => {\r\n    fetchPhotoData.value = response?.data\r\n  }).catch(error => {\r\n    console.log(error)\r\n  })\r\n}\r\n\r\n// 컴포넌트가 마운트되기 전에 게시글 정보를 가져옴\r\ngetPhoto(props.postIdx);\r\n\r\n// useDeletePostSubmit 커스텀 훅을 사용하여 게시글 삭제에 필요한 데이터와 함수 가져오기\r\nconst {deleteSubmitError, useSubmit}\r\n    = useDeletePostSubmit(\"Photos\", PostService.deletePhoto);\r\n\r\n</script>\r\n\r\n<template>\r\n  <!-- 게시글 정보가 있을 경우 -->\r\n  <template v-if=\"fetchPhotoData\">\r\n    <!-- 게시글 배경 배너와 헤더 컴포넌트 사용 -->\r\n    <BannerSub :banner-path=\"`good-post.png`\"/>\r\n    <PostFormHeader :routeNameForPush=\"'Photos'\"/>\r\n\r\n    <b-container class=\"mt-3\">\r\n      <!-- 삭제 오류가 있을 경우, 오류 메시지 출력 -->\r\n      <template v-if=\"deleteSubmitError !== null && deleteSubmitError.error !== null\">\r\n        <Error :error=\"deleteSubmitError\"/>\r\n      </template>\r\n      <!-- Post 컴포넌트 사용하여 게시글 표시 -->\r\n      <Post :post=\"fetchPhotoData\" :postEditRouteName=\"`PhotoEdit`\" @delete=\"useSubmit(postIdx)\">\r\n        <!-- 게시글에 첨부파일이 있을 경우, Carousel과 AttachmentList 컴포넌트 사용하여 표시 -->\r\n        <template v-if=\"fetchPhotoData.attachments\">\r\n          <Carousel :attachments=\"fetchPhotoData.attachments\"/>\r\n          <AttachmentList :attachments=\"fetchPhotoData.attachments\"/>\r\n        </template>\r\n      </Post>\r\n      <!-- 게시글에 댓글이 있을 경우, Comments 컴포넌트 사용하여 표시 -->\r\n      <template v-if=\"fetchPhotoData.comments\">\r\n        <Comments :comments=\"fetchPhotoData.comments\"/>\r\n      </template>\r\n    </b-container>\r\n  </template>\r\n\r\n  <!-- 게시글 정보가 없을 경우 -->\r\n  <template v-else>\r\n    <!-- 로딩 중을 나타내는 배너와 스켈레톤 컴포넌트 사용 -->\r\n    <BackgroundBannerSkeleton/>\r\n    <PostSkeleton/>\r\n  </template>\r\n</template>","import script from \"./PhotoPost.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./PhotoPost.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import script from \"./Answer.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Answer.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import script from \"./CommonMessage.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./CommonMessage.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./CommonMessage.vue?vue&type=style&index=0&id=52457be4&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-52457be4\"]])\n\nexport default __exports__","<script setup>\r\nimport Post from \"@/components/Post.vue\";\r\nimport BackgroundBanner from \"@/components/common/BackgroundBanner.vue\";\r\nimport {ref} from \"vue\";\r\nimport PostService from \"@/service/PostService\";\r\nimport Comments from \"@/components/Comments.vue\";\r\nimport Answer from \"@/components/Answer.vue\";\r\nimport ErrorType from \"@/composable/response/ErrorType\";\r\nimport CommonMessage from \"@/components/common/CommonMessage.vue\";\r\nimport {useRefreshTokenAndRetry} from \"@/composable/authentication/refreshTokenAndRetry\";\r\nimport router from \"@/router/router\";\r\nimport Error from \"@/components/common/Error.vue\";\r\nimport PostSkeleton from \"@/components/skeleton/PostSkeleton.vue\";\r\nimport BackgroundBannerSkeleton from \"@/components/skeleton/BackgroundBannerSkeleton.vue\";\r\nimport {store} from \"@/store\";\r\nimport PostFormHeader from \"@/components/common/PostFormHeader.vue\";\r\nimport {useDeletePostSubmit} from \"@/composable/submitForm/deletePostSubmit\";\r\nimport BannerSub from \"@/components/common/BannerSub.vue\";\r\n\r\n// 게시글을 담는 반응성 객체\r\nconst fetchInquiryData = ref(null);\r\n\r\n// 게시글 번호를 props로 전달받음\r\nconst props = defineProps({\r\n  postIdx: {\r\n    type: String,\r\n    default: ''\r\n  }\r\n});\r\n\r\n/**\r\n * 문의 게시글을 가져오는 함수\r\n *\r\n * @param postIdx 게시글 번호\r\n * @returns {Promise<void>}\r\n */\r\nasync function getInquiry(postIdx) {\r\n  try {\r\n    const response = await PostService.fetchInquiry(postIdx);\r\n    fetchInquiryData.value = response?.data;\r\n  } catch (error) {\r\n    console.log(error);\r\n    const errorCode = error?.response?.data?.errorCode;\r\n\r\n    // TODO: 코드 리팩토링\r\n    if (errorCode === ErrorType.CAN_NOT_VIEW_SECRET_INQUIRY) {\r\n      if(store.isMemberSignedIn()) {\r\n        try {\r\n          const response = await PostService.fetchSecretInquiry(postIdx);\r\n          fetchInquiryData.value = response?.data;\r\n        } catch (error) {\r\n          if (error?.response?.data?.errorCode === ErrorType.EXPIRED_ACCESS_TOKEN) {\r\n            try {\r\n              await useRefreshTokenAndRetry(() => getInquiry(postIdx));\r\n            } catch (error) {\r\n              modalShow.value = true;\r\n            }\r\n          } else {\r\n            modalShow.value = true;\r\n          }\r\n        }\r\n      }\r\n      if(!store.isMemberSignedIn()) {\r\n        modalShow.value = true;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// 게시글 가져오기 함수 호출\r\ngetInquiry(props.postIdx);\r\n\r\n// 반환된 에러를 담는 반응성 객체\r\nconst submitError = ref(null)\r\n\r\n// 비밀번호 모달 반응성 객체\r\nconst modalShow = ref(false)\r\n\r\n// 비밀글 열람을 위한 입력된 비밀번호 반응성 객체\r\nconst password = ref('')\r\n\r\n/**\r\n * 비밀번호 초기화 함수\r\n */\r\nfunction resetPassword() {\r\n  password.value = ''\r\n}\r\n\r\n/**\r\n * 비밀글 열람 확인 버튼 함수\r\n *\r\n * @param {Event} bvModalEvent - 모달 이벤트 객체\r\n */\r\nfunction handleOk(bvModalEvent) {\r\n  bvModalEvent.preventDefault()\r\n  handleSubmit()\r\n}\r\n\r\n/**\r\n * 비밀글 열람 서버 패스워드 전송 함수\r\n */\r\nasync function handleSubmit() {\r\n  const formData = new FormData\r\n  formData.append('password', password.value)\r\n\r\n  try {\r\n    const response = await PostService.fetchSecretInquiry(props.postIdx, formData);\r\n    modalShow.value = false;\r\n    fetchInquiryData.value = response?.data;\r\n  } catch (error) {\r\n    if (error.response?.data?.errorCode === ErrorType.EXPIRED_ACCESS_TOKEN) {\r\n      await useRefreshTokenAndRetry(() => handleSubmit());\r\n    }\r\n    if (error.response?.data?.errorCode === ErrorType.CAN_NOT_VIEW_OTHER_MEMBER_INQUIRIES) {\r\n      submitError.value = error.response?.data;\r\n    }\r\n  }\r\n}\r\n\r\n// 커스텀 훅을 사용하여 게시글 삭제를 위한 변수와 함수들을 가져옴\r\nconst {deleteSubmitError, useSubmit}\r\n    = useDeletePostSubmit(\"Inquiries\", PostService.deleteInquiry);\r\n\r\n</script>\r\n\r\n<template>\r\n  <template v-if=\"fetchInquiryData\">\r\n    <!-- 게시글 배경 배너와 헤더 컴포넌트 사용 -->\r\n    <BannerSub :banner-path=\"`good-post.png`\"/>\r\n    <PostFormHeader :routeNameForPush=\"'Inquiries'\"/>\r\n\r\n    <!-- 게시글 데이터가 로딩되었을 경우 -->\r\n    <b-container class=\"mt-3\">\r\n      <template v-if=\"deleteSubmitError !== null && deleteSubmitError.error !== null\">\r\n        <!-- deleteSubmitError가 null이 아니고 error 속성이 null이 아닐 경우 에러 컴포넌트 Error로 에러 메시지 표시 -->\r\n        <Error :error=\"deleteSubmitError\"/>\r\n      </template>\r\n      <!-- Post 컴포넌트로 게시글 데이터를 표시하고 삭제 이벤트 처리 -->\r\n      <Post :post=\"fetchInquiryData\" :postEditRouteName=\"`InquiryEdit`\" @delete=\"useSubmit(postIdx)\" />\r\n      <template v-if=\"fetchInquiryData.answerManagerNickname\">\r\n        <!-- fetchInquiryData.answerManagerNickname이 존재하는 경우 Answer 컴포넌트로 답변 데이터 표시 -->\r\n        <Answer :post=\"fetchInquiryData\"/>\r\n      </template>\r\n      <template v-if=\"fetchInquiryData.comments\">\r\n        <!-- fetchInquiryData.comments가 존재하는 경우 Comments 컴포넌트로 댓글 데이터 표시 -->\r\n        <Comments :comments=\"fetchInquiryData.comments\"/>\r\n      </template>\r\n    </b-container>\r\n  </template>\r\n  <template v-else-if=\"modalShow\">\r\n    <!-- 데이터 로딩 중이면서 modalShow 값이 true인 경우 -->\r\n    <!-- CommonMessage 컴포넌트로 비밀글 설정 안내 메시지 표시 -->\r\n    <CommonMessage :imagePath=\"`secret.jpg`\" :title=\"`비밀글 설정`\" :content=\"`이 게시글은 비밀글로 설정되어있습니다.`\" />\r\n  </template>\r\n  <template v-else>\r\n    <!-- 데이터 로딩 중이면서 modalShow 값이 false인 경우 -->\r\n    <!-- BackgroundBannerSkeleton 컴포넌트로 스켈레톤 형식의 배경 이미지 표시 -->\r\n    <BackgroundBannerSkeleton />\r\n    <!-- PostSkeleton 컴포넌트로 스켈레톤 형식의 게시글 데이터 표시 -->\r\n    <PostSkeleton />\r\n  </template>\r\n\r\n  <!-- 모달 -->\r\n  <b-modal\r\n      id=\"inputPasswordModal\"\r\n      ref=\"modal\"\r\n      v-model=\"modalShow\"\r\n      title=\"비밀글 열람\"\r\n      cancel-title=\"취소하기\"\r\n      ok-title=\"열람하기\"\r\n      @show=\"resetPassword\"\r\n      @hidden=\"resetPassword\"\r\n      @ok=\"handleOk\"\r\n      @cancel=\"router.go(-1)\"\r\n      @close=\"router.go(-1)\"\r\n      centered\r\n      no-close-on-backdrop\r\n  >\r\n    <!-- 비밀번호 입력 폼 -->\r\n    <b>비밀번호를 입력해 주세요.</b>\r\n    <form ref=\"form\" class=\"mt-3\">\r\n      <b-form-group label-for=\"password-input\" invalid-feedback=\"비밀번호는 필수입니다.\">\r\n        <b-form-input id=\"password-input\" v-model=\"password\" type=\"password\" required />\r\n      </b-form-group>\r\n    </form>\r\n    <!-- submitError가 null이 아닐 경우 에러 컴포넌트 Error로 에러 메시지 표시 -->\r\n    <div v-if=\"submitError !== null\">\r\n      <Error :error=\"submitError\"/>\r\n    </div>\r\n  </b-modal>\r\n\r\n</template>","import script from \"./InquiryPost.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./InquiryPost.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import script from \"./ValidationError.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ValidationError.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","/**\r\n * 첨부 파일 타입을 나타내는 객체\r\n *\r\n * 허용된 확장자, 최대 업로드 크기, 최대 업로드 횟수\r\n */\r\nexport const AttachmentType = {\r\n    FILE: {\r\n        allowedExtensions: [\"jpg\", \"gif\", \"png\", \"zip\"],\r\n        maxUploadSize: 2048000,\r\n        maxUploadCount: 5,\r\n    },\r\n    IMAGE: {\r\n        allowedExtensions: [\"jpg\", \"gif\", \"png\"],\r\n        maxUploadSize: 1024000,\r\n        maxUploadCount: 20,\r\n    },\r\n};\r\n","/**\r\n * 파일의 확장자가 허용된 확장자면 true, 그렇지 않으면 false 반환\r\n *\r\n * @param {FileList} files - 확인할 파일 목록\r\n * @param {string[]} allowedExtensions - 허용된 파일 확장자 목록\r\n * @returns {boolean} 허용된 확장자면 true, 그렇지 않으면 false를 반환\r\n */\r\nexport function useValidateAttachmentsExtension(files, allowedExtensions) {\r\n    for (const file of files) {\r\n        return !allowedExtensions.includes(file.name.split(\".\").pop().toLowerCase());\r\n    }\r\n}","/**\r\n * 파일의 크기가 최대 업로드 크기를 초과하면 true, 그렇지 않으면 false 반환\r\n *\r\n * @param {FileList} files - 확인할 파일 목록\r\n * @param {number} maxUploadSize - 최대 업로드 크기 (바이트 단위)\r\n * @returns {boolean} 최대 업로드 크기를 초과하면 true, 그렇지 않으면 false를 반환\r\n */\r\nexport function useValidateAttachmentSize(files, maxUploadSize) {\r\n    for (const file of files) {\r\n        return file.size > maxUploadSize;\r\n    }\r\n}","/**\r\n * 파일 업로드 개수가 최대 업로드 횟수를 초과하면 true, 그렇지 않으면 false를 반환\r\n *\r\n * @param {FileList} files - 확인할 파일 목록\r\n * @param {number} maxUploadCount - 최대 업로드 횟수\r\n * @returns {boolean} 최대 업로드 횟수를 초과하면 true, 그렇지 않으면 false를 반환\r\n */\r\nexport function useValidateAttachmentUploadCount(files, maxUploadCount) {\r\n    return files.length > maxUploadCount;\r\n}","import {ref} from 'vue';\r\nimport {useValidateAttachmentsExtension} from \"@/composable/attachment/validateAttachmentsExtension\";\r\nimport {useValidateAttachmentSize} from \"@/composable/attachment/validateAttachmentSize\";\r\nimport {useValidateAttachmentUploadCount} from \"@/composable/attachment/validateAttachmentUploadCount\";\r\nimport router from \"@/router/router\";\r\nimport ErrorType from \"@/composable/response/ErrorType\";\r\nimport {useRefreshTokenAndRetry} from \"@/composable/authentication/refreshTokenAndRetry\";\r\n\r\n/**\r\n * 게시글 작성 폼을 관리하는 컴포저블\r\n *\r\n * @param {object} attachmentType - AttachmentType 객체 (파일 업로드에 필요한 정보를 가진 객체)\r\n * @param {string} formDataName - 폼 데이터의 이름\r\n * @param {Function} savePostFunction - 게시글을 저장하는 서비스 메서드\r\n * @returns {object} 게시글 작성 폼 관련 함수와 상태를 포함한 객체\r\n */\r\nexport function useSavePostSubmitWithAttachments(attachmentType, formDataName, savePostFunction) {\r\n    const submitError = ref(null)\r\n\r\n    const post = ref({category: null});\r\n\r\n    const formData = ref(new FormData());\r\n\r\n    const attachmentUploadErrors = ref({\r\n        hasUnsupportedExtensions: false,\r\n        isSizeExceeded: false,\r\n        isMaxUploadCountExceeded: false\r\n    });\r\n\r\n    /**\r\n     * 업로드된 파일들의 유효성 검사 결과를 확인하여 에러 여부를 반환하는 함수\r\n     *\r\n     * @param {FileList} files - 업로드된 파일들의 FileList 객체\r\n     * @returns {boolean} 업로드된 파일들의 유효성 검사 결과에 따른 에러 여부 (true: 에러 발생, false: 에러 없음)\r\n     */\r\n    function hasAttachmentUploadErrors(files) {\r\n        attachmentUploadErrors.value.hasUnsupportedExtensions = useValidateAttachmentsExtension(files, attachmentType.allowedExtensions);\r\n        attachmentUploadErrors.value.isSizeExceeded = useValidateAttachmentSize(files, attachmentType.maxUploadSize);\r\n        attachmentUploadErrors.value.isMaxUploadCountExceeded = useValidateAttachmentUploadCount(files, attachmentType.maxUploadCount);\r\n\r\n        return (\r\n            attachmentUploadErrors.value.hasUnsupportedExtensions ||\r\n            attachmentUploadErrors.value.isSizeExceeded ||\r\n            attachmentUploadErrors.value.isMaxUploadCountExceeded\r\n        );\r\n    }\r\n\r\n    /**\r\n     * 파일 업로드 핸들러 함수\r\n     *\r\n     * @param {Event} event - 파일 업로드 이벤트 객체\r\n     */\r\n    const useHandleAttachment = (event) => {\r\n        if (hasAttachmentUploadErrors(event.target.files)) {\r\n            event.target.value = \"\";\r\n            return;\r\n        }\r\n\r\n        formData.value.delete('attachments');\r\n        for (const file of event.target.files) {\r\n            formData.value.append('attachments', file)\r\n        }\r\n    };\r\n\r\n    /**\r\n     * 서버로 전송할 폼 데이터 객체를 반환하는 함수\r\n     *\r\n     * @returns {FormData} 폼 데이터 객체\r\n     */\r\n    function getSubmitFormData() {\r\n        formData.value.delete(formDataName);\r\n        formData.value.append(formDataName, new Blob([JSON.stringify(post.value)], {type: 'application/json'}));\r\n        return formData.value;\r\n    }\r\n\r\n    /**\r\n     * 게시글 작성 폼을 서버에 제출하는 함수\r\n     */\r\n    async function useSubmit() {\r\n        try {\r\n            const response = await savePostFunction(getSubmitFormData());\r\n            await router.push(response.headers.location.replace(\"/api\", \"\"));\r\n        } catch (error) {\r\n            if (error.response?.data?.errorCode === ErrorType.EXPIRED_ACCESS_TOKEN) {\r\n                await useRefreshTokenAndRetry(() => useSubmit());\r\n            }\r\n            if (error.response?.data?.errorCode === ErrorType.UNPROCESSABLE_ENTITY) {\r\n                submitError.value = error.response.data.message;\r\n            }\r\n        }\r\n    }\r\n\r\n    return {\r\n        post,\r\n        formData,\r\n        submitError,\r\n        attachmentUploadErrors,\r\n        hasAttachmentUploadErrors,\r\n        useHandleAttachment,\r\n        useSubmit\r\n    };\r\n}\r\n","<script setup>\r\nimport PostFormHeader from \"@/components/common/PostFormHeader.vue\";\r\nimport PostService from \"@/service/PostService\";\r\nimport {useFindSubCodeGroup} from \"@/composable/postGroup/findSubCodeGroup\";\r\nimport {store} from \"@/store\";\r\nimport {PostGroup} from \"@/composable/postGroup/PostGroup\";\r\nimport ValidationError from \"@/components/common/ValidationError.vue\";\r\nimport {AttachmentType} from '@/composable/attachment/constants/AttachmentType';\r\nimport {useSavePostSubmitWithAttachments} from \"@/composable/submitForm/savePostSubmitWithAttachments\";\r\n\r\n// 커뮤니티 게시글의 하위 코드 그룹을 가져오기 위해 커스텀 훅 사용\r\nconst subCodeGroup = useFindSubCodeGroup(store.categories, PostGroup.COMMUNITY);\r\n\r\n// 커스텀 훅을 사용하여 게시글 작성을 위해 필요한 변수와 함수들을 가져옴\r\nconst {post, submitError, attachmentUploadErrors,\r\n        useHandleAttachment, useSubmit}\r\n    = useSavePostSubmitWithAttachments(AttachmentType.FILE,\r\n          \"community\",  PostService.saveCommunity)\r\n</script>\r\n<template>\r\n  <!-- PostFormHeader 컴포넌트 사용 -->\r\n  <PostFormHeader :routeNameForPush=\"'Communities'\"/>\r\n  <b-container>\r\n    <b-row>\r\n      <b-col>\r\n        <!-- 게시글 작성을 위한 카드 컴포넌트 -->\r\n        <b-card class=\"mb-4\">\r\n          <b-card-body>\r\n            <h3 class=\"h6 mb-4\"></h3>\r\n            <b-row>\r\n              <b-col>\r\n                <!-- 게시글 작성 폼 -->\r\n                <b-form>\r\n                  <b-form-group label=\"토픽\">\r\n                    <!-- 토픽 선택을 위한 셀렉트 박스 -->\r\n                    <b-form-select v-model=\"post.category\">\r\n                      <b-form-select-option :value=\"null\" selected>모든 토픽</b-form-select-option>\r\n                      <b-form-select-option v-for=\"category in subCodeGroup\" :key=\"category.subCode\" :value=\"category.subCode\">\r\n                        {{ category.subCodeTitle }}\r\n                      </b-form-select-option>\r\n                    </b-form-select>\r\n                  </b-form-group>\r\n                  <template v-if=\"submitError && submitError.category\">\r\n                    <!-- 카테고리 에러 메시지 출력 -->\r\n                    <ValidationError :message=\"submitError.category\"/>\r\n                  </template>\r\n\r\n                  <!-- 제목 입력 폼 -->\r\n                  <b-form>\r\n                    <b-form-group label=\"제목\">\r\n                      <b-form-input\r\n                          v-model=\"post.title\"\r\n                          id=\"titleInput\"\r\n                          placeholder=\"4글자 이상, 100글자 이하여야 합니다\"\r\n                          required\r\n                          minlength=\"4\"\r\n                          maxlength=\"100\"\r\n                      ></b-form-input>\r\n                    </b-form-group>\r\n                    <template v-if=\"submitError && submitError.title\">\r\n                      <!-- 제목 에러 메시지 출력 -->\r\n                      <ValidationError :message=\"submitError.title\"/>\r\n                    </template>\r\n\r\n                    <!-- 내용 입력 폼 -->\r\n                    <b-form-group label=\"내용\">\r\n                      <b-form-textarea\r\n                          v-model=\"post.content\"\r\n                          id=\"contentTextarea\"\r\n                          placeholder=\"4글자 이상, 2000글자 이하여야 합니다\"\r\n                          required\r\n                          minlength=\"4\"\r\n                          maxlength=\"2000\"\r\n                          style=\"height: 300px;\"\r\n                      ></b-form-textarea>\r\n                    </b-form-group>\r\n                    <template v-if=\"submitError && submitError.content\">\r\n                      <!-- 내용 에러 메시지 출력 -->\r\n                      <ValidationError :message=\"submitError.content\"/>\r\n                    </template>\r\n\r\n                    <!-- 파일 업로드 입력 폼 -->\r\n                    <div class=\"mb-5\">\r\n                      <label for=\"formFileMultiple\" class=\"form-label\">파일 업로드</label>\r\n                      <input @change=\"useHandleAttachment\" class=\"form-control\" type=\"file\" id=\"formFileMultiple\" multiple\r\n                             ref=\"fileInput\">\r\n                    </div>\r\n                    <template v-if=\"attachmentUploadErrors.hasUnsupportedExtensions\">\r\n                      <!-- 파일 확장자 에러 메시지 출력 -->\r\n                      <ValidationError :message=\"`확장자 jpg, gif, png, zip만 업로드 가능합니다.`\"/>\r\n                    </template>\r\n                    <template v-if=\"attachmentUploadErrors.isMaxUploadCountExceeded\">\r\n                      <!-- 파일 업로드 개수 초과 에러 메시지 출력 -->\r\n                      <ValidationError :message=\"`최대 5개의 파일까지 업로드 가능합니다.`\"/>\r\n                    </template>\r\n                    <template v-if=\"attachmentUploadErrors.isSizeExceeded\">\r\n                      <!-- 파일 크기 초과 에러 메시지 출력 -->\r\n                      <ValidationError :message=\"`파일의 크기는 최대 2,048,000 byte 입니다.`\"/>\r\n                    </template>\r\n\r\n                    <!-- 등록 버튼 -->\r\n                    <div class=\"d-grid gap-2 mt-4\">\r\n                      <b-button block variant=\"primary\" @click=\"useSubmit()\"><i\r\n                          class=\"fa-regular fa-circle-check\"></i> 등록\r\n                      </b-button>\r\n                    </div>\r\n                  </b-form>\r\n\r\n                </b-form>\r\n              </b-col>\r\n            </b-row>\r\n          </b-card-body>\r\n        </b-card>\r\n      </b-col>\r\n    </b-row>\r\n  </b-container>\r\n</template>","import script from \"./CommunityForm.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./CommunityForm.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import {ref} from 'vue';\r\nimport router from \"@/router/router\";\r\nimport ErrorType from \"@/composable/response/ErrorType\";\r\nimport {useRefreshTokenAndRetry} from \"@/composable/authentication/refreshTokenAndRetry\";\r\n\r\n/**\r\n * 게시글 작성 폼을 관리하는 컴포저블\r\n *\r\n * @param {string} formDataName - 폼 데이터의 이름\r\n * @param {Function} savePostFunction - 게시글을 저장하는 서비스 메서드\r\n * @returns {object} 게시글 작성 폼 관련 함수와 상태를 포함한 객체\r\n */\r\nexport function useSavePostSubmit(formDataName, savePostFunction) {\r\n    const submitError = ref(null)\r\n\r\n    const post = ref({category: null});\r\n\r\n    /**\r\n     * 게시글 작성 폼을 서버에 제출하는 함수\r\n     */\r\n    async function useSubmit() {\r\n        try {\r\n            const response = await savePostFunction(new Blob([JSON.stringify(post.value)], {type: 'application/json'}));\r\n            await router.push(response.headers.location.replace(\"/api\", \"\"));\r\n        } catch (error) {\r\n            if (error.response?.data?.errorCode === ErrorType.EXPIRED_ACCESS_TOKEN) {\r\n                await useRefreshTokenAndRetry(() => useSubmit());\r\n                return;\r\n            }\r\n            if (error.response?.data?.errorCode === ErrorType.UNPROCESSABLE_ENTITY) {\r\n                submitError.value = error.response.data.message;\r\n                return;\r\n            }\r\n            return Promise.reject(error);\r\n        }\r\n    }\r\n\r\n    return {\r\n        post,\r\n        submitError,\r\n        useSubmit\r\n    };\r\n}\r\n","<script setup>\r\nimport PostFormHeader from \"@/components/common/PostFormHeader.vue\";\r\nimport ErrorType from \"@/composable/response/ErrorType\";\r\nimport {useRefreshTokenAndRetry} from \"@/composable/authentication/refreshTokenAndRetry\";\r\nimport AuthenticationService from \"@/service/AuthenticationService\";\r\nimport {useFindSubCodeGroup} from \"@/composable/postGroup/findSubCodeGroup\";\r\nimport {store} from \"@/store\";\r\nimport {PostGroup} from \"@/composable/postGroup/PostGroup\";\r\nimport {useSavePostSubmit} from \"@/composable/submitForm/savePostSubmit\";\r\nimport PostService from \"@/service/PostService\";\r\nimport ValidationError from \"@/components/common/ValidationError.vue\";\r\n\r\n// 문의 게시글의 토픽 하위 코드 그룹 가져오기\r\nconst subCodeGroup = useFindSubCodeGroup(store.categories, PostGroup.NOTICE);\r\n\r\n// useSavePostSubmit 커스텀 훅을 사용하여 게시글 저장에 필요한 데이터와 함수 가져오기\r\nconst {post, submitError, useSubmit} = useSavePostSubmit(\"notice\", PostService.saveNotice);\r\n\r\n// 상단 고정 설정 초기값을 false로 설정\r\npost.value.pinned = false;\r\n\r\n/**\r\n * 사용자의 매니저 여부를 확인하는 함수\r\n */\r\nconst isManager = async () => {\r\n  try {\r\n    await AuthenticationService.isManager();\r\n  } catch (error) {\r\n    console.log(error);\r\n    if (error.response?.data?.errorCode === ErrorType.EXPIRED_ACCESS_TOKEN) {\r\n      // 만료된 액세스 토큰일 경우 토큰 갱신 후 재시도\r\n      await useRefreshTokenAndRetry(() => isManager());\r\n    }\r\n  }\r\n};\r\n\r\n// 컴포넌트가 마운트되기 전에 매니저 여부를 확인하는 함수 호출\r\nisManager();\r\n</script>\r\n\r\n<template>\r\n  <!-- 게시글 작성 헤더 컴포넌트 PostFormHeader 사용 -->\r\n  <PostFormHeader :routeNameForPush=\"'Notices'\"/>\r\n  <b-container>\r\n    <b-row>\r\n      <b-col>\r\n        <b-card class=\"mb-4\">\r\n          <b-card-body>\r\n            <!-- 게시글 작성 폼 -->\r\n            <h3 class=\"h6 mb-4\"></h3>\r\n            <b-row>\r\n              <b-col>\r\n                <b-form>\r\n                  <!-- 상단 고정 설정 체크박스 -->\r\n                  <div class=\"mb-3\">\r\n                    <b-form-checkbox v-model=\"post.pinned\" switch size=\"lg\">상단 고정</b-form-checkbox>\r\n                  </div>\r\n                  <!-- 상단 고정 설정 오류가 있을 경우, 오류 메시지 출력 -->\r\n                  <template v-if=\"submitError && submitError.pinned\">\r\n                    <ValidationError :message=\"submitError.pinned\"/>\r\n                  </template>\r\n\r\n                  <!-- 토픽 선택 폼 -->\r\n                  <b-form-group label=\"토픽\">\r\n                    <b-form-select v-model=\"post.category\">\r\n                      <b-form-select-option :value=\"null\" selected>모든 토픽</b-form-select-option>\r\n                      <b-form-select-option v-for=\"category in subCodeGroup\" :key=\"category.subCode\" :value=\"category.subCode\">\r\n                        {{ category.subCodeTitle }}\r\n                      </b-form-select-option>\r\n                    </b-form-select>\r\n                  </b-form-group>\r\n                  <!-- 토픽 선택 오류가 있을 경우, 오류 메시지 출력 -->\r\n                  <template v-if=\"submitError && submitError.category\">\r\n                    <ValidationError :message=\"submitError.category\"/>\r\n                  </template>\r\n\r\n                  <!-- 제목 입력 폼 -->\r\n                  <b-form>\r\n                    <b-form-group label=\"제목\">\r\n                      <b-form-input\r\n                          v-model=\"post.title\"\r\n                          id=\"titleInput\"\r\n                          placeholder=\"4글자 이상, 100글자 이하여야 합니다\"\r\n                          required\r\n                          minlength=\"4\"\r\n                          maxlength=\"100\"\r\n                      ></b-form-input>\r\n                    </b-form-group>\r\n                    <!-- 제목 입력 오류가 있을 경우, 오류 메시지 출력 -->\r\n                    <template v-if=\"submitError && submitError.title\">\r\n                      <ValidationError :message=\"submitError.title\"/>\r\n                    </template>\r\n\r\n                    <!-- 내용 입력 폼 -->\r\n                    <b-form-group label=\"내용\">\r\n                      <b-form-textarea\r\n                          v-model=\"post.content\"\r\n                          id=\"contentTextarea\"\r\n                          placeholder=\"4글자 이상, 2000글자 이하여야 합니다\"\r\n                          required\r\n                          minlength=\"4\"\r\n                          maxlength=\"2000\"\r\n                          style=\"height: 300px;\"\r\n                      ></b-form-textarea>\r\n                    </b-form-group>\r\n                    <!-- 내용 입력 오류가 있을 경우, 오류 메시지 출력 -->\r\n                    <template v-if=\"submitError && submitError.content\">\r\n                      <ValidationError :message=\"submitError.content\"/>\r\n                    </template>\r\n\r\n                    <!-- 등록 버튼 -->\r\n                    <div class=\"d-grid gap-2 mt-4\">\r\n                      <b-button block variant=\"primary\" @click=\"useSubmit()\"><i\r\n                          class=\"fa-regular fa-circle-check\"></i> 등록\r\n                      </b-button>\r\n                    </div>\r\n                  </b-form>\r\n\r\n                </b-form>\r\n              </b-col>\r\n            </b-row>\r\n          </b-card-body>\r\n        </b-card>\r\n      </b-col>\r\n    </b-row>\r\n  </b-container>\r\n</template>","import script from \"./NoticeForm.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./NoticeForm.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\r\nimport PostFormHeader from \"@/components/common/PostFormHeader.vue\";\r\nimport {useFindSubCodeGroup} from \"@/composable/postGroup/findSubCodeGroup\";\r\nimport {store} from \"@/store\";\r\nimport {PostGroup} from \"@/composable/postGroup/PostGroup\";\r\nimport ValidationError from \"@/components/common/ValidationError.vue\";\r\nimport {useSavePostSubmitWithAttachments} from \"@/composable/submitForm/savePostSubmitWithAttachments\";\r\nimport {AttachmentType} from \"@/composable/attachment/constants/AttachmentType\";\r\nimport PostService from \"@/service/PostService\";\r\nimport {ref} from \"vue\";\r\n\r\n// 토픽 하위 코드 그룹 가져오기\r\nconst communitySubCodeGroup = useFindSubCodeGroup(store.categories, PostGroup.PHOTO);\r\n\r\n// useSavePostSubmitWithAttachments 커스텀 훅을 사용하여 게시글 저장에 필요한 데이터와 함수 가져오기\r\nconst {post, formData, submitError, attachmentUploadErrors, hasAttachmentUploadErrors,\r\n  useHandleAttachment, useSubmit}\r\n    = useSavePostSubmitWithAttachments(AttachmentType.IMAGE,\r\n    \"photo\",  PostService.savePhoto)\r\n\r\n// 대표 이미지 파일을 담는 반응성 객체\r\nconst selectedFile = ref(null);\r\n\r\n/**\r\n * 대표 이미지 변경 처리 함수\r\n *\r\n * @param {Event} event - 파일 선택 이벤트\r\n */\r\nconst useHandleThumbnail = (event) => {\r\n  if (hasAttachmentUploadErrors(event.target.files)) {\r\n    selectedFile.value = null;\r\n    event.target.value = \"\";\r\n    return;\r\n  }\r\n\r\n  formData.value.delete('thumbnail');\r\n  for (const file of event.target.files) {\r\n    formData.value.append('attachments', file)\r\n  }\r\n\r\n  const fileInput = event.target;\r\n  if (fileInput.files && fileInput.files.length > 0) {\r\n    const file = fileInput.files[0];\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      selectedFile.value = {\r\n        file: file,\r\n        preview: reader.result\r\n      };\r\n    };\r\n    reader.readAsDataURL(file);\r\n  } else {\r\n    selectedFile.value = null;\r\n  }\r\n};\r\n\r\n</script>\r\n<template>\r\n  <!-- 게시글 작성 헤더 컴포넌트 PostFormHeader 사용 -->\r\n  <PostFormHeader :routeNameForPush=\"'Photos'\"/>\r\n  <b-container>\r\n    <b-row>\r\n      <b-col>\r\n        <b-card class=\"mb-4\">\r\n          <b-card-body>\r\n            <h3 class=\"h6 mb-4\"></h3>\r\n            <b-row>\r\n              <b-col>\r\n                <b-form>\r\n                  <!-- 토픽 선택 폼 -->\r\n                  <b-form-group label=\"토픽\">\r\n                    <b-form-select v-model=\"post.category\">\r\n                      <b-form-select-option :value=\"null\" selected>모든 토픽</b-form-select-option>\r\n                      <b-form-select-option v-for=\"category in communitySubCodeGroup\" :key=\"category.subCode\"\r\n                                            :value=\"category.subCode\">\r\n                        {{ category.subCodeTitle }}\r\n                      </b-form-select-option>\r\n                    </b-form-select>\r\n                  </b-form-group>\r\n                  <!-- 토픽 선택 오류가 있을 경우, 오류 메시지 출력 -->\r\n                  <template v-if=\"submitError&&submitError.category\">\r\n                    <ValidationError :message=\"submitError.category\"/>\r\n                  </template>\r\n\r\n                  <!-- 제목 입력 폼 -->\r\n                  <b-form>\r\n                    <b-form-group label=\"제목\">\r\n                      <b-form-input\r\n                          v-model=\"post.title\"\r\n                          id=\"titleInput\"\r\n                          placeholder=\"4글자 이상, 100글자 이하여야 합니다\"\r\n                          required\r\n                          minlength=\"4\"\r\n                          maxlength=\"100\"\r\n                      ></b-form-input>\r\n                    </b-form-group>\r\n                    <!-- 제목 입력 오류가 있을 경우, 오류 메시지 출력 -->\r\n                    <template v-if=\"submitError&&submitError.title\">\r\n                      <ValidationError :message=\"submitError.title\"/>\r\n                    </template>\r\n\r\n                    <!-- 내용 입력 폼 -->\r\n                    <b-form-group label=\"내용\">\r\n                      <b-form-textarea\r\n                          v-model=\"post.content\"\r\n                          id=\"contentTextarea\"\r\n                          placeholder=\"4글자 이상, 2000글자 이하여야 합니다\"\r\n                          required\r\n                          minlength=\"4\"\r\n                          maxlength=\"2000\"\r\n                          style=\"height: 300px;\"\r\n                      ></b-form-textarea>\r\n                    </b-form-group>\r\n                    <!-- 내용 입력 오류가 있을 경우, 오류 메시지 출력 -->\r\n                    <template v-if=\"submitError&&submitError.content\">\r\n                      <ValidationError :message=\"submitError.content\"/>\r\n                    </template>\r\n\r\n                    <!-- 대표 이미지 업로드 -->\r\n                    <div class=\"mb-5\">\r\n                      <label for=\"formFile\" class=\"form-label\">대표 이미지 업로드</label>\r\n                      <input class=\"form-control\" type=\"file\" id=\"formFile\" ref=\"fileInput\"\r\n                             @change=\"useHandleThumbnail\">\r\n                    </div>\r\n\r\n                    <!-- 파일 업로드 -->\r\n                    <div class=\"mb-5\">\r\n                      <label for=\"formFileMultiple\" class=\"form-label\">이미지 업로드</label>\r\n                      <input class=\"form-control\" type=\"file\" id=\"formFileMultiple\" multiple ref=\"fileInput\"\r\n                             @change=\"useHandleAttachment\">\r\n                    </div>\r\n                    <!-- 파일 업로드 오류가 있을 경우, 오류 메시지 출력 -->\r\n                    <template v-if=\"attachmentUploadErrors.hasUnsupportedExtensions\">\r\n                      <ValidationError :message=\"`확장자 jpg, gif, png만 가능합니다.`\"/>\r\n                    </template>\r\n                    <template v-if=\"attachmentUploadErrors.isMaxUploadCountExceeded\">\r\n                      <ValidationError :message=\"`최대 20개의 파일까지 업로드 가능합니다.`\"/>\r\n                    </template>\r\n                    <template v-if=\"attachmentUploadErrors.isSizeExceeded\">\r\n                      <ValidationError :message=\"`파일의 크기는 최대 1,024,000 byte 입니다.`\"/>\r\n                    </template>\r\n\r\n                    <!-- 대표 이미지 미리보기 -->\r\n                    <div class=\"mb-5\">\r\n                      <label for=\"formFile\" class=\"form-label\">대표 이미지 미리보기</label>\r\n                      <b-img v-if=\"selectedFile\" :src=\"selectedFile.preview\"\r\n                             fluid-grow style=\"border-radius: 10px;\" alt=\"Fluid-grow image\"></b-img>\r\n\r\n                      <div v-else class=\"bg-white py-1\">\r\n                        <b-skeleton class=\"img-fluid rounded mx-auto d-block w-100\" height=\"20rem\"></b-skeleton>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div class=\"d-grid gap-2 mt-4\">\r\n                      <!-- 등록 버튼 클릭 시, useSubmit 함수 호출 -->\r\n                      <b-button block variant=\"primary\" @click=\"useSubmit()\"><i\r\n                          class=\"fa-regular fa-circle-check\"></i> 등록\r\n                      </b-button>\r\n                    </div>\r\n                  </b-form>\r\n                </b-form>\r\n              </b-col>\r\n            </b-row>\r\n          </b-card-body>\r\n        </b-card>\r\n      </b-col>\r\n    </b-row>\r\n  </b-container>\r\n</template>","import script from \"./PhotoForm.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./PhotoForm.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\r\nimport PostFormHeader from \"@/components/common/PostFormHeader.vue\";\r\nimport {useFindSubCodeGroup} from \"@/composable/postGroup/findSubCodeGroup\";\r\nimport {store} from \"@/store\";\r\nimport {PostGroup} from \"@/composable/postGroup/PostGroup\";\r\nimport PostService from \"@/service/PostService\";\r\nimport ValidationError from \"@/components/common/ValidationError.vue\";\r\nimport ErrorType from \"@/composable/response/ErrorType\";\r\nimport {useSavePostSubmit} from \"@/composable/submitForm/savePostSubmit\";\r\n\r\n// 문의 게시글의 토픽 하위 코드 그룹 가져오기\r\nconst subCodeGroup = useFindSubCodeGroup(store.categories, PostGroup.INQUIRY);\r\n\r\n// useSavePostSubmit 커스텀 훅을 사용하여 게시글 저장에 필요한 데이터와 함수 가져오기\r\nconst {post, submitError, useSubmit}\r\n    = useSavePostSubmit(\"inquiry\", PostService.saveInquiry)\r\n\r\n// 게시글 객체의 비밀글 설정 초기값을 false로 설정\r\npost.value.secret = false;\r\n\r\n/**\r\n * 게시글을 등록하는 함수\r\n */\r\nasync function handleSubmit() {\r\n  try {\r\n    await useSubmit();\r\n  } catch (error) {\r\n    if (error.response?.data?.errorCode === ErrorType.INVALID_SECRET) {\r\n      submitError.value.password = \"비밀번호를 설정하셔야 합니다.\";\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<template>\r\n  <!-- 게시글 작성 헤더 컴포넌트 PostFormHeader 사용 -->\r\n  <PostFormHeader :routeNameForPush=\"'Inquiries'\"/>\r\n  <b-container>\r\n    <b-row>\r\n      <b-col>\r\n        <b-card class=\"mb-4\">\r\n          <b-card-body>\r\n            <h3 class=\"h6 mb-4\"></h3>\r\n            <b-row>\r\n              <b-col>\r\n                <b-form>\r\n                  <!-- 비밀글 설정 체크박스 -->\r\n                  <div class=\"mb-3\">\r\n                    <b-form-checkbox v-model=\"post.secret\" switch size=\"lg\">비밀글 설정</b-form-checkbox>\r\n                  </div>\r\n                  <!-- 비밀글 설정 오류가 있을 경우, 오류 메시지 출력 -->\r\n                  <template v-if=\"submitError&&submitError.secret\">\r\n                    <ValidationError :message=\"submitError.secret\"/>\r\n                  </template>\r\n\r\n                  <!-- 비밀글 설정이 true일 경우, 비밀번호 입력 폼 표시 -->\r\n                  <template v-if=\"post.secret\">\r\n                    <b-form-group label=\"비밀글 비밀번호\">\r\n                      <b-form-input\r\n                          v-model=\"post.password\"\r\n                          id=\"input-password\"\r\n                          type=\"password\"\r\n                          placeholder=\"4글자 이상, 15글자 이하여야 합니다\"\r\n                          minlength=\"4\"\r\n                          maxlength=\"15\"\r\n                      ></b-form-input>\r\n                    </b-form-group>\r\n                  </template>\r\n                  <!-- 비밀번호 설정 오류가 있을 경우, 오류 메시지 출력 -->\r\n                  <template v-if=\"submitError&&submitError.password\">\r\n                    <ValidationError :message=\"submitError.password\"/>\r\n                  </template>\r\n\r\n                  <!-- 토픽 선택 폼 -->\r\n                  <b-form-group label=\"토픽\">\r\n                    <b-form-select v-model=\"post.category\">\r\n                      <b-form-select-option :value=\"null\" selected>모든 토픽</b-form-select-option>\r\n                      <b-form-select-option v-for=\"category in subCodeGroup\" :key=\"category.subCode\" :value=\"category.subCode\">\r\n                        {{ category.subCodeTitle }}\r\n                      </b-form-select-option>\r\n                    </b-form-select>\r\n                  </b-form-group>\r\n                  <!-- 토픽 선택 오류가 있을 경우, 오류 메시지 출력 -->\r\n                  <template v-if=\"submitError&&submitError.category\">\r\n                    <ValidationError :message=\"submitError.category\"/>\r\n                  </template>\r\n\r\n                  <!-- 제목 입력 폼 -->\r\n                  <b-form>\r\n                    <b-form-group label=\"제목\">\r\n                      <b-form-input\r\n                          v-model=\"post.title\"\r\n                          id=\"titleInput\"\r\n                          placeholder=\"4글자 이상, 100글자 이하여야 합니다\"\r\n                          required\r\n                          minlength=\"4\"\r\n                          maxlength=\"100\"\r\n                      ></b-form-input>\r\n                    </b-form-group>\r\n                    <!-- 제목 입력 오류가 있을 경우, 오류 메시지 출력 -->\r\n                    <template v-if=\"submitError&&submitError.title\">\r\n                      <ValidationError :message=\"submitError.title\"/>\r\n                    </template>\r\n\r\n                    <!-- 내용 입력 폼 -->\r\n                    <b-form-group label=\"내용\">\r\n                      <b-form-textarea\r\n                          v-model=\"post.content\"\r\n                          id=\"contentTextarea\"\r\n                          placeholder=\"4글자 이상, 2000글자 이하여야 합니다\"\r\n                          required\r\n                          minlength=\"4\"\r\n                          maxlength=\"2000\"\r\n                          style=\"height: 300px;\"\r\n                      ></b-form-textarea>\r\n                    </b-form-group>\r\n                    <!-- 내용 입력 오류가 있을 경우, 오류 메시지 출력 -->\r\n                    <template v-if=\"submitError&&submitError.content\">\r\n                      <ValidationError :message=\"submitError.content\"/>\r\n                    </template>\r\n\r\n                    <!-- 등록 버튼 -->\r\n                    <div class=\"d-grid gap-2 mt-4\">\r\n                      <b-button block variant=\"primary\" @click=\"handleSubmit()\"><i\r\n                          class=\"fa-regular fa-circle-check\"></i> 등록\r\n                      </b-button>\r\n                    </div>\r\n                  </b-form>\r\n\r\n                </b-form>\r\n              </b-col>\r\n            </b-row>\r\n          </b-card-body>\r\n        </b-card>\r\n      </b-col>\r\n    </b-row>\r\n  </b-container>\r\n</template>","import script from \"./InquiryForm.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./InquiryForm.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import {computed, ref, watch} from 'vue';\r\nimport {useValidateAttachmentsExtension} from \"@/composable/attachment/validateAttachmentsExtension\";\r\nimport {useValidateAttachmentSize} from \"@/composable/attachment/validateAttachmentSize\";\r\nimport {useValidateAttachmentUploadCount} from \"@/composable/attachment/validateAttachmentUploadCount\";\r\nimport router from \"@/router/router\";\r\nimport ErrorType from \"@/composable/response/ErrorType\";\r\nimport {useRefreshTokenAndRetry} from \"@/composable/authentication/refreshTokenAndRetry\";\r\n\r\n/**\r\n * 게시글 수정 폼을 관리하는 컴포저블\r\n *\r\n * @param {object} attachmentType - AttachmentType 객체 (파일 업로드에 필요한 정보를 가진 객체)\r\n * @param {string} formDataName - 폼 데이터의 이름\r\n * @param {Function} savePostFunction - 게시글을 저장하는 서비스 메서드\r\n * @returns {object} 게시글 작성 폼 관련 함수와 상태를 포함한 객체\r\n */\r\nexport function useEditPostSubmitWithAttachments(attachmentType, formDataName, savePostFunction) {\r\n    const submitError = ref(null)\r\n\r\n    const post = ref({category: null});\r\n\r\n    const formData = ref(new FormData());\r\n\r\n    // 삭제할 첨부파일 인덱스를 저장하는 배열\r\n    const selectedDeleteAttachmentIndexes = ref([]);\r\n\r\n    const attachmentUploadErrors = ref({\r\n        hasUnsupportedExtensions: false,\r\n        isSizeExceeded: false,\r\n        isMaxUploadCountExceeded: false\r\n    });\r\n\r\n    /**\r\n     * 업로드된 파일들의 유효성 검사 결과를 확인하여 에러 여부를 반환하는 함수\r\n     *\r\n     * @param {FileList} files - 업로드된 파일들의 FileList 객체\r\n     * @returns {boolean} 업로드된 파일들의 유효성 검사 결과에 따른 에러 여부 (true: 에러 발생, false: 에러 없음)\r\n     */\r\n    function hasAttachmentUploadErrors(files) {\r\n        attachmentUploadErrors.value.hasUnsupportedExtensions = useValidateAttachmentsExtension(files, attachmentType.allowedExtensions);\r\n        attachmentUploadErrors.value.isSizeExceeded = useValidateAttachmentSize(files, attachmentType.maxUploadSize);\r\n        attachmentUploadErrors.value.isMaxUploadCountExceeded = useValidateAttachmentUploadCount(files, attachmentType.maxUploadCount);\r\n\r\n        return (\r\n            attachmentUploadErrors.value.hasUnsupportedExtensions ||\r\n            attachmentUploadErrors.value.isSizeExceeded ||\r\n            attachmentUploadErrors.value.isMaxUploadCountExceeded\r\n        );\r\n    }\r\n\r\n    /**\r\n     * 파일 업로드 핸들러 함수\r\n     *\r\n     * @param {Event} event - 파일 업로드 이벤트 객체\r\n     */\r\n    const useHandleAttachment = (event) => {\r\n        if (hasAttachmentUploadErrors(event.target.files)) {\r\n            event.target.value = \"\";\r\n            return;\r\n        }\r\n\r\n        formData.value.delete('attachments');\r\n        for (const file of event.target.files) {\r\n            formData.value.append('attachments', file)\r\n        }\r\n    };\r\n\r\n    /**\r\n     * 삭제할 첨부파일 인덱스를 배열에 추가\r\n     *\r\n     * @param {number} attachmentIdx - 삭제할 파일의 인덱스\r\n     */\r\n    function useDeleteAttachment(attachmentIdx) {\r\n        selectedDeleteAttachmentIndexes.value.push(attachmentIdx);\r\n    }\r\n\r\n    /**\r\n     * 게시글의 이전 첨부파일 인덱스들을 계산하는 반응성 컴퓨티드 프로퍼티\r\n     *\r\n     * @type {ComputedRef<number[]>} 이전 첨부파일 인덱스들을 담은 ComputedRef 객체\r\n     */\r\n    const notDeletedIndexes = computed(() => {\r\n        return post.value.attachments.map((attachment) => attachment.attachmentIdx)\r\n            .filter((idx) => !selectedDeleteAttachmentIndexes.value.includes(idx))\r\n    });\r\n\r\n    /**\r\n     * 첨부파일 인덱스가 삭제된 상태인지 확인하는 함수\r\n     *\r\n     * @param {number} attachmentIdx - 첨부파일 인덱스\r\n     * @returns {boolean} 첨부파일 인덱스가 삭제된 상태인지 여부 (true: 삭제된 상태, false: 삭제되지 않은 상태)\r\n     */\r\n    function isAttachmentIdxDeleted(attachmentIdx) {\r\n        return selectedDeleteAttachmentIndexes.value.indexOf(attachmentIdx) !== -1;\r\n    }\r\n\r\n    /**\r\n     * 서버로 전송할 폼 데이터 객체를 반환하는 함수\r\n     *\r\n     * @returns {FormData} 폼 데이터 객체\r\n     */\r\n    function getSubmitFormData() {\r\n        formData.value.delete('notDeletedIndexes');\r\n        formData.value.append('notDeletedIndexes', notDeletedIndexes.value);\r\n\r\n        formData.value.delete(formDataName);\r\n        formData.value.append(formDataName, new Blob([JSON.stringify(post.value)], {type: 'application/json'}));\r\n        return formData.value;\r\n    }\r\n\r\n    /**\r\n     * 게시글 작성 폼을 서버에 제출하는 함수\r\n     *\r\n     * @param postIdx 게시글 번호\r\n     * @returns {Promise<void>}\r\n     */\r\n    async function useSubmit(postIdx) {\r\n        try {\r\n            const response = await savePostFunction(postIdx, getSubmitFormData());\r\n            await router.push(response.headers.location.replace(\"/api\", \"\"));\r\n        } catch (error) {\r\n            if (error.response?.data?.errorCode === ErrorType.EXPIRED_ACCESS_TOKEN) {\r\n                await useRefreshTokenAndRetry(() => useSubmit());\r\n            }\r\n            if (error.response?.data?.errorCode === ErrorType.UNPROCESSABLE_ENTITY) {\r\n                submitError.value = error.response.data.message;\r\n            }\r\n            return Promise.reject(error)\r\n        }\r\n    }\r\n\r\n    return {\r\n        post,\r\n        selectedDeleteAttachmentIndexes,\r\n        isAttachmentIdxDeleted,\r\n        formData,\r\n        submitError,\r\n        attachmentUploadErrors,\r\n        hasAttachmentUploadErrors,\r\n        useHandleAttachment,\r\n        useDeleteAttachment,\r\n        useSubmit\r\n    };\r\n}\r\n","<script setup>\r\nimport BackgroundBanner from \"@/components/common/BackgroundBanner.vue\";\r\nimport PostFormHeader from \"@/components/common/PostFormHeader.vue\";\r\nimport {ref} from \"vue\";\r\nimport PostService from \"@/service/PostService\";\r\nimport ErrorType from \"@/composable/response/ErrorType\";\r\nimport {useRefreshTokenAndRetry} from \"@/composable/authentication/refreshTokenAndRetry\";\r\nimport PostSkeleton from \"@/components/skeleton/PostSkeleton.vue\";\r\nimport BackgroundBannerSkeleton from \"@/components/skeleton/BackgroundBannerSkeleton.vue\";\r\nimport {useGetIconTagByExtension} from \"@/composable/attachment/getIconTagByExtension\";\r\nimport {useFormatBytes} from \"@/composable/attachment/formatBytes\";\r\nimport {AttachmentType} from \"@/composable/attachment/constants/AttachmentType\";\r\nimport {useEditPostSubmitWithAttachments,} from \"@/composable/submitForm/editPostSubmitWithAttachments\";\r\nimport {useFindSubCodeGroup} from \"@/composable/postGroup/findSubCodeGroup\";\r\nimport {store} from \"@/store\";\r\nimport {PostGroup} from \"@/composable/postGroup/PostGroup\";\r\nimport ValidationError from \"@/components/common/ValidationError.vue\";\r\n\r\n// 게시글의 하위 코드 그룹 찾기\r\nconst communitySubCodeGroup = useFindSubCodeGroup(store.categories, PostGroup.COMMUNITY);\r\n\r\n// 컴포넌트에 전달된 postIdx prop 정의\r\nconst props = defineProps({\r\n  postIdx: {\r\n    type: String,\r\n    default: '',\r\n  },\r\n});\r\n\r\n/**\r\n * 커뮤니티 게시글을 가져오는 함수\r\n *\r\n * @param {String} postIdx - 게시글 번호\r\n * @returns {Promise<void>}\r\n */\r\nasync function getEditCommunity(postIdx) {\r\n  try {\r\n    const response = await PostService.fetchEditCommunity(postIdx);\r\n    post.value = response?.data;\r\n  } catch (error) {\r\n    console.log(error);\r\n    if (error.response?.data?.errorCode === ErrorType.EXPIRED_ACCESS_TOKEN) {\r\n      await useRefreshTokenAndRetry(() => getEditCommunity(postIdx));\r\n    }\r\n  }\r\n}\r\n\r\n// 컴포넌트가 마운트되면 게시글 가져오기 실행\r\ngetEditCommunity(props.postIdx);\r\n\r\n// 컴포넌트 내에서 사용할 변수와 함수를 가져오는 커스텀 훅 사용\r\nconst {\r\n  post,\r\n  submitError,\r\n  selectedDeleteAttachmentIndexes,\r\n  isAttachmentIdxDeleted,\r\n  attachmentUploadErrors,\r\n  useHandleAttachment,\r\n  useDeleteAttachment,\r\n  useSubmit,\r\n} = useEditPostSubmitWithAttachments(\r\n    AttachmentType.FILE,\r\n    \"community\",\r\n    PostService.editCommunity\r\n);\r\n\r\n// 요청 중인지 여부를 저장하는 ref 변수\r\nconst isRequesting = ref(false);\r\n\r\n/**\r\n * 게시글 수정 제출을 처리하는 함수\r\n *\r\n * 중복 요청 방지와 공통 예외 처리 외 컴포넌트 특화된 에러 처리 로직\r\n *\r\n * @param {String} postIdx - 게시글 번호\r\n * @returns {Promise<void>}\r\n */\r\nasync function handleEditSubmit(postIdx) {\r\n  if (isRequesting.value) return;\r\n  isRequesting.value = true;\r\n\r\n  try {\r\n    await useSubmit(postIdx);\r\n    isRequesting.value = false;\r\n  } catch (error) {\r\n    isRequesting.value = false;\r\n    console.error('글 수정 실패:', error);\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<template>\r\n  <template v-if=\"post\">\r\n    <!-- PostFormHeader 컴포넌트 사용 -->\r\n    <PostFormHeader :routeNameForPush=\"'Communities'\"/>\r\n\r\n    <!-- 게시글 편집 폼을 감싸는 컨테이너 -->\r\n    <b-container>\r\n      <b-row>\r\n        <b-col>\r\n          <!-- 게시글 수정을 위한 카드 컴포넌트 -->\r\n          <b-card class=\"mb-4\">\r\n            <b-card-body>\r\n              <h3 class=\"h6 mb-4\"></h3>\r\n              <b-row>\r\n                <b-col>\r\n                  <!-- 게시글 수정 폼 -->\r\n                  <b-form>\r\n                    <b-form-group label=\"토픽\">\r\n                      <!-- 토픽 선택을 위한 셀렉트 박스 -->\r\n                      <b-form-select v-model=\"post.category\">\r\n                        <b-form-select-option :value=\"null\" selected>모든 토픽</b-form-select-option>\r\n                        <b-form-select-option v-for=\"category in communitySubCodeGroup\" :key=\"category.subCode\"\r\n                                              :value=\"category.subCode\">\r\n                          {{ category.subCodeTitle }}\r\n                        </b-form-select-option>\r\n                      </b-form-select>\r\n                    </b-form-group>\r\n                    <template v-if=\"submitError && submitError.category\">\r\n                      <!-- 카테고리 에러 메시지 출력 -->\r\n                      <ValidationError :message=\"submitError.category\"/>\r\n                    </template>\r\n\r\n                    <!-- 제목 입력 폼 -->\r\n                    <b-form>\r\n                      <b-form-group label=\"제목\">\r\n                        <b-form-input\r\n                            v-model=\"post.title\"\r\n                            id=\"titleInput\"\r\n                            placeholder=\"4글자 이상, 100글자 이하여야 합니다\"\r\n                            required\r\n                            minlength=\"4\"\r\n                            maxlength=\"100\"\r\n                        ></b-form-input>\r\n                      </b-form-group>\r\n                      <template v-if=\"submitError && submitError.title\">\r\n                        <!-- 제목 에러 메시지 출력 -->\r\n                        <ValidationError :message=\"submitError.title\"/>\r\n                      </template>\r\n\r\n                      <!-- 내용 입력 폼 -->\r\n                      <b-form-group label=\"내용\">\r\n                        <b-form-textarea\r\n                            v-model=\"post.content\"\r\n                            id=\"contentTextarea\"\r\n                            placeholder=\"4글자 이상, 2000글자 이하여야 합니다\"\r\n                            required\r\n                            minlength=\"4\"\r\n                            maxlength=\"2000\"\r\n                            style=\"height: 300px;\"\r\n                        ></b-form-textarea>\r\n                      </b-form-group>\r\n                      <template v-if=\"submitError && submitError.content\">\r\n                        <!-- 내용 에러 메시지 출력 -->\r\n                        <ValidationError :message=\"submitError.content\"/>\r\n                      </template>\r\n\r\n                      <!-- 기존 업로드된 파일 목록 -->\r\n                      <div class=\"mb-3\" v-if=\"post.attachments && post.attachments.length > 0\">\r\n                        <b-badge class=\"mb-3\" variant=\"danger\">이미지 삭제</b-badge>\r\n                        <ul class=\"list-group list-group-light\">\r\n\r\n\r\n                          <div v-for=\"(attachment, attachmentIdx) in post.attachments\" :key=\"attachmentIdx\"\r\n                               class=\"list-group-item list-group-item-action px-3 border-1 ripple d-flex align-items-center\">\r\n\r\n                            <!-- 파일 이름과 기타 내용들을 표시 -->\r\n                            <div class=\"flex-grow-1 text-decoration-none text-dark\" v-if=\"!isAttachmentIdxDeleted(attachment.attachmentIdx)\">\r\n                                    <span v-if=\"attachment.attachmentExtension\"\r\n                                          v-html=\"useGetIconTagByExtension(attachment.attachmentExtension)\"></span>&nbsp;\r\n                              <a :href=\"`/attachments/${attachment.attachmentIdx}`\" class=\"text-decoration-none text-dark\">\r\n                                {{ attachment.originalAttachmentName }} ({{ useFormatBytes(attachment.attachmentSize) }})\r\n                              </a>\r\n                            </div>\r\n                            <!-- 삭제된 파일 이름 표시 -->\r\n                            <div class=\"flex-grow-1 text-decoration-line-through\" v-else style=\"color: #ff0000;\">\r\n                              <span v-if=\"attachment.attachmentExtension\" v-html=\"useGetIconTagByExtension(attachment.attachmentExtension)\"></span>&nbsp;\r\n                              {{ attachment.originalAttachmentName }} ({{ useFormatBytes(attachment.attachmentSize) }})\r\n                            </div>\r\n\r\n                            <!-- 파일 삭제 버튼 -->\r\n                            <button type=\"button\" class=\"btn-close\" aria-label=\"Delete\"\r\n                                    @click=\"useDeleteAttachment(attachment.attachmentIdx)\"></button>\r\n                          </div>\r\n\r\n                        </ul>\r\n                      </div>\r\n\r\n                      <!-- 파일 업로드 입력 폼 -->\r\n                      <div class=\"mb-5\">\r\n                        <label for=\"formFileMultiple\" class=\"form-label\">파일 업로드</label>\r\n                        <input @change=\"useHandleAttachment\" class=\"form-control\" type=\"file\"\r\n                               id=\"formFileMultiple\" multiple ref=\"fileInput\">\r\n                      </div>\r\n                      <template v-if=\"attachmentUploadErrors.hasUnsupportedExtensions\">\r\n                        <!-- 파일 확장자 에러 메시지 출력 -->\r\n                        <ValidationError :message=\"`확장자 jpg, gif, png, zip만 업로드 가능합니다.`\"/>\r\n                      </template>\r\n                      <template v-if=\"attachmentUploadErrors.isMaxUploadCountExceeded\">\r\n                        <!-- 파일 업로드 개수 초과 에러 메시지 출력 -->\r\n                        <ValidationError :message=\"`최대 5개의 파일까지 업로드 가능합니다.`\"/>\r\n                      </template>\r\n                      <template v-if=\"attachmentUploadErrors.isSizeExceeded\">\r\n                        <!-- 파일 크기 초과 에러 메시지 출력 -->\r\n                        <ValidationError :message=\"`파일의 크기는 최대 2,048,000 byte 입니다.`\"/>\r\n                      </template>\r\n\r\n                      <!-- 수정 버튼 -->\r\n                      <div class=\"d-grid gap-2 mt-4\">\r\n                        <b-button block variant=\"primary\" @click=\"handleEditSubmit(postIdx)\"><i\r\n                            class=\"fa-regular fa-circle-check\"></i> 수정\r\n                        </b-button>\r\n                      </div>\r\n                    </b-form>\r\n\r\n                  </b-form>\r\n                </b-col>\r\n              </b-row>\r\n            </b-card-body>\r\n          </b-card>\r\n        </b-col>\r\n      </b-row>\r\n    </b-container>\r\n  </template>\r\n\r\n  <!-- 게시글 정보가 없을 경우 (로딩 중) -->\r\n  <template v-else>\r\n    <!-- 배경 배너 스켈레톤 컴포넌트 BackgroundBannerSkeleton 사용 -->\r\n    <BackgroundBannerSkeleton/>\r\n    <!-- 게시글 스켈레톤 컴포넌트 PostSkeleton 사용 -->\r\n    <PostSkeleton/>\r\n  </template>\r\n</template>\r\n","import script from \"./CommunityEdit.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./CommunityEdit.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\r\nimport {defineProps, ref} from \"vue\";\r\nimport {store} from \"@/store\";\r\nimport {useFindSubCodeGroup} from \"@/composable/postGroup/findSubCodeGroup\";\r\nimport {PostGroup} from \"@/composable/postGroup/PostGroup\";\r\n\r\nconst props = defineProps({\r\n  post: Object,\r\n});\r\n\r\nconst selectedTopic = ref(props.post?.category || null);\r\n\r\nconst communitySubCodeGroup = useFindSubCodeGroup(store.categories, PostGroup.NOTICE);\r\n\r\n</script>\r\n<template>\r\n  <b-container>\r\n    <b-row>\r\n      <b-col>\r\n        <b-card class=\"mb-4\">\r\n          <b-card-body>\r\n            <h3 class=\"h6 mb-4\"></h3>\r\n            <b-row>\r\n              <b-col>\r\n                <b-form>\r\n                  <b-form-group label=\"토픽\">\r\n                    <b-form-select v-model=\"selectedTopic\">\r\n                      <b-form-select-option :value=\"null\" selected>모든 토픽</b-form-select-option>\r\n                      <b-form-select-option v-for=\"category in communitySubCodeGroup\" :key=\"category.subCode\"\r\n                                            :value=\"category.subCode\">\r\n                        {{ category.subCodeTitle }}\r\n                      </b-form-select-option>\r\n                    </b-form-select>\r\n                  </b-form-group>\r\n                  <b-form>\r\n                    <b-form-group label=\"제목\">\r\n                      <b-form-input\r\n                          :model-value=\"props.post.title\"\r\n                          id=\"titleInput\"\r\n                          placeholder=\"4글자 이상, 100글자 이하여야 합니다\"\r\n                          required\r\n                          minlength=\"4\"\r\n                          maxlength=\"100\"\r\n                      ></b-form-input>\r\n                    </b-form-group>\r\n                    <b-form-group label=\"내용\">\r\n                      <b-form-textarea\r\n                          :model-value=\"props.post.content\"\r\n                          id=\"contentTextarea\"\r\n                          placeholder=\"4글자 이상, 2000글자 이하여야 합니다\"\r\n                          required\r\n                          minlength=\"4\"\r\n                          maxlength=\"2000\"\r\n                          style=\"height: 300px;\"\r\n                      ></b-form-textarea>\r\n                    </b-form-group>\r\n\r\n                    <div class=\"d-grid gap-2 mt-4\">\r\n                      <b-button block variant=\"primary\"><i\r\n                          class=\"fa-regular fa-circle-check\"></i> 수정\r\n                      </b-button>\r\n                    </div>\r\n                  </b-form>\r\n\r\n                </b-form>\r\n              </b-col>\r\n            </b-row>\r\n          </b-card-body>\r\n        </b-card>\r\n      </b-col>\r\n    </b-row>\r\n  </b-container>\r\n</template>\r\n<script setup>\r\n</script>","import script from \"./NoticeEditForm.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./NoticeEditForm.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\r\nimport BackgroundBanner from \"@/components/common/BackgroundBanner.vue\";\r\nimport PostFormHeader from \"@/components/common/PostFormHeader.vue\";\r\nimport {ref} from \"vue\";\r\nimport PostService from \"@/service/PostService\";\r\nimport NoticeEditForm from \"@/pages/Notice/component/NoticeEditForm.vue\";\r\nimport ErrorType from \"@/composable/response/ErrorType\";\r\nimport {useRefreshTokenAndRetry} from \"@/composable/authentication/refreshTokenAndRetry\";\r\nimport PostSkeleton from \"@/components/skeleton/PostSkeleton.vue\";\r\nimport BackgroundBannerSkeleton from \"@/components/skeleton/BackgroundBannerSkeleton.vue\";\r\n\r\n// 게시글을 담는 반응성 객체\r\nconst fetchEditNoticeData = ref(null);\r\n\r\n// props 설정, 게시글 번호를 props로 전달받음\r\nconst props = defineProps({\r\n  postIdx: {\r\n    type: String,\r\n    default: ''\r\n  }\r\n});\r\n\r\n/**\r\n * 공지 게시글을 가져오는 함수\r\n *\r\n * @param postIdx 게시글 번호\r\n * @returns {Promise<void>}\r\n */\r\nasync function getEditNotice(postIdx) {\r\n  try {\r\n    const response = await PostService.fetchEditNotice(postIdx);\r\n    fetchEditNoticeData.value = response?.data;\r\n  } catch (error) {\r\n    console.log(error)\r\n    if (error.response?.data?.errorCode === ErrorType.EXPIRED_ACCESS_TOKEN) {\r\n      // 만료된 액세스 토큰일 경우 토큰 갱신 후 재시도\r\n      await useRefreshTokenAndRetry(() => getEditNotice(postIdx));\r\n    }\r\n  }\r\n}\r\n\r\n// props로 전달된 postIdx를 이용하여 공지 게시글 가져오기 함수 호출\r\ngetEditNotice(props.postIdx);\r\n\r\n</script>\r\n<template>\r\n  <!-- fetchEditNoticeData 값이 있을 경우 -->\r\n  <template v-if=\"fetchEditNoticeData\">\r\n    <!-- 게시글 작성 헤더 컴포넌트 PostFormHeader 사용 -->\r\n    <PostFormHeader :routeNameForPush=\"'Notices'\"/>\r\n    <!-- 공지 게시글 편집 폼 컴포넌트 NoticeEditForm 사용 -->\r\n    <NoticeEditForm :post=\"fetchEditNoticeData\" />\r\n  </template>\r\n\r\n  <!-- fetchEditNoticeData 값이 없을 경우 (로딩 중) -->\r\n  <template v-else>\r\n    <!-- 배경 배너 스켈레톤 컴포넌트 BackgroundBannerSkeleton 사용 -->\r\n    <BackgroundBannerSkeleton />\r\n    <!-- 게시글 스켈레톤 컴포넌트 PostSkeleton 사용 -->\r\n    <PostSkeleton/>\r\n  </template>\r\n</template>","import script from \"./NoticeEdit.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./NoticeEdit.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","/**\r\n * 사진 게시글의 편집 옵션\r\n * @readonly\r\n * @enum {string}\r\n */\r\nexport const EditPhotoOptions = {\r\n    /**\r\n     * 기존 이미지 수정 옵션\r\n     */\r\n    EDIT_EXISTING: {\r\n        code: \"EDIT_EXISTING\",\r\n        text: '기존 이미지 수정',\r\n        value: 'editExisting'\r\n    },\r\n\r\n    /**\r\n     * 새로운 이미지 추가 옵션\r\n     */\r\n    ADD_NEW: {\r\n        code: \"ADD_NEW\",\r\n        text: '새로운 이미지 추가',\r\n        value: 'addNew'\r\n    }\r\n};\r\n","import {computed, ref, watch} from 'vue';\r\nimport {useValidateAttachmentsExtension} from \"@/composable/attachment/validateAttachmentsExtension\";\r\nimport {useValidateAttachmentSize} from \"@/composable/attachment/validateAttachmentSize\";\r\nimport {useValidateAttachmentUploadCount} from \"@/composable/attachment/validateAttachmentUploadCount\";\r\nimport router from \"@/router/router\";\r\nimport ErrorType from \"@/composable/response/ErrorType\";\r\nimport {useRefreshTokenAndRetry} from \"@/composable/authentication/refreshTokenAndRetry\";\r\nimport {EditPhotoOptions} from \"@/composable/attachment/constants/EditAttachmentType\";\r\n\r\n/**\r\n * 사진 게시글의 수정 폼을 관리하는 컴포저블\r\n *\r\n * @param {object} attachmentType - AttachmentType 객체 (파일 업로드에 필요한 정보를 가진 객체)\r\n * @param {string} formDataName - 폼 데이터의 이름\r\n * @param {Function} savePostFunction - 게시글을 저장하는 서비스 메서드\r\n * @returns {object} 게시글 작성 폼 관련 함수와 상태를 포함한 객체\r\n */\r\nexport function useEditPostSubmitWithAttachmentsAndThumbnail(attachmentType, formDataName, savePostFunction) {\r\n\r\n    // 선택된 편집 옵션\r\n    const selectedEditOption = ref(EditPhotoOptions.EDIT_EXISTING.code);\r\n\r\n    // 편집 옵션 목록\r\n    const editOptions = ref([\r\n        { text: EditPhotoOptions.EDIT_EXISTING.text, value: EditPhotoOptions.EDIT_EXISTING.code },\r\n        { text: EditPhotoOptions.ADD_NEW.text, value: EditPhotoOptions.ADD_NEW.code },\r\n    ])\r\n\r\n    // 게시글 데이터 객체\r\n    const post = ref({category: null});\r\n\r\n    // 폼 데이터 객체\r\n    const formData = ref(new FormData());\r\n\r\n    // 게시글 수정 제출 시 발생한 에러\r\n    const submitError = ref(null)\r\n\r\n    //  파일 업로드 관련 에러 상태\r\n    const attachmentUploadErrors = ref({\r\n        hasUnsupportedExtensions: false,\r\n        isSizeExceeded: false,\r\n        isMaxUploadCountExceeded: false\r\n    });\r\n\r\n    // 기존 이미지에서 선택된 대표 이미지의 attachmentIdx\r\n    const selectedThumbnailAttachmentIdx = ref(0);\r\n\r\n    // 삭제할 첨부파일 인덱스를 저장하는 배열\r\n    const selectedDeleteAttachmentIndexes = ref([]);\r\n\r\n    // 대표 이미지 파일을 담는 반응성 객체\r\n    const selectedFile = ref();\r\n\r\n    /**\r\n     * 첨부파일 인덱스가 삭제된 상태인지 확인하는 함수\r\n     *\r\n     * @param {number} attachmentIdx - 첨부파일 인덱스\r\n     * @returns {boolean} 첨부파일 인덱스가 삭제된 상태인지 여부 (true: 삭제된 상태, false: 삭제되지 않은 상태)\r\n     */\r\n    function isAttachmentIdxDeleted(attachmentIdx) {\r\n        return selectedDeleteAttachmentIndexes.value.indexOf(attachmentIdx) !== -1;\r\n    }\r\n\r\n    /**\r\n     * 업로드된 파일들의 유효성 검사 결과를 확인하여 에러 여부를 반환하는 함수\r\n     *\r\n     * @param {FileList} files - 업로드된 파일들의 FileList 객체\r\n     * @returns {boolean} 업로드된 파일들의 유효성 검사 결과에 따른 에러 여부 (true: 에러 발생, false: 에러 없음)\r\n     */\r\n    function hasAttachmentUploadErrors(files) {\r\n        attachmentUploadErrors.value.hasUnsupportedExtensions = useValidateAttachmentsExtension(files, attachmentType.allowedExtensions);\r\n        attachmentUploadErrors.value.isSizeExceeded = useValidateAttachmentSize(files, attachmentType.maxUploadSize);\r\n        attachmentUploadErrors.value.isMaxUploadCountExceeded = useValidateAttachmentUploadCount(files, attachmentType.maxUploadCount);\r\n\r\n        return (\r\n            attachmentUploadErrors.value.hasUnsupportedExtensions ||\r\n            attachmentUploadErrors.value.isSizeExceeded ||\r\n            attachmentUploadErrors.value.isMaxUploadCountExceeded\r\n        );\r\n    }\r\n\r\n    /**\r\n     * 파일 업로드 핸들러 함수\r\n     *\r\n     * @param {Event} event - 파일 업로드 이벤트 객체\r\n     */\r\n    const useHandleAttachment = (event) => {\r\n        if (hasAttachmentUploadErrors(event.target.files)) {\r\n            event.target.value = \"\";\r\n            return;\r\n        }\r\n\r\n        formData.value.delete('attachments');\r\n        for (const file of event.target.files) {\r\n            formData.value.append('attachments', file)\r\n        }\r\n    };\r\n\r\n    /**\r\n     * 삭제할 첨부파일 인덱스를 배열에 추가\r\n     *\r\n     * @param {number} attachmentIdx - 삭제할 파일의 인덱스\r\n     */\r\n    function useDeleteAttachment(attachmentIdx) {\r\n        selectedDeleteAttachmentIndexes.value.push(attachmentIdx);\r\n    }\r\n\r\n    /**\r\n     * 게시글의 이전 첨부파일 인덱스들을 계산하는 반응성 컴퓨티드 프로퍼티\r\n     *\r\n     * @type {ComputedRef<number[]>} 이전 첨부파일 인덱스들을 담은 ComputedRef 객체\r\n     */\r\n    const notDeletedIndexes = computed(() => {\r\n        return post.value.attachments.map((attachment) => attachment.attachmentIdx)\r\n                    .filter((idx) => !selectedDeleteAttachmentIndexes.value.includes(idx))\r\n    });\r\n\r\n    /**\r\n     * 게시글의 이전 첨부파일들을 계산하는 반응성 컴퓨티드 프로퍼티\r\n     *\r\n     * @type {ComputedRef<object[]>} 이전 첨부파일들을 담은 ComputedRef 객체\r\n     */\r\n    const notDeletedAttachments = computed(() => {\r\n        return post.value.attachments\r\n                        .filter((attachment) => !isAttachmentIdxDeleted(attachment.attachmentIdx));\r\n    });\r\n\r\n    /**\r\n     * 서버로 전송할 폼 데이터 객체를 반환하는 함수\r\n     *\r\n     * @returns {FormData} 폼 데이터 객체\r\n     */\r\n    function getSubmitFormData() {\r\n        if( selectedEditOption.value === EditPhotoOptions.EDIT_EXISTING.value ) {\r\n\r\n            formData.value.delete('notDeletedIndexes');\r\n            formData.value.append('notDeletedIndexes', notDeletedIndexes.value);\r\n\r\n            formData.value.delete('thumbnailAttachmentIdx');\r\n            formData.value.append('thumbnailAttachmentIdx', selectedThumbnailAttachmentIdx.value || 0);\r\n        }\r\n        formData.value.delete('updateOption');\r\n        formData.value.append('updateOption'\r\n                        , new Blob([JSON.stringify(selectedEditOption.value)], {type: 'application/json'}));\r\n\r\n        formData.value.delete(formDataName);\r\n        formData.value.append(formDataName, new Blob([JSON.stringify(post.value)], {type: 'application/json'}));\r\n        return formData.value;\r\n    }\r\n\r\n    /**\r\n     * 게시글 작성 폼을 서버에 제출하는 함수\r\n     *\r\n     * @param postIdx 게시글 번호\r\n     * @returns {Promise<void>}\r\n     */\r\n    async function useSubmit(postIdx) {\r\n        try {\r\n            const response = await savePostFunction(postIdx, getSubmitFormData());\r\n            await router.push(response.headers.location.replace(\"/api\", \"\"));\r\n        } catch (error) {\r\n            if (error.response?.data?.errorCode === ErrorType.EXPIRED_ACCESS_TOKEN) {\r\n                await useRefreshTokenAndRetry(() => useSubmit(postIdx));\r\n            }\r\n            if (error.response?.data?.errorCode === ErrorType.UNPROCESSABLE_ENTITY) {\r\n                submitError.value = error.response.data.message;\r\n            }\r\n            return Promise.reject(error)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 대표 이미지 변경 처리 함수\r\n     *\r\n     * @param {Event} event - 파일 선택 이벤트\r\n     */\r\n    const useHandleThumbnail = (event) => {\r\n        if (hasAttachmentUploadErrors(event.target.files)) {\r\n            selectedFile.value = null;\r\n            event.target.value = \"\";\r\n            return;\r\n        }\r\n\r\n        formData.value.delete('thumbnailAttachmentIdx');\r\n\r\n        // 사진을 하나만 선택할 수 있도록 기존의 thumbnail을 모두 삭제\r\n        formData.value.delete('thumbnail');\r\n\r\n        // 새로 선택한 파일을 formData에 추가\r\n        if (event.target.files && event.target.files.length > 0) {\r\n            const file = event.target.files[0];\r\n            formData.value.append('thumbnail', file);\r\n\r\n            // 파일 미리보기 설정\r\n            const reader = new FileReader();\r\n            reader.onload = () => {\r\n                selectedFile.value = {\r\n                    file: file,\r\n                    preview: reader.result\r\n                };\r\n            };\r\n            reader.readAsDataURL(file);\r\n        } else {\r\n            selectedFile.value = null;\r\n        }\r\n    };\r\n\r\n    // 사용자가 선택한 대표 이미지의 변경을 감시하고, selectedThumbnailAttachmentIdx를 업데이트하는 함수\r\n    watch(\r\n        () => post.value?.thumbnailAttachmentIdx, // post.value 객체를 반환하는 함수를 사용합니다.\r\n        (updateAttachmentIdx) => {\r\n            console.log(updateAttachmentIdx)\r\n            if(updateAttachmentIdx === null || updateAttachmentIdx === undefined) {\r\n                post.value.thumbnailAttachmentIdx = 0;\r\n            }\r\n            selectedThumbnailAttachmentIdx.value = updateAttachmentIdx;\r\n        },\r\n        { deep: true } // deep 옵션을 사용하여 중첩된 객체를 감시합니다.\r\n    );\r\n\r\n    // 사용자가 선택한 삭제할 첨부파일 인덱스를 감시하고, 삭제한 인덱스가 대표 이미지 인덱스라면 0으로 초기화\r\n    watch(\r\n        () => selectedDeleteAttachmentIndexes.value,\r\n        (updateDeleteAttachmentIdx) => {\r\n            if(isAttachmentIdxDeleted(post.value.thumbnailAttachmentIdx)) {\r\n                post.value.thumbnailAttachmentIdx = 0;\r\n            }\r\n        },\r\n        { deep: true } // deep 옵션을 사용하여 중첩된 객체를 감시합니다.\r\n    );\r\n\r\n    return {\r\n        isAttachmentIdxDeleted,\r\n        notDeletedAttachments,\r\n        selectedDeleteAttachmentIndexes,\r\n        selectedFile,\r\n        selectedEditOption,\r\n        editOptions,\r\n        post,\r\n        formData,\r\n        submitError,\r\n        attachmentUploadErrors,\r\n        hasAttachmentUploadErrors,\r\n        useHandleAttachment,\r\n        useDeleteAttachment,\r\n        useHandleThumbnail,\r\n        useSubmit\r\n    };\r\n}\r\n","<script setup>\r\nimport BackgroundBanner from \"@/components/common/BackgroundBanner.vue\";\r\nimport PostFormHeader from \"@/components/common/PostFormHeader.vue\";\r\nimport {ref} from \"vue\";\r\nimport PostService from \"@/service/PostService\";\r\nimport ErrorType from \"@/composable/response/ErrorType\";\r\nimport {useRefreshTokenAndRetry} from \"@/composable/authentication/refreshTokenAndRetry\";\r\nimport PostSkeleton from \"@/components/skeleton/PostSkeleton.vue\";\r\nimport BackgroundBannerSkeleton from \"@/components/skeleton/BackgroundBannerSkeleton.vue\";\r\nimport {AttachmentType} from \"@/composable/attachment/constants/AttachmentType\";\r\nimport ValidationError from \"@/components/common/ValidationError.vue\";\r\nimport {useFormatBytes} from \"../../composable/attachment/formatBytes\";\r\nimport {useGetIconTagByExtension} from \"@/composable/attachment/getIconTagByExtension\";\r\nimport {useFindSubCodeGroup} from \"@/composable/postGroup/findSubCodeGroup\";\r\nimport {store} from \"@/store\";\r\nimport {PostGroup} from \"@/composable/postGroup/PostGroup\";\r\nimport {\r\n  useEditPostSubmitWithAttachmentsAndThumbnail\r\n} from \"@/composable/submitForm/editPostSubmitWithAttachmentsAndThumbnail\";\r\nimport {EditPhotoOptions} from \"@/composable/attachment/constants/EditAttachmentType\";\r\n\r\n// 게시글의 하위 코드 그룹 찾기\r\nconst subCodeGroup = useFindSubCodeGroup(store.categories, PostGroup.PHOTO);\r\n\r\n// props 설정, postIdx를 props로 전달받음.\r\nconst props = defineProps({\r\n  postIdx: {\r\n    type: String,\r\n    default: ''\r\n  }\r\n});\r\n\r\n/**\r\n * 사진 게시글을 가져오는 함수\r\n *\r\n * @param postIdx 게시글 번호\r\n * @returns {Promise<void>}\r\n */\r\nasync function getEditPhoto(postIdx) {\r\n  try {\r\n    const response = await PostService.fetchEditPhoto(postIdx);\r\n    post.value = response?.data;\r\n  } catch (error) {\r\n    console.log(error)\r\n    if (error.response?.data?.errorCode === ErrorType.EXPIRED_ACCESS_TOKEN) {\r\n      await useRefreshTokenAndRetry(() => getEditPhoto(postIdx));\r\n    }\r\n  }\r\n}\r\n\r\n// props로 전달된 postIdx를 이용하여 사진 게시글 가져오기 함수 호출\r\ngetEditPhoto(props.postIdx);\r\n\r\n// 컴포넌트 내에서 사용할 변수와 함수를 가져오는 커스텀 훅 사용\r\nconst {\r\n  isAttachmentIdxDeleted,\r\n  selectedFile,\r\n  selectedEditOption,\r\n  editOptions,\r\n  post,\r\n  formData,\r\n  submitError,\r\n  attachmentUploadErrors,\r\n  notDeletedAttachments,\r\n  hasAttachmentUploadErrors,\r\n  useHandleAttachment,\r\n  useDeleteAttachment,\r\n  useHandleThumbnail,\r\n  useSubmit\r\n} = useEditPostSubmitWithAttachmentsAndThumbnail(\r\n    AttachmentType.IMAGE,\r\n    \"photo\",\r\n    PostService.editPhoto\r\n);\r\n\r\n// 요청 중인지 여부를 저장하는 ref 변수\r\nconst isRequesting = ref(false);\r\n\r\n/**\r\n * 게시글 수정 제출을 처리하는 함수\r\n *\r\n * 중복 요청 방지와 공통 예외 처리 외 컴포넌트 특화된 에러 처리 로직\r\n *\r\n * @param {String} postIdx - 게시글 번호\r\n * @returns {Promise<void>}\r\n */\r\nasync function handleEditSubmit(postIdx) {\r\n  if (isRequesting.value) return;\r\n  isRequesting.value = true;\r\n\r\n  try {\r\n    await useSubmit(postIdx);\r\n    isRequesting.value = false;\r\n  } catch (error) {\r\n    isRequesting.value = false;\r\n    console.error('글 수정 실패:', error);\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<template>\r\n  <template v-if=\"post\">\r\n\r\n    <!-- 게시글 작성 헤더 컴포넌트 PostFormHeader 사용 -->\r\n    <PostFormHeader :routeNameForPush=\"'Photos'\"/>\r\n\r\n    <!-- 게시글 편집 폼을 감싸는 컨테이너 -->\r\n    <b-container>\r\n      <b-row>\r\n        <b-col>\r\n          <!-- 게시글 수정을 위한 카드 컴포넌트 -->\r\n          <b-card class=\"mb-4\">\r\n            <b-card-body>\r\n              <h3 class=\"h6 mb-4\"></h3>\r\n              <b-row>\r\n                <b-col>\r\n                  <!-- 게시글 수정 폼 -->\r\n                  <b-form>\r\n                    <b-form-group label=\"토픽\">\r\n                      <!-- 토픽 선택을 위한 셀렉트 박스 -->\r\n                      <b-form-select v-model=\"post.category\">\r\n                        <b-form-select-option :value=\"null\" selected>모든 토픽</b-form-select-option>\r\n                        <b-form-select-option v-for=\"category in subCodeGroup\" :key=\"category.subCode\"\r\n                                              :value=\"category.subCode\">\r\n                          {{ category.subCodeTitle }}\r\n                        </b-form-select-option>\r\n                      </b-form-select>\r\n                    </b-form-group>\r\n                    <template v-if=\"submitError && submitError.category\">\r\n                      <!-- 카테고리 에러 메시지 출력 -->\r\n                      <ValidationError :message=\"submitError.category\"/>\r\n                    </template>\r\n\r\n                    <!-- 제목 입력 폼 -->\r\n                    <b-form>\r\n                      <b-form-group label=\"제목\">\r\n                        <b-form-input\r\n                            v-model=\"post.title\"\r\n                            id=\"titleInput\"\r\n                            placeholder=\"4글자 이상, 100글자 이하여야 합니다\"\r\n                            required\r\n                            minlength=\"4\"\r\n                            maxlength=\"100\"\r\n                        ></b-form-input>\r\n                      </b-form-group>\r\n                      <template v-if=\"submitError && submitError.title\">\r\n                        <!-- 제목 에러 메시지 출력 -->\r\n                        <ValidationError :message=\"submitError.title\"/>\r\n                      </template>\r\n\r\n                      <!-- 내용 입력 폼 -->\r\n                      <b-form-group label=\"내용\">\r\n                        <b-form-textarea\r\n                            :model-value=\"post.content\"\r\n                            id=\"contentTextarea\"\r\n                            placeholder=\"4글자 이상, 2000글자 이하여야 합니다\"\r\n                            required\r\n                            minlength=\"4\"\r\n                            maxlength=\"2000\"\r\n                            style=\"height: 300px;\"\r\n                        ></b-form-textarea>\r\n                      </b-form-group>\r\n                      <template v-if=\"submitError && submitError.content\">\r\n                        <!-- 내용 에러 메시지 출력 -->\r\n                        <ValidationError :message=\"submitError.content\"/>\r\n                      </template>\r\n\r\n\r\n                      <div>\r\n                        <b-form-group class=\"text-center\"\r\n                                      label=\"원하시는 수정 유형을 클릭하셔서 수정하세요.\"\r\n                        >\r\n                          <b-form-radio-group\r\n                              id=\"btn-radios-2\"\r\n                              v-model=\"selectedEditOption\"\r\n                              :options=\"editOptions\"\r\n                              button-variant=\"outline-primary\"\r\n                              size=\"lg\"\r\n                              name=\"radio-btn-outline\"\r\n                              buttons\r\n                          ></b-form-radio-group>\r\n                        </b-form-group>\r\n                      </div>\r\n\r\n\r\n                      <!-- Show the form for 기존 이미지 수정 -->\r\n                      <div v-if=\"selectedEditOption === EditPhotoOptions.EDIT_EXISTING.value\">\r\n                        <b-form-group label=\"기존 이미지 수정\"\r\n                                      v-if=\" post.attachments && post.attachments.length > 0\">\r\n                          <b-card class=\"my-3\">\r\n\r\n\r\n                            <!-- 기존 업로드된 파일 목록 -->\r\n                            <div class=\"mb-3\" v-if=\"post.attachments && post.attachments.length > 0\">\r\n                              <b-badge class=\"mb-3\" variant=\"danger\">이미지 삭제</b-badge>\r\n                              <ul class=\"list-group list-group-light\">\r\n\r\n\r\n                                <div v-for=\"(attachment, attachmentIdx) in post.attachments\" :key=\"attachmentIdx\"\r\n                                     class=\"list-group-item list-group-item-action px-3 border-1 ripple d-flex align-items-center\">\r\n\r\n                                  <!-- 파일 이름과 기타 내용들을 표시 -->\r\n                                  <div class=\"flex-grow-1 text-decoration-none text-dark\" v-if=\"!isAttachmentIdxDeleted(attachment.attachmentIdx)\">\r\n                                    <span v-if=\"attachment.attachmentExtension\"\r\n                                          v-html=\"useGetIconTagByExtension(attachment.attachmentExtension)\"></span>&nbsp;\r\n                                    <a :href=\"`/attachments/${attachment.attachmentIdx}`\" class=\"text-decoration-none text-dark\">\r\n                                      {{ attachment.originalAttachmentName }} ({{ useFormatBytes(attachment.attachmentSize) }})\r\n                                    </a>\r\n                                  </div>\r\n                                  <!-- 삭제된 파일 이름 표시 -->\r\n                                  <div class=\"flex-grow-1 text-decoration-line-through\" v-else style=\"color: #ff0000;\">\r\n                                    <span v-if=\"attachment.attachmentExtension\" v-html=\"useGetIconTagByExtension(attachment.attachmentExtension)\"></span>&nbsp;\r\n                                    {{ attachment.originalAttachmentName }} ({{ useFormatBytes(attachment.attachmentSize) }})\r\n                                  </div>\r\n\r\n                                  <!-- 파일 삭제 버튼 -->\r\n                                  <button type=\"button\" class=\"btn-close\" aria-label=\"Delete\"\r\n                                          @click=\"useDeleteAttachment(attachment.attachmentIdx)\"></button>\r\n                                </div>\r\n\r\n                              </ul>\r\n                            </div>\r\n\r\n                            <!-- 기존에 설정된 대표 이미지 보여주기 -->\r\n                            <b-form-group>\r\n                              <b-badge class=\"mb-3\" variant=\"info\">대표 이미지 설정</b-badge>\r\n                              <b-form-select v-model=\"post.thumbnailAttachmentIdx\">\r\n                                <b-form-select-option :value=0>선택안함</b-form-select-option>\r\n                                <b-form-select-option v-for=\"(attachment, attachmentIdx) in notDeletedAttachments\"\r\n                                                      :key=\"attachmentIdx\" :value=\"attachment.attachmentIdx\">\r\n                                <span class=\"text-decoration-none text-dark\">\r\n                                  {{ attachment.originalAttachmentName }} ({{\r\n                                    useFormatBytes(attachment.attachmentSize)\r\n                                  }})\r\n                                </span>\r\n                                </b-form-select-option>\r\n                              </b-form-select>\r\n                            </b-form-group>\r\n\r\n                          </b-card>\r\n                        </b-form-group>\r\n                      </div>\r\n\r\n                      <!-- Show the form for 새로운 이미지 추가 -->\r\n                      <div v-if=\"selectedEditOption === EditPhotoOptions.ADD_NEW.value\">\r\n                        <b-form-group label=\"새로운 이미지 추가\">\r\n                          <b-card class=\"my-3\">\r\n                            <!-- 대표 이미지 업로드 -->\r\n                            <div class=\"mb-3\">\r\n                              <b-badge class=\"mb-3\" variant=\"primary\">대표 이미지 업로드</b-badge>\r\n                              <input class=\"form-control\" type=\"file\" id=\"formFile\" ref=\"fileInput\"\r\n                                     @change=\"useHandleThumbnail\">\r\n                            </div>\r\n\r\n                            <!-- 파일 업로드 입력 폼 -->\r\n                            <div class=\"mb-3\">\r\n                              <b-badge class=\"mb-3\" variant=\"success\">새로운 이미지 업로드</b-badge>\r\n                              <input @change=\"useHandleAttachment\" class=\"form-control\" type=\"file\"\r\n                                     id=\"formFileMultiple\" multiple ref=\"fileInput\">\r\n                            </div>\r\n                            <template v-if=\"attachmentUploadErrors.hasUnsupportedExtensions\">\r\n                              <!-- 파일 확장자 에러 메시지 출력 -->\r\n                              <ValidationError :message=\"`확장자 jpg, gif, png, zip만 업로드 가능합니다.`\"/>\r\n                            </template>\r\n                            <template v-if=\"attachmentUploadErrors.isMaxUploadCountExceeded\">\r\n                              <!-- 파일 업로드 개수 초과 에러 메시지 출력 -->\r\n                              <ValidationError :message=\"`최대 5개의 파일까지 업로드 가능합니다.`\"/>\r\n                            </template>\r\n                            <template v-if=\"attachmentUploadErrors.isSizeExceeded\">\r\n                              <!-- 파일 크기 초과 에러 메시지 출력 -->\r\n                              <ValidationError :message=\"`파일의 크기는 최대 2,048,000 byte 입니다.`\"/>\r\n                            </template>\r\n\r\n                            <!-- 대표 이미지 미리보기 -->\r\n                            <div class=\"mb-5\">\r\n                              <b-badge class=\"mb-3\" variant=\"secondary\">새로운 대표 이미지 미리보기</b-badge>\r\n                              <b-img v-if=\"selectedFile\" :src=\"selectedFile.preview\"\r\n                                     fluid-grow style=\"border-radius: 10px;\" alt=\"Fluid-grow image\"></b-img>\r\n\r\n                              <div v-else class=\"bg-white py-1\">\r\n                                <b-skeleton class=\"img-fluid rounded mx-auto d-block w-100\" height=\"20rem\"></b-skeleton>\r\n                              </div>\r\n                            </div>\r\n                          </b-card>\r\n                        </b-form-group>\r\n                        </div>\r\n                      <!-- 수정 버튼 -->\r\n                      <div class=\"d-grid gap-2 mt-4\">\r\n                        <b-button block variant=\"primary\" @click=\"handleEditSubmit(postIdx)\"><i\r\n                            class=\"fa-regular fa-circle-check\"></i> 수정\r\n                        </b-button>\r\n                      </div>\r\n                    </b-form>\r\n                  </b-form>\r\n                </b-col>\r\n              </b-row>\r\n            </b-card-body>\r\n          </b-card>\r\n        </b-col>\r\n      </b-row>\r\n    </b-container>\r\n  </template>\r\n\r\n  <!-- 게시글 정보가 없을 경우 (로딩 중) -->\r\n  <template v-else>\r\n    <!-- 배경 배너 스켈레톤 컴포넌트 BackgroundBannerSkeleton 사용 -->\r\n    <BackgroundBannerSkeleton/>\r\n    <!-- 게시글 스켈레톤 컴포넌트 PostSkeleton 사용 -->\r\n    <PostSkeleton/>\r\n  </template>\r\n</template>","import script from \"./PhotoEdit.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./PhotoEdit.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\r\nimport {defineProps, ref} from \"vue\";\r\nimport {store} from \"@/store\";\r\nimport {useFindSubCodeGroup} from \"@/composable/postGroup/findSubCodeGroup\";\r\nimport {PostGroup} from \"@/composable/postGroup/PostGroup\";\r\n\r\nconst props = defineProps({\r\n  post: Object,\r\n});\r\n\r\nconst selectedTopic = ref(props.post?.category || null);\r\n\r\nconst communitySubCodeGroup = useFindSubCodeGroup(store.categories, PostGroup.INQUIRY);\r\n\r\n</script>\r\n<template>\r\n  <b-container>\r\n    <b-row>\r\n      <b-col>\r\n        <b-card class=\"mb-4\">\r\n          <b-card-body>\r\n            <h3 class=\"h6 mb-4\"></h3>\r\n            <b-row>\r\n              <b-col>\r\n                <b-form>\r\n                  <b-form-group label=\"토픽\">\r\n                    <b-form-select v-model=\"selectedTopic\">\r\n                      <b-form-select-option :value=\"null\" selected>모든 토픽</b-form-select-option>\r\n                      <b-form-select-option v-for=\"category in communitySubCodeGroup\" :key=\"category.subCode\" :value=\"category.subCode\">\r\n                        {{ category.subCodeTitle }}\r\n                      </b-form-select-option>\r\n                    </b-form-select>\r\n                  </b-form-group>\r\n                  <b-form>\r\n                    <b-form-group label=\"제목\">\r\n                      <b-form-input\r\n                          :model-value=\"props.post.title\"\r\n                          id=\"titleInput\"\r\n                          placeholder=\"4글자 이상, 100글자 이하여야 합니다\"\r\n                          required\r\n                          minlength=\"4\"\r\n                          maxlength=\"100\"\r\n                      ></b-form-input>\r\n                    </b-form-group>\r\n                    <b-form-group label=\"내용\">\r\n                      <b-form-textarea\r\n                          :model-value=\"props.post.content\"\r\n                          id=\"contentTextarea\"\r\n                          placeholder=\"4글자 이상, 2000글자 이하여야 합니다\"\r\n                          required\r\n                          minlength=\"4\"\r\n                          maxlength=\"2000\"\r\n                          style=\"height: 300px;\"\r\n                      ></b-form-textarea>\r\n                    </b-form-group>\r\n\r\n                    <div class=\"d-grid gap-2 mt-4\">\r\n                      <b-button block variant=\"primary\"><i\r\n                          class=\"fa-regular fa-circle-check\"></i> 수정\r\n                      </b-button>\r\n                    </div>\r\n                  </b-form>\r\n\r\n                </b-form>\r\n              </b-col>\r\n            </b-row>\r\n          </b-card-body>\r\n        </b-card>\r\n      </b-col>\r\n    </b-row>\r\n  </b-container>\r\n</template>\r\n<script setup>\r\n</script>","import script from \"./InquiryEditForm.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./InquiryEditForm.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\r\nimport PostFormHeader from \"@/components/common/PostFormHeader.vue\";\r\nimport InquiryEditForm from \"@/pages/Inquiry/component/InquiryEditForm.vue\";\r\nimport {ref} from \"vue\";\r\nimport PostService from \"@/service/PostService\";\r\nimport ErrorType from \"@/composable/response/ErrorType\";\r\nimport {useRefreshTokenAndRetry} from \"@/composable/authentication/refreshTokenAndRetry\";\r\nimport PostSkeleton from \"@/components/skeleton/PostSkeleton.vue\";\r\nimport BackgroundBannerSkeleton from \"@/components/skeleton/BackgroundBannerSkeleton.vue\";\r\n\r\n/** 게시글을 담는 반응성 객체 */\r\nconst fetchEditInquiryData = ref(null);\r\n\r\nconst props = defineProps({\r\n  postIdx: {\r\n    type: String,\r\n    default: ''\r\n  }\r\n});\r\n\r\n/**\r\n * 문의 게시글을 가져오는 함수\r\n *\r\n * @param postIdx 게시글 번호\r\n * @returns {Promise<void>}\r\n */\r\nasync function getEditInquiry(postIdx) {\r\n  try {\r\n    const response = await PostService.fetchEditInquiry(postIdx);\r\n    fetchEditInquiryData.value = response?.data;\r\n  } catch (error) {\r\n    console.log(error)\r\n    if (error.response?.data?.errorCode === ErrorType.EXPIRED_ACCESS_TOKEN) {\r\n      await useRefreshTokenAndRetry(() => getEditInquiry(postIdx));\r\n    }\r\n  }\r\n}\r\n\r\ngetEditInquiry(props.postIdx);\r\n</script>\r\n<template>\r\n  <template v-if=\"fetchEditInquiryData\">\r\n  <PostFormHeader :routeNameForPush=\"'Inquiries'\"/>\r\n    <InquiryEditForm :post=\"fetchEditInquiryData\" />\r\n  </template>\r\n  <template v-else>\r\n    <BackgroundBannerSkeleton />\r\n    <PostSkeleton/>\r\n  </template>\r\n</template>","import script from \"./InquiryEdit.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./InquiryEdit.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import script from \"./NotFound.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./NotFound.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import script from \"./ServiceNotAvailable.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ServiceNotAvailable.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import script from \"./Unauthorized.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Unauthorized.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import script from \"./Forbidden.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Forbidden.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import script from \"./Search.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Search.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import script from \"./RequestError.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./RequestError.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import {createRouter, createWebHistory} from 'vue-router'\r\nimport Home from \"@/pages/home/Home.vue\";\r\nimport Photos from \"@/pages/Photo/Photos.vue\";\r\nimport SignIn from \"@/pages/home/SignIn.vue\";\r\nimport SignUp from \"@/pages/home/SignUp.vue\";\r\nimport Notices from \"@/pages/Notice/Notices.vue\";\r\nimport Inquiries from \"@/pages/Inquiry/Inquiries.vue\";\r\nimport Communities from \"@/pages/Community/Communities.vue\";\r\nimport CommunityPost from \"@/pages/Community/CommunityPost.vue\";\r\nimport NoticePost from \"@/pages/Notice/NoticePost.vue\";\r\nimport PhotoPost from \"@/pages/Photo/PhotoPost.vue\";\r\nimport InquiryPost from \"@/pages/Inquiry/InquiryPost.vue\";\r\nimport CommunityForm from \"@/pages/Community/CommunityForm.vue\";\r\nimport NoticeForm from \"@/pages/Notice/NoticeForm.vue\";\r\nimport PhotoForm from \"@/pages/Photo/PhotoForm.vue\";\r\nimport InquiryForm from \"@/pages/Inquiry/InquiryForm.vue\";\r\nimport CommunityEdit from \"@/pages/Community/CommunityEdit.vue\";\r\nimport NoticeEdit from \"@/pages/Notice/NoticeEdit.vue\";\r\nimport PhotoEdit from \"@/pages/Photo/PhotoEdit.vue\";\r\nimport InquiryEdit from \"@/pages/Inquiry/InquiryEdit.vue\";\r\nimport NotFound from \"@/components/NotFound.vue\";\r\nimport ServiceNotAvailable from \"@/components/ServiceNotAvailable.vue\";\r\nimport {store} from \"@/store\";\r\nimport Unauthorized from \"@/components/Unauthorized.vue\";\r\nimport Forbidden from \"@/components/Forbidden.vue\";\r\nimport Search from \"@/pages/home/Search.vue\";\r\nimport BindingError from \"@/components/RequestError.vue\";\r\nimport RequestError from \"@/components/RequestError.vue\";\r\n\r\nconst routes = [\r\n    {path: '/', name: 'Home', component: Home},\r\n    {path: '/sign-in', name: 'SignIn', component: SignIn},\r\n    {path: '/sign-up', name: 'SignUp', component: SignUp},\r\n    {path: '/search', name: 'Search', component: ServiceNotAvailable, props: true},\r\n    {path: '/settings', name: 'Settings', component: ServiceNotAvailable, beforeEnter: requireSignIn},\r\n    {path: '/notification', name: 'Notification', component: ServiceNotAvailable, beforeEnter: requireSignIn},\r\n    {path: '/forgot', name: 'Forgot', component: ServiceNotAvailable, beforeEnter: requireSignIn},\r\n\r\n    {path: '/notices', name: 'Notices', component: Notices},\r\n    {path: '/notices/:postIdx', name: 'NoticePost', component: NoticePost, props: true},\r\n    {path: '/notices/form', name: 'NoticeForm', component: NoticeForm, beforeEnter: requireSignIn},\r\n    {path: '/notices/:postIdx/edit', name: 'NoticeEdit', component: NoticeEdit, props: true, beforeEnter: requireSignIn},\r\n\r\n    {path: '/communities', name: 'Communities', component: Communities},\r\n    {path: '/communities/:postIdx', name: 'CommunityPost', component: CommunityPost, props: true},\r\n    {path: '/communities/form', name: 'CommunityForm', component: CommunityForm, beforeEnter: requireSignIn},\r\n    {path: '/communities/:postIdx/edit', name: 'CommunityEdit', component: CommunityEdit, props: true, beforeEnter: requireSignIn},\r\n\r\n    {path: '/photos', name: 'Photos', component: Photos},\r\n    {path: '/photos/:postIdx', name: 'PhotoPost', component: PhotoPost, props: true},\r\n    {path: '/photos/form', name: 'PhotoForm', component: PhotoForm, beforeEnter: requireSignIn},\r\n    {path: '/photos/:postIdx/edit', name: 'PhotoEdit', component: PhotoEdit, props: true, beforeEnter: requireSignIn},\r\n\r\n    {path: '/inquiries', name: 'Inquiries', component: Inquiries},\r\n    {path: '/inquiries/:postIdx', name: 'InquiryPost', component: InquiryPost, props: true},\r\n    {path: '/inquiries/form', name: 'InquiryForm', component: InquiryForm, beforeEnter: requireSignIn},\r\n    {path: '/inquiries/:postIdx/edit', name: 'InquiryEdit', component: InquiryEdit, props: true, beforeEnter: requireSignIn},\r\n\r\n\r\n    {path: '/RequestError', name: 'RequestError', component: RequestError },\r\n    {path: '/Forbidden', name: 'Forbidden', component: Forbidden },\r\n    {path: '/unauthorized', name: 'Unauthorized', component: Unauthorized },\r\n    {path: '/:catchAll(.*)*', name: 'NotFound', component: NotFound}, // 404 페이지로 리다이렉트\r\n]\r\n\r\nconst router = createRouter({\r\n    history: createWebHistory(),\r\n    routes,\r\n});\r\n\r\nexport default router;\r\n\r\nfunction requireSignIn(to, from, next) {\r\n    if (store.isMemberSignedIn()) {\r\n        next();\r\n    } else {\r\n        next({ name: 'SignIn' });\r\n    }\r\n}","import {ref, watch} from \"vue\";\r\nimport router from \"@/router/router\";\r\n\r\n/**\r\n * 라우터의 변경을 감시하는 훅\r\n *\r\n * @returns {Object} - 라우터 상태를 담은 객체\r\n * @property {string} currentRouteName - 현재 라우터의 이름을 나타내는 변수\r\n */\r\nexport function useRouteWatch() {\r\n\r\n    const currentRouteName = ref('');\r\n\r\n    /**\r\n     * 현재 라우터의 이름을 감시하고, 변경될 때마다 `currentRouteName` 변수 업데이트\r\n     *\r\n     * @param {Object} updateCurrentRoute - 업데이트된 현재 라우터 객체\r\n     */\r\n    watch(\r\n        () => router.currentRoute.value.name,\r\n        (updateCurrentRouteName) => {\r\n            console.log(updateCurrentRouteName)\r\n            currentRouteName.value = updateCurrentRouteName;\r\n        },\r\n        { deep: true } // deep 옵션을 사용하여 중첩된 객체를 감시합니다.\r\n    );\r\n\r\n    return {\r\n        currentRouteName\r\n    }\r\n\r\n}","<script setup>\r\nimport {store} from \"@/store\";\r\nimport router from \"@/router/router\";\r\nimport {ref} from \"vue\";\r\nimport AuthenticationService from \"@/service/AuthenticationService\";\r\nimport {ROUTE_NAME_GROUP} from \"@/composable/router/routeNameGroup\";\r\nimport {useRouteWatch} from \"@/composable/router/routeWatch\";\r\n\r\nconst { currentRouteName } = useRouteWatch();\r\n\r\n/**\r\n * 로그아웃 요청하는 함수\r\n *\r\n * @returns {Promise<void>}\r\n */\r\nasync function logout() {\r\n  await AuthenticationService.logout().then(() => {\r\n    router.push({name: \"Home\"})\r\n  }).catch(error => {\r\n    console.log(error)\r\n  })\r\n}\r\n\r\nconst keyword = ref('');\r\n\r\n/**\r\n * 검색을 수행하는 함수\r\n *\r\n * @returns {Promise<void>}\r\n */\r\nasync function searchPosts() {\r\n  await router.push({ name: 'Search', params: { q: keyword.value } });\r\n}\r\n\r\n</script>\r\n\r\n<template>\r\n  <b-container>\r\n    <b-navbar toggleable=\"lg\" class=\"bg-white text-black\">\r\n      <b-navbar-brand to=\"/\"><b>NOW</b></b-navbar-brand>\r\n\r\n      <b-navbar-toggle target=\"nav-collapse\"></b-navbar-toggle>\r\n\r\n      <b-collapse id=\"nav-collapse\" is-nav>\r\n\r\n        <b-navbar-nav class=\"me-auto mb-2 mb-lg-0 ms-lg-4 text-truncate\">\r\n\r\n          <b-nav-item\r\n              class=\"nav-item px-3\"\r\n              v-for=\"group in ROUTE_NAME_GROUP\"\r\n              :key=\"group.label\"\r\n              :class=\"{ 'selected': group.routes.includes(currentRouteName) }\"\r\n          >\r\n            <router-link\r\n                :to=\"{ name: group.routes[0] }\"\r\n                class=\"router-link text-decoration-none\"\r\n                :class=\"{'text-secondary': !group.routes.includes(currentRouteName) }\"\r\n            >\r\n              {{ group.label }}\r\n            </router-link>\r\n          </b-nav-item>\r\n\r\n\r\n        </b-navbar-nav>\r\n\r\n        <div class=\"d-flex px-3\">\r\n          <b-form-input type=\"text\" placeholder=\"게시글 검색...\"\r\n                        class=\"me-2 d-block d-sm-none d-xxl-block d-xl-block d-lg-block\"\r\n                        v-model=\"keyword\"></b-form-input>\r\n          <b-button variant=\"primary\" pill class=\"text-nowrap d-block d-sm-none d-xxl-block d-xl-block d-lg-block\"\r\n                    type=\"button\" @click=\"searchPosts\">검색\r\n          </b-button>\r\n        </div>\r\n\r\n        <b-navbar-nav class=\"ms-xl-5\" v-if=\"store.isMemberSignedIn()\" style=\"font-size: 1.5rem;\">\r\n\r\n          <b-nav-item class=\"d-block d-sm-none d-xxl-block d-xl-block d-lg-block\">\r\n            <b-dropdown class=\"p-0\" variant=\"variant\" size=\"sm\" toggle-class=\"text-decoration-none\" no-caret>\r\n              <template #button-content>\r\n                <i class=\"bi bi-chat-left-dots\" style=\"font-size:24px;\"></i>\r\n              </template>\r\n              <b-dropdown-item>\r\n                알림 내용입니다 ....\r\n              </b-dropdown-item>\r\n              <b-dropdown-divider></b-dropdown-divider>\r\n              <b-dropdown-item>\r\n                알림 내용입니다 ....\r\n              </b-dropdown-item>\r\n            </b-dropdown>\r\n          </b-nav-item>\r\n\r\n          <b-nav-item class=\"d-block d-sm-none d-xxl-block d-xl-block d-lg-block\">\r\n            <b-dropdown variant=\"variant\" size=\"sm\" toggle-class=\"text-decoration-none\" no-caret>\r\n              <template #button-content>\r\n                <i class=\"bi bi-person\" style=\"font-size:24px;\"></i>\r\n              </template>\r\n              <b-dropdown-item>\r\n                <i class=\"bi bi-person-circle\"></i>&nbsp;&nbsp;마이페이지\r\n              </b-dropdown-item>\r\n              <b-dropdown-divider></b-dropdown-divider>\r\n              <b-dropdown-item @click=\"logout()\">\r\n                <i class=\"bi bi-box-arrow-right\"></i>&nbsp;&nbsp;로그아웃\r\n              </b-dropdown-item>\r\n            </b-dropdown>\r\n          </b-nav-item>\r\n\r\n        </b-navbar-nav>\r\n\r\n        <b-navbar-nav v-else style=\"font-size: 1.5rem;\">\r\n          <router-link :to=\"{ name: 'SignIn' }\" class=\"router-link text-decoration-none text-secondary\">\r\n            <b-nav-item href=\"#\" class=\"ps-3 d-block d-sm-none d-xxl-block d-xl-block d-lg-block\">\r\n              <b-button pill class=\"px-4 text-truncate\" variant=\"outline-secondary\">로그인</b-button>\r\n            </b-nav-item>\r\n          </router-link>\r\n          <router-link :to=\"{ name: 'SignUp' }\" class=\"router-link text-decoration-none text-secondary\">\r\n            <b-nav-item href=\"#\" class=\"d-block d-sm-none d-xxl-block d-xl-block d-lg-block\">\r\n              <b-button pill class=\"px-4 text-truncate\" variant=\"primary\">회원가입</b-button>\r\n            </b-nav-item>\r\n          </router-link>\r\n\r\n        </b-navbar-nav>\r\n\r\n      </b-collapse>\r\n    </b-navbar>\r\n  </b-container>\r\n</template>","import script from \"./Header.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Header.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<script setup>\r\n\r\nimport {useRouteWatch} from \"@/composable/router/routeWatch\";\r\nimport {ROUTE_NAME_GROUP} from \"@/composable/router/routeNameGroup\";\r\n\r\nconst { currentRouteName } = useRouteWatch();\r\n\r\n</script>\r\n<template>\r\n  <footer class=\"text-muted py-5\">\r\n    <b-container>\r\n      <footer class=\"py-3 my-4\">\r\n        <b-nav class=\"justify-content-center border-bottom pb-3 mb-3\">\r\n\r\n          <b-nav-item\r\n              class=\"nav-item px-3\"\r\n              v-for=\"group in ROUTE_NAME_GROUP\"\r\n              :key=\"group.label\"\r\n              :class=\"{ 'selected': group.routes.includes(currentRouteName) }\"\r\n          >\r\n            <router-link\r\n                :to=\"{ name: group.routes[0] }\"\r\n                class=\"router-link text-decoration-none\"\r\n                :class=\"{'text-secondary': !group.routes.includes(currentRouteName) }\"\r\n            >\r\n              {{ group.label }}\r\n            </router-link>\r\n          </b-nav-item>\r\n\r\n        </b-nav>\r\n        <p class=\"text-center text-muted\">&copy; 2023 NOW, Inc</p>\r\n      </footer>\r\n    </b-container>\r\n  </footer>\r\n</template>\r\n","import script from \"./Footer.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Footer.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","import {useGetRequest} from \"@/composable/request/getRequest\";\r\nimport {useHttpRequest} from \"@/composable/request/httpRequest\";\r\nimport {formUrlencoded, json, multipart} from \"@/composable/request/constants/Headers\";\r\nimport {HttpMethod} from \"@/composable/request/constants/HttpMethod\";\r\n\r\nconst CategoryService = {\r\n\r\n    /**\r\n     * 카테고리 목록을 가져오는 함수\r\n     *\r\n     * @returns {Promise<AxiosResponse<any>>} - 카테고리 목록\r\n     */\r\n    fetchCategories() {\r\n        return useGetRequest('/api/categories')\r\n    },\r\n};\r\n\r\nexport default CategoryService;\r\n","<script setup>\nimport Header from \"@/components/static/Header.vue\";\nimport Footer from \"@/components/static/Footer.vue\";\nimport CategoryService from \"@/service/CategoryService\";\nimport {store} from \"@/store\";\n\n/**\n * 카테고리 데이터를 가져와 sessionStorage 저장\n *\n * @returns {Promise<void>} 카테고리 데이터 가져오기와 sessionStorage 저장 후 완료\n */\nasync function getCategories() {\n  return CategoryService.fetchCategories().then(response => {\n    store.categories = response.data;\n    sessionStorage.setItem(\"categories\", JSON.stringify(response.data));\n  }).catch(error => {\n    console.log(error)\n  })\n}\n\ngetCategories();\n\n</script>\n\n<template>\n  <Header />\n  <RouterView/>\n  <Footer/>\n</template>\n\n<style>\n/* 스크롤바 항상 보이도록 설정 */\nbody {\n  overflow: scroll;\n}\n\n/* nav, list 에서 선택된 item */\n.selected {\n  font-weight: bold;\n  color: #1E90FF; /* 파란색 */\n  text-shadow: 5px 5px 10px rgba(77, 148, 255, 1);\n}\n</style>","import script from \"./App.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./App.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./App.vue?vue&type=style&index=0&id=1640d2a8&lang=css\"\n\nconst __exports__ = script;\n\nexport default __exports__","/**\r\n * sessionStorage에서 특정 아이템을 JSON 형태로 파싱하여 반환하는 컴포저블\r\n *\r\n * @param {string} item 파싱할 sessionStorage의 아이템 이름\r\n * @returns {any[]} 파싱된 JSON 배열 또는 객체, 아이템이 없으면 빈 객체를 반환\r\n */\r\nexport function useParseJsonItemFromSessionStorage(item) {\r\n    const storedItem = sessionStorage.getItem(item);\r\n\r\n    return storedItem ? JSON.parse(storedItem) : {};\r\n}\r\n","import {createApp} from 'vue';\r\nimport App from './App.vue';\r\nimport router from \"@/router/router\";\r\n\r\nimport BootstrapVue3 from 'bootstrap-vue-3';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport 'bootstrap-vue-3/dist/bootstrap-vue-3.css';\r\nimport '@/assest/main.css';\r\nimport {store} from \"@/store\";\r\nimport AuthenticationService from \"@/service/AuthenticationService\";\r\nimport {useParseJsonItemFromSessionStorage} from \"@/composable/parse/parseJsonItemFromSessionStorage\";\r\n\r\nconst app = createApp(App);\r\ninitializeStore();\r\n\r\napp.use(BootstrapVue3);\r\napp.use(router);\r\napp.mount('#app');\r\n\r\n/**\r\n * 세션 스토리지와 로컬 스토리지에서 데이터를 가져와 스토어를 초기화\r\n *\r\n * @returns {object} 카테고리와 멤버 데이터가 포함된 초기화된 스토어를 반환\r\n */\r\nfunction initializeStore() {\r\n    getMember();\r\n    getCategories();\r\n}\r\n\r\n/**\r\n * 카테고리 데이터를 가져와 store 저장\r\n *\r\n * @returns {Promise<void>} 카테고리 데이터 가져오기와 Store 저장 후 완료\r\n */\r\nfunction getCategories() {\r\n    store.categories = useParseJsonItemFromSessionStorage(\"categories\") || [];\r\n}\r\n\r\n/**\r\n * 회원 데이터를 가져와 store 저장\r\n *\r\n * @returns {Promise<AxiosResponse<any>>} 회원 데이터 가져오기와 Store 저장 후 완료\r\n */\r\nasync function getMember() {\r\n    return AuthenticationService.getMember().then(response => {\r\n        store.saveMember(response.data.id, response.data.nickname);\r\n    }).catch(error => {\r\n        console.log(error)\r\n    })\r\n}\r\n\r\n","var map = {\n\t\"./good-post.png\": 9269,\n\t\"./home-community.png\": 7297,\n\t\"./home-inquiry.png\": 2933,\n\t\"./home-notice.png\": 2402,\n\t\"./home-photo.png\": 5749,\n\t\"./home.png\": 6763,\n\t\"./now-icon-login-signup.png\": 6448\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 1465;","var map = {\n\t\"./error.png\": 9726,\n\t\"./secret.jpg\": 855\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 7191;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t143: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunknow\"] = self[\"webpackChunknow\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [998], function() { return __webpack_require__(4899); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["store","reactive","categories","member","id","nickname","isSignedIn","saveMember","this","resetMember","isMemberSignedIn","isSameMember","__exports__","useCapitalizeFirstLetter","text","replace","toLowerCase","match","toUpperCase","useIsNewPost","date","now","Date","postDate","timeDiff","getTime","daysDiff","useGetTimeDifference","dateString","minuteDiff","hourDiff","dayDiff","monthDiff","yearDiff","Math","floor","useFormatNumber","number","units","unitIndex","length","toFixed","useFilterParams","parameter","Object","entries","filter","key","value","reduce","params","ErrorType","NOT_AUTHENTICATED","ALREADY_AUTHENTICATED","INVALID_TOKEN","EXPIRED_ACCESS_TOKEN","EXPIRED_REFRESH_TOKEN","FORBIDDEN","LOGGED_OUT_TOKEN","NOT_FOUND_TOKEN","NOT_FOUND_MEMBER","DUPLICATE_MEMBER_INFO_ID","DUPLICATE_MEMBER_INFO_NICKNAME","DUPLICATE_MEMBER_INFO_ID_AND_NICKNAME","NOT_FOUND_MANAGER","NOT_FOUND_CATEGORY","INVALID_CATEGORY","NOT_FOUND_POST","CAN_NOT_CREATE_POST","CAN_NOT_UPDATE_POST","CAN_NOT_UPDATE_OTHER_MEMBER_POST","CAN_NOT_DELETE_OTHER_MEMBER_POST","CAN_NOT_VIEW_SECRET_INQUIRY","CAN_NOT_DELETE_POST_WITH_OTHER_MEMBER_COMMENTS","CAN_NOT_VIEW_OTHER_MEMBER_INQUIRIES","CAN_NOT_DELETE_POST_WITH_MANAGER_ANSWER","INVALID_SECRET","NOT_FOUND_COMMENT","CAN_NOT_UPDATE_OTHER_MEMBER_COMMENT","CAN_NOT_DELETE_OTHER_MEMBER_COMMENT","INVALID_ATTACHMENT_EXTENSION","INVALID_ATTACHMENT_SIZE","INVALID_ATTACHMENT_ORIGINAL_NAME","NOT_FOUND_ATTACHMENT","CAN_NOT_UPDATE_THUMBNAIL","REQUEST_EXCEPTION","INVALID_PATH","UNPROCESSABLE_ENTITY","UNHANDLED_EXCEPTION","instance","axios","create","useGetRequest","url","http","get","useHttpRequest","method","formData","requestHeader","request","data","headers","interceptors","response","use","async","error","console","log","errorCode","router","push","name","Promise","reject","multipart","json","formUrlencoded","HttpMethod","GET","POST","PUT","DELETE","PostService","fetchPosts","condition","fetchNotices","fetchCommunities","fetchPhotos","fetchInquiries","fetchNotice","postIdx","fetchCommunity","fetchPhoto","fetchInquiry","fetchSecretInquiry","fetchEditNotice","fetchEditCommunity","fetchEditPhoto","fetchEditInquiry","saveNotice","saveCommunity","savePhoto","saveInquiry","editCommunity","editPhoto","deleteNotice","deleteCommunity","deletePhoto","deleteInquiry","fetchPostsData","ref","notices","communities","photos","inquiries","fetchPostsError","initialCondition","maxNumberOfPosts","getPosts","then","catch","useGetPastDate","period","startDate","setDate","getDate","year","getFullYear","month","String","getMonth","padStart","day","useGetCurrentDate","currentDate","MAX_NUMBER_OF_POSTS","SORT","LATEST","RECOMMENDED","MOST_VIEWED","COMMENTED","SCRAPED","SORT_OPTIONS","label","disabled","props","endDate","postGroup","category","keyword","pageNo","sort","cleanCondition","emit","changeSort","changeMaxNumberOfPosts","changeCategory","subCode","resetCategory","search","watch","newStartDate","deep","filteredPages","computed","startPage","page","endPage","Array","from","_","i","changePage","changePageNo","useFindSubCodeGroup","categoryCode","subCodeGroup","find","item","code","PostGroup","NOTICE","COMMUNITY","PHOTO","INQUIRY","class","_createElementBlock","_hoisted_1","_createVNode","_component_b_navbar_nav","_component_b_nav_item","_component_b_skeleton","variant","width","height","render","_createBlock","_component_b_row","_component_b_col","cols","_component_b_container","ROUTE_NAME_GROUP","routes","useInitialCondition","useObjectToQueryString","obj","queryParams","URLSearchParams","hasOwnProperty","undefined","append","toString","useUpdateUrl","object","window","history","replaceState","state","CONDITION_PARAMS","useConvertKeysToConditionParams","convertedObj","useConvertParamsToKeys","conditionKey","keys","paramKey","useInitialParams","currentRouteParams","useGetPostsSubmit","query","getPostsFunction","updateUrl","updateCondition","useSubmit","assign","photoSubCodeGroup","fetchPhotosData","currentRoute","AuthenticationService","status","refresh","getMember","isManager","password","idState","passwordState","isFormValid","validateAndSignIn","submitForm","submitError","FormData","signIn","passwordConfirm","passwordConfirmState","nameState","nicknameState","validateAndSingUp","noticeSubCodeGroup","fetchNoticesData","inquirySubCodeGroup","fetchInquiriesData","communitySubCodeGroup","fetchCommunitiesData","modalShow","handleOk","bvModalEvent","preventDefault","closeModal","modalElement","document","getElementById","style","display","useGetIconTagByExtension","extension","lowerCaseExtension","useFormatBytes","bytes","base","round","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_renderSlot","_ctx","$slots","_hoisted_13","useRefreshTokenAndRetry","callback","useDeletePostSubmit","targetRouteName","deletePostFunction","deleteSubmitError","fetchCommunityData","getCommunity","fetchNoticeData","getNotice","activeIndex","slides","attachments","map","attachment","src","savedAttachmentName","alt","originalAttachmentName","prevSlide","nextSlide","fetchPhotoData","getPhoto","fetchInquiryData","getInquiry","resetPassword","handleSubmit","AttachmentType","FILE","allowedExtensions","maxUploadSize","maxUploadCount","IMAGE","useValidateAttachmentsExtension","files","file","includes","split","pop","useValidateAttachmentSize","size","useValidateAttachmentUploadCount","useSavePostSubmitWithAttachments","attachmentType","formDataName","savePostFunction","post","attachmentUploadErrors","hasUnsupportedExtensions","isSizeExceeded","isMaxUploadCountExceeded","hasAttachmentUploadErrors","useHandleAttachment","event","target","delete","getSubmitFormData","Blob","JSON","stringify","type","location","message","useSavePostSubmit","pinned","selectedFile","useHandleThumbnail","fileInput","reader","FileReader","onload","preview","result","readAsDataURL","secret","useEditPostSubmitWithAttachments","selectedDeleteAttachmentIndexes","useDeleteAttachment","attachmentIdx","notDeletedIndexes","idx","isAttachmentIdxDeleted","indexOf","getEditCommunity","isRequesting","handleEditSubmit","selectedTopic","fetchEditNoticeData","getEditNotice","EditPhotoOptions","EDIT_EXISTING","ADD_NEW","useEditPostSubmitWithAttachmentsAndThumbnail","selectedEditOption","editOptions","selectedThumbnailAttachmentIdx","notDeletedAttachments","thumbnailAttachmentIdx","updateAttachmentIdx","updateDeleteAttachmentIdx","getEditPhoto","fetchEditInquiryData","getEditInquiry","path","component","Home","SignIn","SignUp","ServiceNotAvailable","beforeEnter","requireSignIn","Notices","NoticePost","NoticeForm","NoticeEdit","Communities","CommunityPost","CommunityForm","CommunityEdit","Photos","PhotoPost","PhotoForm","PhotoEdit","Inquiries","InquiryPost","InquiryForm","InquiryEdit","RequestError","Forbidden","Unauthorized","NotFound","createRouter","createWebHistory","to","next","useRouteWatch","currentRouteName","updateCurrentRouteName","logout","searchPosts","q","CategoryService","fetchCategories","getCategories","sessionStorage","setItem","useParseJsonItemFromSessionStorage","storedItem","getItem","parse","app","createApp","App","initializeStore","BootstrapVue3","mount","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","Error","resolve","module","exports","__webpack_module_cache__","moduleId","cachedModule","__webpack_modules__","call","m","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","splice","r","n","getter","__esModule","d","a","definition","defineProperty","enumerable","g","globalThis","Function","prop","prototype","Symbol","toStringTag","p","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","forEach","bind","__webpack_exports__"],"sourceRoot":""}